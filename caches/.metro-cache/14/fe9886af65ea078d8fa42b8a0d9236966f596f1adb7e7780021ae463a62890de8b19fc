{"dependencies":[{"name":"./core","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":37,"index":116},"end":{"line":4,"column":54,"index":133}}],"key":"FXN3sf/EjRB4E2rwdgFcvRpWg7U=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  ;\n  (function (root, factory) {\n    if (typeof exports === \"object\") {\n      // CommonJS\n      module.exports = exports = factory(require(_dependencyMap[0], \"./core\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      // AMD\n      define([\"./core\"], factory);\n    } else {\n      // Global (browser)\n      factory(root.CryptoJS);\n    }\n  })(this, function (CryptoJS) {\n    (function (undefined) {\n      // Shortcuts\n      var C = CryptoJS;\n      var C_lib = C.lib;\n      var Base = C_lib.Base;\n      var X32WordArray = C_lib.WordArray;\n\n      /**\n       * x64 namespace.\n       */\n      var C_x64 = C.x64 = {};\n\n      /**\n       * A 64-bit word.\n       */\n      var X64Word = C_x64.Word = Base.extend({\n        /**\n         * Initializes a newly created 64-bit word.\n         *\n         * @param {number} high The high 32 bits.\n         * @param {number} low The low 32 bits.\n         *\n         * @example\n         *\n         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n         */\n        init: function (high, low) {\n          this.high = high;\n          this.low = low;\n        }\n\n        /**\n         * Bitwise NOTs this word.\n         *\n         * @return {X64Word} A new x64-Word object after negating.\n         *\n         * @example\n         *\n         *     var negated = x64Word.not();\n         */\n        // not: function () {\n        // var high = ~this.high;\n        // var low = ~this.low;\n\n        // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Bitwise ANDs this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to AND with this word.\n         *\n         * @return {X64Word} A new x64-Word object after ANDing.\n         *\n         * @example\n         *\n         *     var anded = x64Word.and(anotherX64Word);\n         */\n        // and: function (word) {\n        // var high = this.high & word.high;\n        // var low = this.low & word.low;\n\n        // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Bitwise ORs this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to OR with this word.\n         *\n         * @return {X64Word} A new x64-Word object after ORing.\n         *\n         * @example\n         *\n         *     var ored = x64Word.or(anotherX64Word);\n         */\n        // or: function (word) {\n        // var high = this.high | word.high;\n        // var low = this.low | word.low;\n\n        // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Bitwise XORs this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to XOR with this word.\n         *\n         * @return {X64Word} A new x64-Word object after XORing.\n         *\n         * @example\n         *\n         *     var xored = x64Word.xor(anotherX64Word);\n         */\n        // xor: function (word) {\n        // var high = this.high ^ word.high;\n        // var low = this.low ^ word.low;\n\n        // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Shifts this word n bits to the left.\n         *\n         * @param {number} n The number of bits to shift.\n         *\n         * @return {X64Word} A new x64-Word object after shifting.\n         *\n         * @example\n         *\n         *     var shifted = x64Word.shiftL(25);\n         */\n        // shiftL: function (n) {\n        // if (n < 32) {\n        // var high = (this.high << n) | (this.low >>> (32 - n));\n        // var low = this.low << n;\n        // } else {\n        // var high = this.low << (n - 32);\n        // var low = 0;\n        // }\n\n        // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Shifts this word n bits to the right.\n         *\n         * @param {number} n The number of bits to shift.\n         *\n         * @return {X64Word} A new x64-Word object after shifting.\n         *\n         * @example\n         *\n         *     var shifted = x64Word.shiftR(7);\n         */\n        // shiftR: function (n) {\n        // if (n < 32) {\n        // var low = (this.low >>> n) | (this.high << (32 - n));\n        // var high = this.high >>> n;\n        // } else {\n        // var low = this.high >>> (n - 32);\n        // var high = 0;\n        // }\n\n        // return X64Word.create(high, low);\n        // },\n\n        /**\n         * Rotates this word n bits to the left.\n         *\n         * @param {number} n The number of bits to rotate.\n         *\n         * @return {X64Word} A new x64-Word object after rotating.\n         *\n         * @example\n         *\n         *     var rotated = x64Word.rotL(25);\n         */\n        // rotL: function (n) {\n        // return this.shiftL(n).or(this.shiftR(64 - n));\n        // },\n\n        /**\n         * Rotates this word n bits to the right.\n         *\n         * @param {number} n The number of bits to rotate.\n         *\n         * @return {X64Word} A new x64-Word object after rotating.\n         *\n         * @example\n         *\n         *     var rotated = x64Word.rotR(7);\n         */\n        // rotR: function (n) {\n        // return this.shiftR(n).or(this.shiftL(64 - n));\n        // },\n\n        /**\n         * Adds this word with the passed word.\n         *\n         * @param {X64Word} word The x64-Word to add with this word.\n         *\n         * @return {X64Word} A new x64-Word object after adding.\n         *\n         * @example\n         *\n         *     var added = x64Word.add(anotherX64Word);\n         */\n        // add: function (word) {\n        // var low = (this.low + word.low) | 0;\n        // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n        // var high = (this.high + word.high + carry) | 0;\n\n        // return X64Word.create(high, low);\n        // }\n      });\n\n      /**\n       * An array of 64-bit words.\n       *\n       * @property {Array} words The array of CryptoJS.x64.Word objects.\n       * @property {number} sigBytes The number of significant bytes in this word array.\n       */\n      var X64WordArray = C_x64.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.x64.WordArray.create();\n         *\n         *     var wordArray = CryptoJS.x64.WordArray.create([\n         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n         *     ]);\n         *\n         *     var wordArray = CryptoJS.x64.WordArray.create([\n         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n         *     ], 10);\n         */\n        init: function (words, sigBytes) {\n          words = this.words = words || [];\n          if (sigBytes != undefined) {\n            this.sigBytes = sigBytes;\n          } else {\n            this.sigBytes = words.length * 8;\n          }\n        },\n        /**\n         * Converts this 64-bit word array to a 32-bit word array.\n         *\n         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n         *\n         * @example\n         *\n         *     var x32WordArray = x64WordArray.toX32();\n         */\n        toX32: function () {\n          // Shortcuts\n          var x64Words = this.words;\n          var x64WordsLength = x64Words.length;\n\n          // Convert\n          var x32Words = [];\n          for (var i = 0; i < x64WordsLength; i++) {\n            var x64Word = x64Words[i];\n            x32Words.push(x64Word.high);\n            x32Words.push(x64Word.low);\n          }\n          return X32WordArray.create(x32Words, this.sigBytes);\n        },\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {X64WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = x64WordArray.clone();\n         */\n        clone: function () {\n          var clone = Base.clone.call(this);\n\n          // Clone \"words\" array\n          var words = clone.words = this.words.slice(0);\n\n          // Clone each X64Word object\n          var wordsLength = words.length;\n          for (var i = 0; i < wordsLength; i++) {\n            words[i] = words[i].clone();\n          }\n          return clone;\n        }\n      });\n    })();\n    return CryptoJS;\n  });\n});","lineCount":296,"map":[[2,2,1,0],[3,2,1,2],[3,13,1,12,"root"],[3,17,1,16],[3,19,1,18,"factory"],[3,26,1,25],[3,28,1,27],[4,4,2,1],[4,8,2,5],[4,15,2,12,"exports"],[4,22,2,19],[4,27,2,24],[4,35,2,32],[4,37,2,34],[5,6,3,2],[6,6,4,2,"module"],[6,12,4,8],[6,13,4,9,"exports"],[6,20,4,16],[6,23,4,19,"exports"],[6,30,4,26],[6,33,4,29,"factory"],[6,40,4,36],[6,41,4,37,"require"],[6,48,4,44],[6,49,4,44,"_dependencyMap"],[6,63,4,44],[6,76,4,53],[6,77,4,54],[6,78,4,55],[7,4,5,1],[7,5,5,2],[7,11,6,6],[7,15,6,10],[7,22,6,17,"define"],[7,28,6,23],[7,33,6,28],[7,43,6,38],[7,47,6,42,"define"],[7,53,6,48],[7,54,6,49,"amd"],[7,57,6,52],[7,59,6,54],[8,6,7,2],[9,6,8,2,"define"],[9,12,8,8],[9,13,8,9],[9,14,8,10],[9,22,8,18],[9,23,8,19],[9,25,8,21,"factory"],[9,32,8,28],[9,33,8,29],[10,4,9,1],[10,5,9,2],[10,11,10,6],[11,6,11,2],[12,6,12,2,"factory"],[12,13,12,9],[12,14,12,10,"root"],[12,18,12,14],[12,19,12,15,"CryptoJS"],[12,27,12,23],[12,28,12,24],[13,4,13,1],[14,2,14,0],[14,3,14,1],[14,5,14,2],[14,9,14,6],[14,11,14,8],[14,21,14,18,"CryptoJS"],[14,29,14,26],[14,31,14,28],[15,4,16,2],[15,15,16,12,"undefined"],[15,24,16,21],[15,26,16,23],[16,6,17,5],[17,6,18,5],[17,10,18,9,"C"],[17,11,18,10],[17,14,18,13,"CryptoJS"],[17,22,18,21],[18,6,19,5],[18,10,19,9,"C_lib"],[18,15,19,14],[18,18,19,17,"C"],[18,19,19,18],[18,20,19,19,"lib"],[18,23,19,22],[19,6,20,5],[19,10,20,9,"Base"],[19,14,20,13],[19,17,20,16,"C_lib"],[19,22,20,21],[19,23,20,22,"Base"],[19,27,20,26],[20,6,21,5],[20,10,21,9,"X32WordArray"],[20,22,21,21],[20,25,21,24,"C_lib"],[20,30,21,29],[20,31,21,30,"WordArray"],[20,40,21,39],[22,6,23,5],[23,0,24,0],[24,0,25,0],[25,6,26,5],[25,10,26,9,"C_x64"],[25,15,26,14],[25,18,26,17,"C"],[25,19,26,18],[25,20,26,19,"x64"],[25,23,26,22],[25,26,26,25],[25,27,26,26],[25,28,26,27],[27,6,28,5],[28,0,29,0],[29,0,30,0],[30,6,31,5],[30,10,31,9,"X64Word"],[30,17,31,16],[30,20,31,19,"C_x64"],[30,25,31,24],[30,26,31,25,"Word"],[30,30,31,29],[30,33,31,32,"Base"],[30,37,31,36],[30,38,31,37,"extend"],[30,44,31,43],[30,45,31,44],[31,8,32,9],[32,0,33,0],[33,0,34,0],[34,0,35,0],[35,0,36,0],[36,0,37,0],[37,0,38,0],[38,0,39,0],[39,0,40,0],[40,0,41,0],[41,8,42,9,"init"],[41,12,42,13],[41,14,42,15],[41,23,42,15,"init"],[41,24,42,25,"high"],[41,28,42,29],[41,30,42,31,"low"],[41,33,42,34],[41,35,42,36],[42,10,43,13],[42,14,43,17],[42,15,43,18,"high"],[42,19,43,22],[42,22,43,25,"high"],[42,26,43,29],[43,10,44,13],[43,14,44,17],[43,15,44,18,"low"],[43,18,44,21],[43,21,44,24,"low"],[43,24,44,27],[44,8,45,9],[46,8,47,9],[47,0,48,0],[48,0,49,0],[49,0,50,0],[50,0,51,0],[51,0,52,0],[52,0,53,0],[53,0,54,0],[54,0,55,0],[55,8,56,9],[56,8,57,13],[57,8,58,13],[59,8,60,13],[60,8,61,9],[62,8,63,9],[63,0,64,0],[64,0,65,0],[65,0,66,0],[66,0,67,0],[67,0,68,0],[68,0,69,0],[69,0,70,0],[70,0,71,0],[71,0,72,0],[72,0,73,0],[73,8,74,9],[74,8,75,13],[75,8,76,13],[77,8,78,13],[78,8,79,9],[80,8,81,9],[81,0,82,0],[82,0,83,0],[83,0,84,0],[84,0,85,0],[85,0,86,0],[86,0,87,0],[87,0,88,0],[88,0,89,0],[89,0,90,0],[90,0,91,0],[91,8,92,9],[92,8,93,13],[93,8,94,13],[95,8,96,13],[96,8,97,9],[98,8,99,9],[99,0,100,0],[100,0,101,0],[101,0,102,0],[102,0,103,0],[103,0,104,0],[104,0,105,0],[105,0,106,0],[106,0,107,0],[107,0,108,0],[108,0,109,0],[109,8,110,9],[110,8,111,13],[111,8,112,13],[113,8,114,13],[114,8,115,9],[116,8,117,9],[117,0,118,0],[118,0,119,0],[119,0,120,0],[120,0,121,0],[121,0,122,0],[122,0,123,0],[123,0,124,0],[124,0,125,0],[125,0,126,0],[126,0,127,0],[127,8,128,9],[128,8,129,13],[129,8,130,17],[130,8,131,17],[131,8,132,13],[132,8,133,17],[133,8,134,17],[134,8,135,13],[136,8,137,13],[137,8,138,9],[139,8,140,9],[140,0,141,0],[141,0,142,0],[142,0,143,0],[143,0,144,0],[144,0,145,0],[145,0,146,0],[146,0,147,0],[147,0,148,0],[148,0,149,0],[149,0,150,0],[150,8,151,9],[151,8,152,13],[152,8,153,17],[153,8,154,17],[154,8,155,13],[155,8,156,17],[156,8,157,17],[157,8,158,13],[159,8,160,13],[160,8,161,9],[162,8,163,9],[163,0,164,0],[164,0,165,0],[165,0,166,0],[166,0,167,0],[167,0,168,0],[168,0,169,0],[169,0,170,0],[170,0,171,0],[171,0,172,0],[172,0,173,0],[173,8,174,9],[174,8,175,13],[175,8,176,9],[177,8,178,9],[178,0,179,0],[179,0,180,0],[180,0,181,0],[181,0,182,0],[182,0,183,0],[183,0,184,0],[184,0,185,0],[185,0,186,0],[186,0,187,0],[187,0,188,0],[188,8,189,9],[189,8,190,13],[190,8,191,9],[192,8,193,9],[193,0,194,0],[194,0,195,0],[195,0,196,0],[196,0,197,0],[197,0,198,0],[198,0,199,0],[199,0,200,0],[200,0,201,0],[201,0,202,0],[202,0,203,0],[203,8,204,9],[204,8,205,13],[205,8,206,13],[206,8,207,13],[208,8,209,13],[209,8,210,9],[210,6,211,5],[210,7,211,6],[210,8,211,7],[212,6,213,5],[213,0,214,0],[214,0,215,0],[215,0,216,0],[216,0,217,0],[217,0,218,0],[218,6,219,5],[218,10,219,9,"X64WordArray"],[218,22,219,21],[218,25,219,24,"C_x64"],[218,30,219,29],[218,31,219,30,"WordArray"],[218,40,219,39],[218,43,219,42,"Base"],[218,47,219,46],[218,48,219,47,"extend"],[218,54,219,53],[218,55,219,54],[219,8,220,9],[220,0,221,0],[221,0,222,0],[222,0,223,0],[223,0,224,0],[224,0,225,0],[225,0,226,0],[226,0,227,0],[227,0,228,0],[228,0,229,0],[229,0,230,0],[230,0,231,0],[231,0,232,0],[232,0,233,0],[233,0,234,0],[234,0,235,0],[235,0,236,0],[236,0,237,0],[237,0,238,0],[238,0,239,0],[239,8,240,9,"init"],[239,12,240,13],[239,14,240,15],[239,23,240,15,"init"],[239,24,240,25,"words"],[239,29,240,30],[239,31,240,32,"sigBytes"],[239,39,240,40],[239,41,240,42],[240,10,241,13,"words"],[240,15,241,18],[240,18,241,21],[240,22,241,25],[240,23,241,26,"words"],[240,28,241,31],[240,31,241,34,"words"],[240,36,241,39],[240,40,241,43],[240,42,241,45],[241,10,243,13],[241,14,243,17,"sigBytes"],[241,22,243,25],[241,26,243,29,"undefined"],[241,35,243,38],[241,37,243,40],[242,12,244,17],[242,16,244,21],[242,17,244,22,"sigBytes"],[242,25,244,30],[242,28,244,33,"sigBytes"],[242,36,244,41],[243,10,245,13],[243,11,245,14],[243,17,245,20],[244,12,246,17],[244,16,246,21],[244,17,246,22,"sigBytes"],[244,25,246,30],[244,28,246,33,"words"],[244,33,246,38],[244,34,246,39,"length"],[244,40,246,45],[244,43,246,48],[244,44,246,49],[245,10,247,13],[246,8,248,9],[246,9,248,10],[247,8,250,9],[248,0,251,0],[249,0,252,0],[250,0,253,0],[251,0,254,0],[252,0,255,0],[253,0,256,0],[254,0,257,0],[255,0,258,0],[256,8,259,9,"toX32"],[256,13,259,14],[256,15,259,16],[256,24,259,16,"toX32"],[256,25,259,16],[256,27,259,28],[257,10,260,13],[258,10,261,13],[258,14,261,17,"x64Words"],[258,22,261,25],[258,25,261,28],[258,29,261,32],[258,30,261,33,"words"],[258,35,261,38],[259,10,262,13],[259,14,262,17,"x64WordsLength"],[259,28,262,31],[259,31,262,34,"x64Words"],[259,39,262,42],[259,40,262,43,"length"],[259,46,262,49],[261,10,264,13],[262,10,265,13],[262,14,265,17,"x32Words"],[262,22,265,25],[262,25,265,28],[262,27,265,30],[263,10,266,13],[263,15,266,18],[263,19,266,22,"i"],[263,20,266,23],[263,23,266,26],[263,24,266,27],[263,26,266,29,"i"],[263,27,266,30],[263,30,266,33,"x64WordsLength"],[263,44,266,47],[263,46,266,49,"i"],[263,47,266,50],[263,49,266,52],[263,51,266,54],[264,12,267,17],[264,16,267,21,"x64Word"],[264,23,267,28],[264,26,267,31,"x64Words"],[264,34,267,39],[264,35,267,40,"i"],[264,36,267,41],[264,37,267,42],[265,12,268,17,"x32Words"],[265,20,268,25],[265,21,268,26,"push"],[265,25,268,30],[265,26,268,31,"x64Word"],[265,33,268,38],[265,34,268,39,"high"],[265,38,268,43],[265,39,268,44],[266,12,269,17,"x32Words"],[266,20,269,25],[266,21,269,26,"push"],[266,25,269,30],[266,26,269,31,"x64Word"],[266,33,269,38],[266,34,269,39,"low"],[266,37,269,42],[266,38,269,43],[267,10,270,13],[268,10,272,13],[268,17,272,20,"X32WordArray"],[268,29,272,32],[268,30,272,33,"create"],[268,36,272,39],[268,37,272,40,"x32Words"],[268,45,272,48],[268,47,272,50],[268,51,272,54],[268,52,272,55,"sigBytes"],[268,60,272,63],[268,61,272,64],[269,8,273,9],[269,9,273,10],[270,8,275,9],[271,0,276,0],[272,0,277,0],[273,0,278,0],[274,0,279,0],[275,0,280,0],[276,0,281,0],[277,0,282,0],[278,0,283,0],[279,8,284,9,"clone"],[279,13,284,14],[279,15,284,16],[279,24,284,16,"clone"],[279,25,284,16],[279,27,284,28],[280,10,285,13],[280,14,285,17,"clone"],[280,19,285,22],[280,22,285,25,"Base"],[280,26,285,29],[280,27,285,30,"clone"],[280,32,285,35],[280,33,285,36,"call"],[280,37,285,40],[280,38,285,41],[280,42,285,45],[280,43,285,46],[282,10,287,13],[283,10,288,13],[283,14,288,17,"words"],[283,19,288,22],[283,22,288,25,"clone"],[283,27,288,30],[283,28,288,31,"words"],[283,33,288,36],[283,36,288,39],[283,40,288,43],[283,41,288,44,"words"],[283,46,288,49],[283,47,288,50,"slice"],[283,52,288,55],[283,53,288,56],[283,54,288,57],[283,55,288,58],[285,10,290,13],[286,10,291,13],[286,14,291,17,"wordsLength"],[286,25,291,28],[286,28,291,31,"words"],[286,33,291,36],[286,34,291,37,"length"],[286,40,291,43],[287,10,292,13],[287,15,292,18],[287,19,292,22,"i"],[287,20,292,23],[287,23,292,26],[287,24,292,27],[287,26,292,29,"i"],[287,27,292,30],[287,30,292,33,"wordsLength"],[287,41,292,44],[287,43,292,46,"i"],[287,44,292,47],[287,46,292,49],[287,48,292,51],[288,12,293,17,"words"],[288,17,293,22],[288,18,293,23,"i"],[288,19,293,24],[288,20,293,25],[288,23,293,28,"words"],[288,28,293,33],[288,29,293,34,"i"],[288,30,293,35],[288,31,293,36],[288,32,293,37,"clone"],[288,37,293,42],[288,38,293,43],[288,39,293,44],[289,10,294,13],[290,10,296,13],[290,17,296,20,"clone"],[290,22,296,25],[291,8,297,9],[292,6,298,5],[292,7,298,6],[292,8,298,7],[293,4,299,1],[293,5,299,2],[293,7,299,3],[293,8,299,4],[294,4,302,1],[294,11,302,8,"CryptoJS"],[294,19,302,16],[295,2,304,0],[295,3,304,1],[295,4,304,2],[296,0,304,4],[296,3]],"functionMap":{"names":["<global>","<anonymous>","Base.extend$argument_0.init","Base.extend$argument_0.toX32","Base.extend$argument_0.clone"],"mappings":"AAA,EC;CDa,OC;eC4B;UDG;eCmM;UDQ;gBEW;UFc;gBGW;UHa;CDO"}},"type":"js/module"}]}