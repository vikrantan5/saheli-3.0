{"dependencies":[{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}},{"name":"./setMonth.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":41,"index":93}}],"key":"gsWkpqz1f06DeP1VTTlv8Ay4qZE=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":94},"end":{"line":3,"column":37,"index":131}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.set = set;\n  var _constructFrom = require(_dependencyMap[0], \"./constructFrom.js\");\n  var _setMonth = require(_dependencyMap[1], \"./setMonth.js\");\n  var _toDate = require(_dependencyMap[2], \"./toDate.js\");\n  /**\n   * The {@link set} function options.\n   */\n\n  /**\n   * @name set\n   * @category Common Helpers\n   * @summary Set date values to a given date.\n   *\n   * @description\n   * Set date values to a given date.\n   *\n   * Sets time values to date from object `values`.\n   * A value is not set if it is undefined or null or doesn't exist in `values`.\n   *\n   * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n   * to use native `Date#setX` methods. If you use this function, you may not want to include the\n   * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to be changed\n   * @param values - The date values to be set\n   * @param options - The options\n   *\n   * @returns The new date with options set\n   *\n   * @example\n   * // Transform 1 September 2014 into 20 October 2015 in a single line:\n   * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n   * //=> Tue Oct 20 2015 00:00:00\n   *\n   * @example\n   * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n   * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n   * //=> Mon Sep 01 2014 12:23:45\n   */\n  function set(date, values, options) {\n    var _date = (0, _toDate.toDate)(date, options?.in);\n\n    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n    if (isNaN(+_date)) return (0, _constructFrom.constructFrom)(options?.in || date, NaN);\n    if (values.year != null) _date.setFullYear(values.year);\n    if (values.month != null) _date = (0, _setMonth.setMonth)(_date, values.month);\n    if (values.date != null) _date.setDate(values.date);\n    if (values.hours != null) _date.setHours(values.hours);\n    if (values.minutes != null) _date.setMinutes(values.minutes);\n    if (values.seconds != null) _date.setSeconds(values.seconds);\n    if (values.milliseconds != null) _date.setMilliseconds(values.milliseconds);\n    return _date;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = set;\n});","lineCount":65,"map":[[7,2,1,0],[7,6,1,0,"_constructFrom"],[7,20,1,0],[7,23,1,0,"require"],[7,30,1,0],[7,31,1,0,"_dependencyMap"],[7,45,1,0],[8,2,2,0],[8,6,2,0,"_setMonth"],[8,15,2,0],[8,18,2,0,"require"],[8,25,2,0],[8,26,2,0,"_dependencyMap"],[8,40,2,0],[9,2,3,0],[9,6,3,0,"_toDate"],[9,13,3,0],[9,16,3,0,"require"],[9,23,3,0],[9,24,3,0,"_dependencyMap"],[9,38,3,0],[10,2,5,0],[11,0,6,0],[12,0,7,0],[14,2,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,2,43,7],[48,11,43,16,"set"],[48,14,43,19,"set"],[48,15,43,20,"date"],[48,19,43,24],[48,21,43,26,"values"],[48,27,43,32],[48,29,43,34,"options"],[48,36,43,41],[48,38,43,43],[49,4,44,2],[49,8,44,6,"_date"],[49,13,44,11],[49,16,44,14],[49,20,44,14,"toDate"],[49,34,44,20],[49,36,44,21,"date"],[49,40,44,25],[49,42,44,27,"options"],[49,49,44,34],[49,51,44,36,"in"],[49,53,44,38],[49,54,44,39],[51,4,46,2],[52,4,47,2],[52,8,47,6,"isNaN"],[52,13,47,11],[52,14,47,12],[52,15,47,13,"_date"],[52,20,47,18],[52,21,47,19],[52,23,47,21],[52,30,47,28],[52,34,47,28,"constructFrom"],[52,62,47,41],[52,64,47,42,"options"],[52,71,47,49],[52,73,47,51,"in"],[52,75,47,53],[52,79,47,57,"date"],[52,83,47,61],[52,85,47,63,"NaN"],[52,88,47,66],[52,89,47,67],[53,4,49,2],[53,8,49,6,"values"],[53,14,49,12],[53,15,49,13,"year"],[53,19,49,17],[53,23,49,21],[53,27,49,25],[53,29,49,27,"_date"],[53,34,49,32],[53,35,49,33,"setFullYear"],[53,46,49,44],[53,47,49,45,"values"],[53,53,49,51],[53,54,49,52,"year"],[53,58,49,56],[53,59,49,57],[54,4,50,2],[54,8,50,6,"values"],[54,14,50,12],[54,15,50,13,"month"],[54,20,50,18],[54,24,50,22],[54,28,50,26],[54,30,50,28,"_date"],[54,35,50,33],[54,38,50,36],[54,42,50,36,"setMonth"],[54,60,50,44],[54,62,50,45,"_date"],[54,67,50,50],[54,69,50,52,"values"],[54,75,50,58],[54,76,50,59,"month"],[54,81,50,64],[54,82,50,65],[55,4,51,2],[55,8,51,6,"values"],[55,14,51,12],[55,15,51,13,"date"],[55,19,51,17],[55,23,51,21],[55,27,51,25],[55,29,51,27,"_date"],[55,34,51,32],[55,35,51,33,"setDate"],[55,42,51,40],[55,43,51,41,"values"],[55,49,51,47],[55,50,51,48,"date"],[55,54,51,52],[55,55,51,53],[56,4,52,2],[56,8,52,6,"values"],[56,14,52,12],[56,15,52,13,"hours"],[56,20,52,18],[56,24,52,22],[56,28,52,26],[56,30,52,28,"_date"],[56,35,52,33],[56,36,52,34,"setHours"],[56,44,52,42],[56,45,52,43,"values"],[56,51,52,49],[56,52,52,50,"hours"],[56,57,52,55],[56,58,52,56],[57,4,53,2],[57,8,53,6,"values"],[57,14,53,12],[57,15,53,13,"minutes"],[57,22,53,20],[57,26,53,24],[57,30,53,28],[57,32,53,30,"_date"],[57,37,53,35],[57,38,53,36,"setMinutes"],[57,48,53,46],[57,49,53,47,"values"],[57,55,53,53],[57,56,53,54,"minutes"],[57,63,53,61],[57,64,53,62],[58,4,54,2],[58,8,54,6,"values"],[58,14,54,12],[58,15,54,13,"seconds"],[58,22,54,20],[58,26,54,24],[58,30,54,28],[58,32,54,30,"_date"],[58,37,54,35],[58,38,54,36,"setSeconds"],[58,48,54,46],[58,49,54,47,"values"],[58,55,54,53],[58,56,54,54,"seconds"],[58,63,54,61],[58,64,54,62],[59,4,55,2],[59,8,55,6,"values"],[59,14,55,12],[59,15,55,13,"milliseconds"],[59,27,55,25],[59,31,55,29],[59,35,55,33],[59,37,55,35,"_date"],[59,42,55,40],[59,43,55,41,"setMilliseconds"],[59,58,55,56],[59,59,55,57,"values"],[59,65,55,63],[59,66,55,64,"milliseconds"],[59,78,55,76],[59,79,55,77],[60,4,57,2],[60,11,57,9,"_date"],[60,16,57,14],[61,2,58,0],[63,2,60,0],[64,2,60,0],[64,6,60,0,"_default"],[64,14,60,0],[64,17,60,0,"exports"],[64,24,60,0],[64,25,60,0,"default"],[64,32,60,0],[64,35,61,15,"set"],[64,38,61,18],[65,0,61,18],[65,3]],"functionMap":{"names":["<global>","set"],"mappings":"AAA;OC0C;CDe"}},"type":"js/module"}]}