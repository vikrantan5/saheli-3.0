{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":76,"index":76}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./NotificationsEmitterModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":77},"end":{"line":2,"column":70,"index":147}}],"key":"Cb5A/UwoHsQ/oVPs9GPgQtVh11E=","exportNames":["*"]}},{"name":"./utils/mapNotificationResponse","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":148},"end":{"line":3,"column":91,"index":239}}],"key":"JkOfaen2LZL/eo5bIUuRnscMf0c=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DEFAULT_ACTION_IDENTIFIER = void 0;\n  exports.addNotificationReceivedListener = addNotificationReceivedListener;\n  exports.addNotificationResponseClearedListener = addNotificationResponseClearedListener;\n  exports.addNotificationResponseReceivedListener = addNotificationResponseReceivedListener;\n  exports.addNotificationsDroppedListener = addNotificationsDroppedListener;\n  exports.clearLastNotificationResponse = clearLastNotificationResponse;\n  exports.clearLastNotificationResponseAsync = clearLastNotificationResponseAsync;\n  exports.getLastNotificationResponse = getLastNotificationResponse;\n  exports.getLastNotificationResponseAsync = getLastNotificationResponseAsync;\n  exports.removeNotificationSubscription = removeNotificationSubscription;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _NotificationsEmitterModule = _interopRequireDefault(require(_dependencyMap[3], \"./NotificationsEmitterModule\"));\n  var _mapNotificationResponse = require(_dependencyMap[4], \"./utils/mapNotificationResponse\");\n  // Web uses SyntheticEventEmitter\n  var emitter = new _expoModulesCore.LegacyEventEmitter(_NotificationsEmitterModule.default);\n  var didReceiveNotificationEventName = 'onDidReceiveNotification';\n  var didDropNotificationsEventName = 'onNotificationsDeleted';\n  var didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n  var didClearNotificationResponseEventName = 'onDidClearNotificationResponse';\n  // @docsMissing\n  var DEFAULT_ACTION_IDENTIFIER = exports.DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n  /**\n   * Listeners registered by this method will be called whenever a notification is received while the app is running.\n   * @param listener A function accepting a notification ([`Notification`](#notification)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Registering a notification listener using a React hook:\n   * ```jsx\n   * import React from 'react';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function App() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationReceivedListener(notification => {\n   *       console.log(notification);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationEventName, notification => {\n      var mappedNotification = (0, _mapNotificationResponse.mapNotification)(notification);\n      listener(mappedNotification);\n    });\n  }\n  /**\n   * Listeners registered by this method will be called whenever some notifications have been dropped by the server.\n   * Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback.\n   * More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).\n   * @param listener A callback function.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @header listen\n   */\n  function addNotificationsDroppedListener(listener) {\n    return emitter.addListener(didDropNotificationsEventName, listener);\n  }\n  /**\n   * Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).\n   * @param listener A function accepting notification response ([`NotificationResponse`](#notificationresponse)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Register a notification responder listener:\n   * ```jsx\n   * import React from 'react';\n   * import { Linking } from 'react-native';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function Container() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n   *       const url = response.notification.request.content.data.url;\n   *       Linking.openURL(url);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationResponseReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationResponseEventName, response => {\n      var mappedResponse = (0, _mapNotificationResponse.mapNotificationResponse)(response);\n      listener(mappedResponse);\n    });\n  }\n  /**\n   * @deprecated call `remove()` on the subscription object instead.\n   *\n   * Removes a notification subscription returned by an `addNotificationListener` call.\n   * @param subscription A subscription returned by `addNotificationListener` method.\n   * @header listen\n   */\n  function removeNotificationSubscription(subscription) {\n    console.warn('`removeNotificationSubscription` is deprecated. Call `subscription.remove()` instead.');\n    if (typeof subscription?.remove === 'function') {\n      subscription.remove();\n    } else {\n      throw new Error(`removeNotificationSubscription: Provided value is not a subscription: ${subscription}`);\n    }\n  }\n  /**\n   * Gets the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   */\n  function getLastNotificationResponseAsync() {\n    return _getLastNotificationResponseAsync.apply(this, arguments);\n  }\n  /**\n   * Gets the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   */\n  function _getLastNotificationResponseAsync() {\n    _getLastNotificationResponseAsync = (0, _asyncToGenerator2.default)(function* () {\n      return getLastNotificationResponse();\n    });\n    return _getLastNotificationResponseAsync.apply(this, arguments);\n  }\n  function getLastNotificationResponse() {\n    if (!_NotificationsEmitterModule.default.getLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'getLastNotificationResponse');\n    }\n    var response = _NotificationsEmitterModule.default.getLastNotificationResponse();\n    var mappedResponse = response ? (0, _mapNotificationResponse.mapNotificationResponse)(response) : response;\n    return mappedResponse;\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   * @return A promise that resolves if the native call was successful.\n   */\n  function clearLastNotificationResponseAsync() {\n    return _clearLastNotificationResponseAsync.apply(this, arguments);\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   */\n  function _clearLastNotificationResponseAsync() {\n    _clearLastNotificationResponseAsync = (0, _asyncToGenerator2.default)(function* () {\n      clearLastNotificationResponse();\n    });\n    return _clearLastNotificationResponseAsync.apply(this, arguments);\n  }\n  function clearLastNotificationResponse() {\n    if (!_NotificationsEmitterModule.default.clearLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'clearLastNotificationResponse');\n    }\n    _NotificationsEmitterModule.default.clearLastNotificationResponse();\n    // Emit event to clear any useLastNotificationResponse hooks, after native call succeeds\n    emitter.emit(didClearNotificationResponseEventName, []);\n  }\n  /**\n   * @hidden\n   */\n  function addNotificationResponseClearedListener(listener) {\n    return emitter.addListener(didClearNotificationResponseEventName, listener);\n  }\n});","lineCount":189,"map":[[17,2,1,0],[17,6,1,0,"_expoModulesCore"],[17,22,1,0],[17,25,1,0,"require"],[17,32,1,0],[17,33,1,0,"_dependencyMap"],[17,47,1,0],[18,2,2,0],[18,6,2,0,"_NotificationsEmitterModule"],[18,33,2,0],[18,36,2,0,"_interopRequireDefault"],[18,58,2,0],[18,59,2,0,"require"],[18,66,2,0],[18,67,2,0,"_dependencyMap"],[18,81,2,0],[19,2,3,0],[19,6,3,0,"_mapNotificationResponse"],[19,30,3,0],[19,33,3,0,"require"],[19,40,3,0],[19,41,3,0,"_dependencyMap"],[19,55,3,0],[20,2,4,0],[21,2,5,0],[21,6,5,6,"emitter"],[21,13,5,13],[21,16,5,16],[21,20,5,20,"LegacyEventEmitter"],[21,55,5,38],[21,56,5,39,"NotificationsEmitterModule"],[21,91,5,65],[21,92,5,66],[22,2,6,0],[22,6,6,6,"didReceiveNotificationEventName"],[22,37,6,37],[22,40,6,40],[22,66,6,66],[23,2,7,0],[23,6,7,6,"didDropNotificationsEventName"],[23,35,7,35],[23,38,7,38],[23,62,7,62],[24,2,8,0],[24,6,8,6,"didReceiveNotificationResponseEventName"],[24,45,8,45],[24,48,8,48],[24,82,8,82],[25,2,9,0],[25,6,9,6,"didClearNotificationResponseEventName"],[25,43,9,43],[25,46,9,46],[25,78,9,78],[26,2,10,0],[27,2,11,7],[27,6,11,13,"DEFAULT_ACTION_IDENTIFIER"],[27,31,11,38],[27,34,11,38,"exports"],[27,41,11,38],[27,42,11,38,"DEFAULT_ACTION_IDENTIFIER"],[27,67,11,38],[27,70,11,41],[27,114,11,85],[28,2,12,0],[29,0,13,0],[30,0,14,0],[31,0,15,0],[32,0,16,0],[33,0,17,0],[34,0,18,0],[35,0,19,0],[36,0,20,0],[37,0,21,0],[38,0,22,0],[39,0,23,0],[40,0,24,0],[41,0,25,0],[42,0,26,0],[43,0,27,0],[44,0,28,0],[45,0,29,0],[46,0,30,0],[47,0,31,0],[48,0,32,0],[49,0,33,0],[50,0,34,0],[51,0,35,0],[52,2,36,7],[52,11,36,16,"addNotificationReceivedListener"],[52,42,36,47,"addNotificationReceivedListener"],[52,43,36,48,"listener"],[52,51,36,56],[52,53,36,58],[53,4,37,4],[53,11,37,11,"emitter"],[53,18,37,18],[53,19,37,19,"addListener"],[53,30,37,30],[53,31,37,31,"didReceiveNotificationEventName"],[53,62,37,62],[53,64,37,65,"notification"],[53,76,37,77],[53,80,37,82],[54,6,38,8],[54,10,38,14,"mappedNotification"],[54,28,38,32],[54,31,38,35],[54,35,38,35,"mapNotification"],[54,75,38,50],[54,77,38,51,"notification"],[54,89,38,63],[54,90,38,64],[55,6,39,8,"listener"],[55,14,39,16],[55,15,39,17,"mappedNotification"],[55,33,39,35],[55,34,39,36],[56,4,40,4],[56,5,40,5],[56,6,40,6],[57,2,41,0],[58,2,42,0],[59,0,43,0],[60,0,44,0],[61,0,45,0],[62,0,46,0],[63,0,47,0],[64,0,48,0],[65,0,49,0],[66,2,50,7],[66,11,50,16,"addNotificationsDroppedListener"],[66,42,50,47,"addNotificationsDroppedListener"],[66,43,50,48,"listener"],[66,51,50,56],[66,53,50,58],[67,4,51,4],[67,11,51,11,"emitter"],[67,18,51,18],[67,19,51,19,"addListener"],[67,30,51,30],[67,31,51,31,"didDropNotificationsEventName"],[67,60,51,60],[67,62,51,62,"listener"],[67,70,51,70],[67,71,51,71],[68,2,52,0],[69,2,53,0],[70,0,54,0],[71,0,55,0],[72,0,56,0],[73,0,57,0],[74,0,58,0],[75,0,59,0],[76,0,60,0],[77,0,61,0],[78,0,62,0],[79,0,63,0],[80,0,64,0],[81,0,65,0],[82,0,66,0],[83,0,67,0],[84,0,68,0],[85,0,69,0],[86,0,70,0],[87,0,71,0],[88,0,72,0],[89,0,73,0],[90,0,74,0],[91,0,75,0],[92,0,76,0],[93,0,77,0],[94,0,78,0],[95,2,79,7],[95,11,79,16,"addNotificationResponseReceivedListener"],[95,50,79,55,"addNotificationResponseReceivedListener"],[95,51,79,56,"listener"],[95,59,79,64],[95,61,79,66],[96,4,80,4],[96,11,80,11,"emitter"],[96,18,80,18],[96,19,80,19,"addListener"],[96,30,80,30],[96,31,80,31,"didReceiveNotificationResponseEventName"],[96,70,80,70],[96,72,80,73,"response"],[96,80,80,81],[96,84,80,86],[97,6,81,8],[97,10,81,14,"mappedResponse"],[97,24,81,28],[97,27,81,31],[97,31,81,31,"mapNotificationResponse"],[97,79,81,54],[97,81,81,55,"response"],[97,89,81,63],[97,90,81,64],[98,6,82,8,"listener"],[98,14,82,16],[98,15,82,17,"mappedResponse"],[98,29,82,31],[98,30,82,32],[99,4,83,4],[99,5,83,5],[99,6,83,6],[100,2,84,0],[101,2,85,0],[102,0,86,0],[103,0,87,0],[104,0,88,0],[105,0,89,0],[106,0,90,0],[107,0,91,0],[108,2,92,7],[108,11,92,16,"removeNotificationSubscription"],[108,41,92,46,"removeNotificationSubscription"],[108,42,92,47,"subscription"],[108,54,92,59],[108,56,92,61],[109,4,93,4,"console"],[109,11,93,11],[109,12,93,12,"warn"],[109,16,93,16],[109,17,93,17],[109,104,93,104],[109,105,93,105],[110,4,94,4],[110,8,94,8],[110,15,94,15,"subscription"],[110,27,94,27],[110,29,94,29,"remove"],[110,35,94,35],[110,40,94,40],[110,50,94,50],[110,52,94,52],[111,6,95,8,"subscription"],[111,18,95,20],[111,19,95,21,"remove"],[111,25,95,27],[111,26,95,28],[111,27,95,29],[112,4,96,4],[112,5,96,5],[112,11,97,9],[113,6,98,8],[113,12,98,14],[113,16,98,18,"Error"],[113,21,98,23],[113,22,98,24],[113,95,98,97,"subscription"],[113,107,98,109],[113,109,98,111],[113,110,98,112],[114,4,99,4],[115,2,100,0],[116,2,101,0],[117,0,102,0],[118,0,103,0],[119,0,104,0],[120,0,105,0],[121,0,106,0],[122,0,107,0],[123,2,101,0],[123,11,108,22,"getLastNotificationResponseAsync"],[123,43,108,54,"getLastNotificationResponseAsync"],[123,44,108,54],[124,4,108,54],[124,11,108,54,"_getLastNotificationResponseAsync"],[124,44,108,54],[124,45,108,54,"apply"],[124,50,108,54],[124,57,108,54,"arguments"],[124,66,108,54],[125,2,108,54],[126,2,111,0],[127,0,112,0],[128,0,113,0],[129,0,114,0],[130,0,115,0],[131,0,116,0],[132,0,117,0],[133,2,111,0],[133,11,111,0,"_getLastNotificationResponseAsync"],[133,45,111,0],[134,4,111,0,"_getLastNotificationResponseAsync"],[134,37,111,0],[134,44,111,0,"_asyncToGenerator2"],[134,62,111,0],[134,63,111,0,"default"],[134,70,111,0],[134,72,108,7],[134,85,108,57],[135,6,109,4],[135,13,109,11,"getLastNotificationResponse"],[135,40,109,38],[135,41,109,39],[135,42,109,40],[136,4,110,0],[136,5,110,1],[137,4,110,1],[137,11,110,1,"_getLastNotificationResponseAsync"],[137,44,110,1],[137,45,110,1,"apply"],[137,50,110,1],[137,57,110,1,"arguments"],[137,66,110,1],[138,2,110,1],[139,2,118,7],[139,11,118,16,"getLastNotificationResponse"],[139,38,118,43,"getLastNotificationResponse"],[139,39,118,43],[139,41,118,46],[140,4,119,4],[140,8,119,8],[140,9,119,9,"NotificationsEmitterModule"],[140,44,119,35],[140,45,119,36,"getLastNotificationResponse"],[140,72,119,63],[140,74,119,65],[141,6,120,8],[141,12,120,14],[141,16,120,18,"UnavailabilityError"],[141,52,120,37],[141,53,120,38],[141,72,120,57],[141,74,120,59],[141,103,120,88],[141,104,120,89],[142,4,121,4],[143,4,122,4],[143,8,122,10,"response"],[143,16,122,18],[143,19,122,21,"NotificationsEmitterModule"],[143,54,122,47],[143,55,122,48,"getLastNotificationResponse"],[143,82,122,75],[143,83,122,76],[143,84,122,77],[144,4,123,4],[144,8,123,10,"mappedResponse"],[144,22,123,24],[144,25,123,27,"response"],[144,33,123,35],[144,36,123,38],[144,40,123,38,"mapNotificationResponse"],[144,88,123,61],[144,90,123,62,"response"],[144,98,123,70],[144,99,123,71],[144,102,123,74,"response"],[144,110,123,82],[145,4,124,4],[145,11,124,11,"mappedResponse"],[145,25,124,25],[146,2,125,0],[147,2,126,0],[148,0,127,0],[149,0,128,0],[150,0,129,0],[151,0,130,0],[152,0,131,0],[153,0,132,0],[154,0,133,0],[155,0,134,0],[156,0,135,0],[157,2,126,0],[157,11,136,22,"clearLastNotificationResponseAsync"],[157,45,136,56,"clearLastNotificationResponseAsync"],[157,46,136,56],[158,4,136,56],[158,11,136,56,"_clearLastNotificationResponseAsync"],[158,46,136,56],[158,47,136,56,"apply"],[158,52,136,56],[158,59,136,56,"arguments"],[158,68,136,56],[159,2,136,56],[160,2,139,0],[161,0,140,0],[162,0,141,0],[163,0,142,0],[164,0,143,0],[165,0,144,0],[166,0,145,0],[167,0,146,0],[168,0,147,0],[169,2,139,0],[169,11,139,0,"_clearLastNotificationResponseAsync"],[169,47,139,0],[170,4,139,0,"_clearLastNotificationResponseAsync"],[170,39,139,0],[170,46,139,0,"_asyncToGenerator2"],[170,64,139,0],[170,65,139,0,"default"],[170,72,139,0],[170,74,136,7],[170,87,136,59],[171,6,137,4,"clearLastNotificationResponse"],[171,35,137,33],[171,36,137,34],[171,37,137,35],[172,4,138,0],[172,5,138,1],[173,4,138,1],[173,11,138,1,"_clearLastNotificationResponseAsync"],[173,46,138,1],[173,47,138,1,"apply"],[173,52,138,1],[173,59,138,1,"arguments"],[173,68,138,1],[174,2,138,1],[175,2,148,7],[175,11,148,16,"clearLastNotificationResponse"],[175,40,148,45,"clearLastNotificationResponse"],[175,41,148,45],[175,43,148,48],[176,4,149,4],[176,8,149,8],[176,9,149,9,"NotificationsEmitterModule"],[176,44,149,35],[176,45,149,36,"clearLastNotificationResponse"],[176,74,149,65],[176,76,149,67],[177,6,150,8],[177,12,150,14],[177,16,150,18,"UnavailabilityError"],[177,52,150,37],[177,53,150,38],[177,72,150,57],[177,74,150,59],[177,105,150,90],[177,106,150,91],[178,4,151,4],[179,4,152,4,"NotificationsEmitterModule"],[179,39,152,30],[179,40,152,31,"clearLastNotificationResponse"],[179,69,152,60],[179,70,152,61],[179,71,152,62],[180,4,153,4],[181,4,154,4,"emitter"],[181,11,154,11],[181,12,154,12,"emit"],[181,16,154,16],[181,17,154,17,"didClearNotificationResponseEventName"],[181,54,154,54],[181,56,154,56],[181,58,154,58],[181,59,154,59],[182,2,155,0],[183,2,156,0],[184,0,157,0],[185,0,158,0],[186,2,159,7],[186,11,159,16,"addNotificationResponseClearedListener"],[186,49,159,54,"addNotificationResponseClearedListener"],[186,50,159,55,"listener"],[186,58,159,63],[186,60,159,65],[187,4,160,4],[187,11,160,11,"emitter"],[187,18,160,18],[187,19,160,19,"addListener"],[187,30,160,30],[187,31,160,31,"didClearNotificationResponseEventName"],[187,68,160,68],[187,70,160,70,"listener"],[187,78,160,78],[187,79,160,79],[188,2,161,0],[189,0,161,1],[189,3]],"functionMap":{"names":["<global>","addNotificationReceivedListener","emitter.addListener$argument_1","addNotificationsDroppedListener","addNotificationResponseReceivedListener","removeNotificationSubscription","getLastNotificationResponseAsync","getLastNotificationResponse","clearLastNotificationResponseAsync","clearLastNotificationResponse","addNotificationResponseClearedListener"],"mappings":"AAA;OCmC;gECC;KDG;CDC;OGS;CHE;OI2B;wEFC;KEG;CJC;OKQ;CLQ;OMQ;CNE;OOQ;CPO;OQW;CRE;OSU;CTO;OUI;CVE"}},"type":"js/module"}]}