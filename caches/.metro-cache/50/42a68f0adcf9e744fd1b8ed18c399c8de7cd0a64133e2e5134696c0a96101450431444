{"dependencies":[{"name":"call-bound","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":31},"end":{"line":3,"column":37,"index":52}}],"key":"xVV7LLeUILRahu/c6/GJ3JZjpdc=","exportNames":["*"]}},{"name":"is-regex","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":68},"end":{"line":4,"column":33,"index":87}}],"key":"L3k2lf/VKvL7PWw3fXbAiqADQQ4=","exportNames":["*"]}},{"name":"es-errors/type","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":17,"index":155},"end":{"line":7,"column":42,"index":180}}],"key":"JK6ql1q9XC7Vc2zUHS8FnD1mVEg=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var callBound = require(_dependencyMap[0], \"call-bound\");\n  var isRegex = require(_dependencyMap[1], \"is-regex\");\n  var $exec = callBound('RegExp.prototype.exec');\n  var $TypeError = require(_dependencyMap[2], \"es-errors/type\");\n\n  /** @type {import('.')} */\n  module.exports = function regexTester(regex) {\n    if (!isRegex(regex)) {\n      throw new $TypeError('`regex` must be a RegExp');\n    }\n    return function test(s) {\n      return $exec(regex, s) !== null;\n    };\n  };\n});","lineCount":18,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"callBound"],[4,15,3,13],[4,18,3,16,"require"],[4,25,3,23],[4,26,3,23,"_dependencyMap"],[4,40,3,23],[4,57,3,36],[4,58,3,37],[5,2,4,0],[5,6,4,4,"isRegex"],[5,13,4,11],[5,16,4,14,"require"],[5,23,4,21],[5,24,4,21,"_dependencyMap"],[5,38,4,21],[5,53,4,32],[5,54,4,33],[6,2,6,0],[6,6,6,4,"$exec"],[6,11,6,9],[6,14,6,12,"callBound"],[6,23,6,21],[6,24,6,22],[6,47,6,45],[6,48,6,46],[7,2,7,0],[7,6,7,4,"$TypeError"],[7,16,7,14],[7,19,7,17,"require"],[7,26,7,24],[7,27,7,24,"_dependencyMap"],[7,41,7,24],[7,62,7,41],[7,63,7,42],[9,2,9,0],[10,2,10,0,"module"],[10,8,10,6],[10,9,10,7,"exports"],[10,16,10,14],[10,19,10,17],[10,28,10,26,"regexTester"],[10,39,10,37,"regexTester"],[10,40,10,38,"regex"],[10,45,10,43],[10,47,10,45],[11,4,11,1],[11,8,11,5],[11,9,11,6,"isRegex"],[11,16,11,13],[11,17,11,14,"regex"],[11,22,11,19],[11,23,11,20],[11,25,11,22],[12,6,12,2],[12,12,12,8],[12,16,12,12,"$TypeError"],[12,26,12,22],[12,27,12,23],[12,53,12,49],[12,54,12,50],[13,4,13,1],[14,4,14,1],[14,11,14,8],[14,20,14,17,"test"],[14,24,14,21,"test"],[14,25,14,22,"s"],[14,26,14,23],[14,28,14,25],[15,6,15,2],[15,13,15,9,"$exec"],[15,18,15,14],[15,19,15,15,"regex"],[15,24,15,20],[15,26,15,22,"s"],[15,27,15,23],[15,28,15,24],[15,33,15,29],[15,37,15,33],[16,4,16,1],[16,5,16,2],[17,2,17,0],[17,3,17,1],[18,0,17,2],[18,3]],"functionMap":{"names":["<global>","regexTester","test"],"mappings":"AAA;iBCS;QCI;EDE;CDC"}},"type":"js/module"}]}