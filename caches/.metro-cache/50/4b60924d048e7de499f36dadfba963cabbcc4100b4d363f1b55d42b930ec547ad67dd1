{"dependencies":[{"name":"./core","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":37,"index":123},"end":{"line":4,"column":54,"index":140}}],"key":"FXN3sf/EjRB4E2rwdgFcvRpWg7U=","exportNames":["*"]}},{"name":"./cipher-core","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":56,"index":142},"end":{"line":4,"column":80,"index":166}}],"key":"hypdNrOdljBpZaOO94LajVhKIC4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  ;\n  (function (root, factory, undef) {\n    if (typeof exports === \"object\") {\n      // CommonJS\n      module.exports = exports = factory(require(_dependencyMap[0], \"./core\"), require(_dependencyMap[1], \"./cipher-core\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      // AMD\n      define([\"./core\", \"./cipher-core\"], factory);\n    } else {\n      // Global (browser)\n      factory(root.CryptoJS);\n    }\n  })(this, function (CryptoJS) {\n    /** @preserve\n     * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n     * derived from CryptoJS.mode.CTR\n     * Jan Hruby jhruby.web@gmail.com\n     */\n    CryptoJS.mode.CTRGladman = function () {\n      var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n      function incWord(word) {\n        if ((word >> 24 & 0xff) === 0xff) {\n          //overflow\n          var b1 = word >> 16 & 0xff;\n          var b2 = word >> 8 & 0xff;\n          var b3 = word & 0xff;\n          if (b1 === 0xff)\n            // overflow b1\n            {\n              b1 = 0;\n              if (b2 === 0xff) {\n                b2 = 0;\n                if (b3 === 0xff) {\n                  b3 = 0;\n                } else {\n                  ++b3;\n                }\n              } else {\n                ++b2;\n              }\n            } else {\n            ++b1;\n          }\n          word = 0;\n          word += b1 << 16;\n          word += b2 << 8;\n          word += b3;\n        } else {\n          word += 0x01 << 24;\n        }\n        return word;\n      }\n      function incCounter(counter) {\n        if ((counter[0] = incWord(counter[0])) === 0) {\n          // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n          counter[1] = incWord(counter[1]);\n        }\n        return counter;\n      }\n      var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n        processBlock: function (words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n          var iv = this._iv;\n          var counter = this._counter;\n\n          // Generate keystream\n          if (iv) {\n            counter = this._counter = iv.slice(0);\n\n            // Remove IV for subsequent blocks\n            this._iv = undefined;\n          }\n          incCounter(counter);\n          var keystream = counter.slice(0);\n          cipher.encryptBlock(keystream, 0);\n\n          // Encrypt\n          for (var i = 0; i < blockSize; i++) {\n            words[offset + i] ^= keystream[i];\n          }\n        }\n      });\n      CTRGladman.Decryptor = Encryptor;\n      return CTRGladman;\n    }();\n    return CryptoJS.mode.CTRGladman;\n  });\n});","lineCount":91,"map":[[2,2,1,0],[3,2,1,2],[3,13,1,12,"root"],[3,17,1,16],[3,19,1,18,"factory"],[3,26,1,25],[3,28,1,27,"undef"],[3,33,1,32],[3,35,1,34],[4,4,2,1],[4,8,2,5],[4,15,2,12,"exports"],[4,22,2,19],[4,27,2,24],[4,35,2,32],[4,37,2,34],[5,6,3,2],[6,6,4,2,"module"],[6,12,4,8],[6,13,4,9,"exports"],[6,20,4,16],[6,23,4,19,"exports"],[6,30,4,26],[6,33,4,29,"factory"],[6,40,4,36],[6,41,4,37,"require"],[6,48,4,44],[6,49,4,44,"_dependencyMap"],[6,63,4,44],[6,76,4,53],[6,77,4,54],[6,79,4,56,"require"],[6,86,4,63],[6,87,4,63,"_dependencyMap"],[6,101,4,63],[6,121,4,79],[6,122,4,80],[6,123,4,81],[7,4,5,1],[7,5,5,2],[7,11,6,6],[7,15,6,10],[7,22,6,17,"define"],[7,28,6,23],[7,33,6,28],[7,43,6,38],[7,47,6,42,"define"],[7,53,6,48],[7,54,6,49,"amd"],[7,57,6,52],[7,59,6,54],[8,6,7,2],[9,6,8,2,"define"],[9,12,8,8],[9,13,8,9],[9,14,8,10],[9,22,8,18],[9,24,8,20],[9,39,8,35],[9,40,8,36],[9,42,8,38,"factory"],[9,49,8,45],[9,50,8,46],[10,4,9,1],[10,5,9,2],[10,11,10,6],[11,6,11,2],[12,6,12,2,"factory"],[12,13,12,9],[12,14,12,10,"root"],[12,18,12,14],[12,19,12,15,"CryptoJS"],[12,27,12,23],[12,28,12,24],[13,4,13,1],[14,2,14,0],[14,3,14,1],[14,5,14,2],[14,9,14,6],[14,11,14,8],[14,21,14,18,"CryptoJS"],[14,29,14,26],[14,31,14,28],[15,4,16,1],[16,0,17,0],[17,0,18,0],[18,0,19,0],[19,0,20,0],[20,4,21,1,"CryptoJS"],[20,12,21,9],[20,13,21,10,"mode"],[20,17,21,14],[20,18,21,15,"CTRGladman"],[20,28,21,25],[20,31,21,29],[20,43,21,41],[21,6,22,5],[21,10,22,9,"CTRGladman"],[21,20,22,19],[21,23,22,22,"CryptoJS"],[21,31,22,30],[21,32,22,31,"lib"],[21,35,22,34],[21,36,22,35,"BlockCipherMode"],[21,51,22,50],[21,52,22,51,"extend"],[21,58,22,57],[21,59,22,58],[21,60,22,59],[22,6,24,2],[22,15,24,11,"incWord"],[22,22,24,18,"incWord"],[22,23,24,19,"word"],[22,27,24,23],[22,29,25,2],[23,8,26,3],[23,12,26,7],[23,13,26,9,"word"],[23,17,26,13],[23,21,26,17],[23,23,26,19],[23,26,26,23],[23,30,26,27],[23,36,26,33],[23,40,26,37],[23,42,26,39],[24,10,26,41],[25,10,27,3],[25,14,27,7,"b1"],[25,16,27,9],[25,19,27,13,"word"],[25,23,27,17],[25,27,27,21],[25,29,27,23],[25,32,27,25],[25,36,27,29],[26,10,28,3],[26,14,28,7,"b2"],[26,16,28,9],[26,19,28,13,"word"],[26,23,28,17],[26,27,28,21],[26,28,28,22],[26,31,28,24],[26,35,28,28],[27,10,29,3],[27,14,29,7,"b3"],[27,16,29,9],[27,19,29,12,"word"],[27,23,29,16],[27,26,29,19],[27,30,29,23],[28,10,31,3],[28,14,31,7,"b1"],[28,16,31,9],[28,21,31,14],[28,25,31,18],[29,12,31,20],[30,12,32,3],[31,14,33,3,"b1"],[31,16,33,5],[31,19,33,8],[31,20,33,9],[32,14,34,3],[32,18,34,7,"b2"],[32,20,34,9],[32,25,34,14],[32,29,34,18],[32,31,35,3],[33,16,36,4,"b2"],[33,18,36,6],[33,21,36,9],[33,22,36,10],[34,16,37,4],[34,20,37,8,"b3"],[34,22,37,10],[34,27,37,15],[34,31,37,19],[34,33,38,4],[35,18,39,5,"b3"],[35,20,39,7],[35,23,39,10],[35,24,39,11],[36,16,40,4],[36,17,40,5],[36,23,42,4],[37,18,43,5],[37,20,43,7,"b3"],[37,22,43,9],[38,16,44,4],[39,14,45,3],[39,15,45,4],[39,21,47,3],[40,16,48,4],[40,18,48,6,"b2"],[40,20,48,8],[41,14,49,3],[42,12,50,3],[42,13,50,4],[42,19,52,3],[43,12,53,3],[43,14,53,5,"b1"],[43,16,53,7],[44,10,54,3],[45,10,56,3,"word"],[45,14,56,7],[45,17,56,10],[45,18,56,11],[46,10,57,3,"word"],[46,14,57,7],[46,18,57,12,"b1"],[46,20,57,14],[46,24,57,18],[46,26,57,21],[47,10,58,3,"word"],[47,14,58,7],[47,18,58,12,"b2"],[47,20,58,14],[47,24,58,18],[47,25,58,20],[48,10,59,3,"word"],[48,14,59,7],[48,18,59,11,"b3"],[48,20,59,13],[49,8,60,3],[49,9,60,4],[49,15,62,3],[50,10,63,3,"word"],[50,14,63,7],[50,18,63,12],[50,22,63,16],[50,26,63,20],[50,28,63,23],[51,8,64,3],[52,8,65,3],[52,15,65,10,"word"],[52,19,65,14],[53,6,66,2],[54,6,68,2],[54,15,68,11,"incCounter"],[54,25,68,21,"incCounter"],[54,26,68,22,"counter"],[54,33,68,29],[54,35,69,2],[55,8,70,3],[55,12,70,7],[55,13,70,8,"counter"],[55,20,70,15],[55,21,70,16],[55,22,70,17],[55,23,70,18],[55,26,70,21,"incWord"],[55,33,70,28],[55,34,70,29,"counter"],[55,41,70,36],[55,42,70,37],[55,43,70,38],[55,44,70,39],[55,45,70,40],[55,51,70,46],[55,52,70,47],[55,54,71,3],[56,10,72,4],[57,10,73,4,"counter"],[57,17,73,11],[57,18,73,12],[57,19,73,13],[57,20,73,14],[57,23,73,17,"incWord"],[57,30,73,24],[57,31,73,25,"counter"],[57,38,73,32],[57,39,73,33],[57,40,73,34],[57,41,73,35],[57,42,73,36],[58,8,74,3],[59,8,75,3],[59,15,75,10,"counter"],[59,22,75,17],[60,6,76,2],[61,6,78,5],[61,10,78,9,"Encryptor"],[61,19,78,18],[61,22,78,21,"CTRGladman"],[61,32,78,31],[61,33,78,32,"Encryptor"],[61,42,78,41],[61,45,78,44,"CTRGladman"],[61,55,78,54],[61,56,78,55,"extend"],[61,62,78,61],[61,63,78,62],[62,8,79,9,"processBlock"],[62,20,79,21],[62,22,79,23],[62,31,79,23,"processBlock"],[62,32,79,33,"words"],[62,37,79,38],[62,39,79,40,"offset"],[62,45,79,46],[62,47,79,48],[63,10,80,13],[64,10,81,13],[64,14,81,17,"cipher"],[64,20,81,23],[64,23,81,26],[64,27,81,30],[64,28,81,31,"_cipher"],[64,35,81,38],[65,10,82,13],[65,14,82,17,"blockSize"],[65,23,82,26],[65,26,82,29,"cipher"],[65,32,82,35],[65,33,82,36,"blockSize"],[65,42,82,45],[66,10,83,13],[66,14,83,17,"iv"],[66,16,83,19],[66,19,83,22],[66,23,83,26],[66,24,83,27,"_iv"],[66,27,83,30],[67,10,84,13],[67,14,84,17,"counter"],[67,21,84,24],[67,24,84,27],[67,28,84,31],[67,29,84,32,"_counter"],[67,37,84,40],[69,10,86,13],[70,10,87,13],[70,14,87,17,"iv"],[70,16,87,19],[70,18,87,21],[71,12,88,17,"counter"],[71,19,88,24],[71,22,88,27],[71,26,88,31],[71,27,88,32,"_counter"],[71,35,88,40],[71,38,88,43,"iv"],[71,40,88,45],[71,41,88,46,"slice"],[71,46,88,51],[71,47,88,52],[71,48,88,53],[71,49,88,54],[73,12,90,17],[74,12,91,17],[74,16,91,21],[74,17,91,22,"_iv"],[74,20,91,25],[74,23,91,28,"undefined"],[74,32,91,37],[75,10,92,13],[76,10,94,4,"incCounter"],[76,20,94,14],[76,21,94,15,"counter"],[76,28,94,22],[76,29,94,23],[77,10,96,4],[77,14,96,8,"keystream"],[77,23,96,17],[77,26,96,20,"counter"],[77,33,96,27],[77,34,96,28,"slice"],[77,39,96,33],[77,40,96,34],[77,41,96,35],[77,42,96,36],[78,10,97,13,"cipher"],[78,16,97,19],[78,17,97,20,"encryptBlock"],[78,29,97,32],[78,30,97,33,"keystream"],[78,39,97,42],[78,41,97,44],[78,42,97,45],[78,43,97,46],[80,10,99,13],[81,10,100,13],[81,15,100,18],[81,19,100,22,"i"],[81,20,100,23],[81,23,100,26],[81,24,100,27],[81,26,100,29,"i"],[81,27,100,30],[81,30,100,33,"blockSize"],[81,39,100,42],[81,41,100,44,"i"],[81,42,100,45],[81,44,100,47],[81,46,100,49],[82,12,101,17,"words"],[82,17,101,22],[82,18,101,23,"offset"],[82,24,101,29],[82,27,101,32,"i"],[82,28,101,33],[82,29,101,34],[82,33,101,38,"keystream"],[82,42,101,47],[82,43,101,48,"i"],[82,44,101,49],[82,45,101,50],[83,10,102,13],[84,8,103,9],[85,6,104,5],[85,7,104,6],[85,8,104,7],[86,6,106,5,"CTRGladman"],[86,16,106,15],[86,17,106,16,"Decryptor"],[86,26,106,25],[86,29,106,28,"Encryptor"],[86,38,106,37],[87,6,108,5],[87,13,108,12,"CTRGladman"],[87,23,108,22],[88,4,109,1],[88,5,109,2],[88,6,109,3],[88,7,109,5],[89,4,114,1],[89,11,114,8,"CryptoJS"],[89,19,114,16],[89,20,114,17,"mode"],[89,24,114,21],[89,25,114,22,"CTRGladman"],[89,35,114,32],[90,2,116,0],[90,3,116,1],[90,4,116,2],[91,0,116,4],[91,3]],"functionMap":{"names":["<global>","<anonymous>","incWord","incCounter","CTRGladman.extend$argument_0.processBlock"],"mappings":"AAA,EC;CDa,OC;ECU;GD0C;EEE;GFQ;uBGG;UHwB;CDa"}},"type":"js/module"}]}