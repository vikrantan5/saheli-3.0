{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"RgnQ5fGQDzGiH1jMCpSamjCAQN4=","exportNames":["*"]}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.eachDayOfInterval = eachDayOfInterval;\n  var _normalizeInterval2 = require(_dependencyMap[0], \"./_lib/normalizeInterval.js\");\n  var _constructFrom = require(_dependencyMap[1], \"./constructFrom.js\");\n  /**\n   * The {@link eachDayOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachDayOfInterval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name eachDayOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of dates within the specified time interval.\n   *\n   * @description\n   * Return the array of dates within the specified time interval.\n   *\n   * @typeParam IntervalType - Interval type.\n   * @typeParam Options - Options type.\n   *\n   * @param interval - The interval.\n   * @param options - An object with options.\n   *\n   * @returns The array with starts of days from the day of the interval start to the day of the interval end\n   *\n   * @example\n   * // Each day between 6 October 2014 and 10 October 2014:\n   * const result = eachDayOfInterval({\n   *   start: new Date(2014, 9, 6),\n   *   end: new Date(2014, 9, 10)\n   * })\n   * //=> [\n   * //   Mon Oct 06 2014 00:00:00,\n   * //   Tue Oct 07 2014 00:00:00,\n   * //   Wed Oct 08 2014 00:00:00,\n   * //   Thu Oct 09 2014 00:00:00,\n   * //   Fri Oct 10 2014 00:00:00\n   * // ]\n   */\n  function eachDayOfInterval(interval, options) {\n    var _normalizeInterval = (0, _normalizeInterval2.normalizeInterval)(options?.in, interval),\n      start = _normalizeInterval.start,\n      end = _normalizeInterval.end;\n    var reversed = +start > +end;\n    var endTime = reversed ? +start : +end;\n    var date = reversed ? end : start;\n    date.setHours(0, 0, 0, 0);\n    var step = options?.step ?? 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    var dates = [];\n    while (+date <= endTime) {\n      dates.push((0, _constructFrom.constructFrom)(start, date));\n      date.setDate(date.getDate() + step);\n      date.setHours(0, 0, 0, 0);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = eachDayOfInterval;\n});","lineCount":75,"map":[[7,2,1,0],[7,6,1,0,"_normalizeInterval2"],[7,25,1,0],[7,28,1,0,"require"],[7,35,1,0],[7,36,1,0,"_dependencyMap"],[7,50,1,0],[8,2,2,0],[8,6,2,0,"_constructFrom"],[8,20,2,0],[8,23,2,0,"require"],[8,30,2,0],[8,31,2,0,"_dependencyMap"],[8,45,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[20,2,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,2,45,7],[50,11,45,16,"eachDayOfInterval"],[50,28,45,33,"eachDayOfInterval"],[50,29,45,34,"interval"],[50,37,45,42],[50,39,45,44,"options"],[50,46,45,51],[50,48,45,53],[51,4,46,2],[51,8,46,2,"_normalizeInterval"],[51,26,46,2],[51,29,46,25],[51,33,46,25,"normalizeInterval"],[51,70,46,42],[51,72,46,43,"options"],[51,79,46,50],[51,81,46,52,"in"],[51,83,46,54],[51,85,46,56,"interval"],[51,93,46,64],[51,94,46,65],[52,6,46,10,"start"],[52,11,46,15],[52,14,46,15,"_normalizeInterval"],[52,32,46,15],[52,33,46,10,"start"],[52,38,46,15],[53,6,46,17,"end"],[53,9,46,20],[53,12,46,20,"_normalizeInterval"],[53,30,46,20],[53,31,46,17,"end"],[53,34,46,20],[54,4,48,2],[54,8,48,6,"reversed"],[54,16,48,14],[54,19,48,17],[54,20,48,18,"start"],[54,25,48,23],[54,28,48,26],[54,29,48,27,"end"],[54,32,48,30],[55,4,49,2],[55,8,49,8,"endTime"],[55,15,49,15],[55,18,49,18,"reversed"],[55,26,49,26],[55,29,49,29],[55,30,49,30,"start"],[55,35,49,35],[55,38,49,38],[55,39,49,39,"end"],[55,42,49,42],[56,4,50,2],[56,8,50,8,"date"],[56,12,50,12],[56,15,50,15,"reversed"],[56,23,50,23],[56,26,50,26,"end"],[56,29,50,29],[56,32,50,32,"start"],[56,37,50,37],[57,4,51,2,"date"],[57,8,51,6],[57,9,51,7,"setHours"],[57,17,51,15],[57,18,51,16],[57,19,51,17],[57,21,51,19],[57,22,51,20],[57,24,51,22],[57,25,51,23],[57,27,51,25],[57,28,51,26],[57,29,51,27],[58,4,53,2],[58,8,53,6,"step"],[58,12,53,10],[58,15,53,13,"options"],[58,22,53,20],[58,24,53,22,"step"],[58,28,53,26],[58,32,53,30],[58,33,53,31],[59,4,54,2],[59,8,54,6],[59,9,54,7,"step"],[59,13,54,11],[59,15,54,13],[59,22,54,20],[59,24,54,22],[60,4,55,2],[60,8,55,6,"step"],[60,12,55,10],[60,15,55,13],[60,16,55,14],[60,18,55,16],[61,6,56,4,"step"],[61,10,56,8],[61,13,56,11],[61,14,56,12,"step"],[61,18,56,16],[62,6,57,4,"reversed"],[62,14,57,12],[62,17,57,15],[62,18,57,16,"reversed"],[62,26,57,24],[63,4,58,2],[64,4,60,2],[64,8,60,8,"dates"],[64,13,60,13],[64,16,60,16],[64,18,60,18],[65,4,62,2],[65,11,62,9],[65,12,62,10,"date"],[65,16,62,14],[65,20,62,18,"endTime"],[65,27,62,25],[65,29,62,27],[66,6,63,4,"dates"],[66,11,63,9],[66,12,63,10,"push"],[66,16,63,14],[66,17,63,15],[66,21,63,15,"constructFrom"],[66,49,63,28],[66,51,63,29,"start"],[66,56,63,34],[66,58,63,36,"date"],[66,62,63,40],[66,63,63,41],[66,64,63,42],[67,6,64,4,"date"],[67,10,64,8],[67,11,64,9,"setDate"],[67,18,64,16],[67,19,64,17,"date"],[67,23,64,21],[67,24,64,22,"getDate"],[67,31,64,29],[67,32,64,30],[67,33,64,31],[67,36,64,34,"step"],[67,40,64,38],[67,41,64,39],[68,6,65,4,"date"],[68,10,65,8],[68,11,65,9,"setHours"],[68,19,65,17],[68,20,65,18],[68,21,65,19],[68,23,65,21],[68,24,65,22],[68,26,65,24],[68,27,65,25],[68,29,65,27],[68,30,65,28],[68,31,65,29],[69,4,66,2],[70,4,68,2],[70,11,68,9,"reversed"],[70,19,68,17],[70,22,68,20,"dates"],[70,27,68,25],[70,28,68,26,"reverse"],[70,35,68,33],[70,36,68,34],[70,37,68,35],[70,40,68,38,"dates"],[70,45,68,43],[71,2,69,0],[73,2,71,0],[74,2,71,0],[74,6,71,0,"_default"],[74,14,71,0],[74,17,71,0,"exports"],[74,24,71,0],[74,25,71,0,"default"],[74,32,71,0],[74,35,72,15,"eachDayOfInterval"],[74,52,72,32],[75,0,72,32],[75,3]],"functionMap":{"names":["<global>","eachDayOfInterval"],"mappings":"AAA;OC4C;CDwB"}},"type":"js/module"}]}