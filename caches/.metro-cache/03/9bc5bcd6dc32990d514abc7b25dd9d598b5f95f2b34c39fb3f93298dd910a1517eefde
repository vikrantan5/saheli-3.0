{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.buildMatchFn = buildMatchFn;\n  function buildMatchFn(args) {\n    return function (string) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = options.width;\n      var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n      var matchResult = string.match(matchPattern);\n      if (!matchResult) {\n        return null;\n      }\n      var matchedString = matchResult[0];\n      var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n      var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, pattern => pattern.test(matchedString)) :\n      // [TODO] -- I challenge you to fix the type\n      findKey(parsePatterns, pattern => pattern.test(matchedString));\n      var value;\n      value = args.valueCallback ? args.valueCallback(key) : key;\n      value = options.valueCallback ?\n      // [TODO] -- I challenge you to fix the type\n      options.valueCallback(value) : value;\n      var rest = string.slice(matchedString.length);\n      return {\n        value,\n        rest\n      };\n    };\n  }\n  function findKey(object, predicate) {\n    for (var key in object) {\n      if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {\n        return key;\n      }\n    }\n    return undefined;\n  }\n  function findIndex(array, predicate) {\n    for (var key = 0; key < array.length; key++) {\n      if (predicate(array[key])) {\n        return key;\n      }\n    }\n    return undefined;\n  }\n});","lineCount":48,"map":[[6,2,1,7],[6,11,1,16,"buildMatchFn"],[6,23,1,28,"buildMatchFn"],[6,24,1,29,"args"],[6,28,1,33],[6,30,1,35],[7,4,2,2],[7,11,2,9],[7,21,2,10,"string"],[7,27,2,16],[7,29,2,35],[8,6,2,35],[8,10,2,18,"options"],[8,17,2,25],[8,20,2,25,"arguments"],[8,29,2,25],[8,30,2,25,"length"],[8,36,2,25],[8,44,2,25,"arguments"],[8,53,2,25],[8,61,2,25,"undefined"],[8,70,2,25],[8,73,2,25,"arguments"],[8,82,2,25],[8,88,2,28],[8,89,2,29],[8,90,2,30],[9,6,3,4],[9,10,3,10,"width"],[9,15,3,15],[9,18,3,18,"options"],[9,25,3,25],[9,26,3,26,"width"],[9,31,3,31],[10,6,5,4],[10,10,5,10,"matchPattern"],[10,22,5,22],[10,25,6,7,"width"],[10,30,6,12],[10,34,6,16,"args"],[10,38,6,20],[10,39,6,21,"matchPatterns"],[10,52,6,34],[10,53,6,35,"width"],[10,58,6,40],[10,59,6,41],[10,63,7,6,"args"],[10,67,7,10],[10,68,7,11,"matchPatterns"],[10,81,7,24],[10,82,7,25,"args"],[10,86,7,29],[10,87,7,30,"defaultMatchWidth"],[10,104,7,47],[10,105,7,48],[11,6,8,4],[11,10,8,10,"matchResult"],[11,21,8,21],[11,24,8,24,"string"],[11,30,8,30],[11,31,8,31,"match"],[11,36,8,36],[11,37,8,37,"matchPattern"],[11,49,8,49],[11,50,8,50],[12,6,10,4],[12,10,10,8],[12,11,10,9,"matchResult"],[12,22,10,20],[12,24,10,22],[13,8,11,6],[13,15,11,13],[13,19,11,17],[14,6,12,4],[15,6,13,4],[15,10,13,10,"matchedString"],[15,23,13,23],[15,26,13,26,"matchResult"],[15,37,13,37],[15,38,13,38],[15,39,13,39],[15,40,13,40],[16,6,15,4],[16,10,15,10,"parsePatterns"],[16,23,15,23],[16,26,16,7,"width"],[16,31,16,12],[16,35,16,16,"args"],[16,39,16,20],[16,40,16,21,"parsePatterns"],[16,53,16,34],[16,54,16,35,"width"],[16,59,16,40],[16,60,16,41],[16,64,17,6,"args"],[16,68,17,10],[16,69,17,11,"parsePatterns"],[16,82,17,24],[16,83,17,25,"args"],[16,87,17,29],[16,88,17,30,"defaultParseWidth"],[16,105,17,47],[16,106,17,48],[17,6,19,4],[17,10,19,10,"key"],[17,13,19,13],[17,16,19,16,"Array"],[17,21,19,21],[17,22,19,22,"isArray"],[17,29,19,29],[17,30,19,30,"parsePatterns"],[17,43,19,43],[17,44,19,44],[17,47,20,8,"findIndex"],[17,56,20,17],[17,57,20,18,"parsePatterns"],[17,70,20,31],[17,72,20,34,"pattern"],[17,79,20,41],[17,83,20,46,"pattern"],[17,90,20,53],[17,91,20,54,"test"],[17,95,20,58],[17,96,20,59,"matchedString"],[17,109,20,72],[17,110,20,73],[17,111,20,74],[18,6,21,8],[19,6,22,8,"findKey"],[19,13,22,15],[19,14,22,16,"parsePatterns"],[19,27,22,29],[19,29,22,32,"pattern"],[19,36,22,39],[19,40,22,44,"pattern"],[19,47,22,51],[19,48,22,52,"test"],[19,52,22,56],[19,53,22,57,"matchedString"],[19,66,22,70],[19,67,22,71],[19,68,22,72],[20,6,24,4],[20,10,24,8,"value"],[20,15,24,13],[21,6,26,4,"value"],[21,11,26,9],[21,14,26,12,"args"],[21,18,26,16],[21,19,26,17,"valueCallback"],[21,32,26,30],[21,35,26,33,"args"],[21,39,26,37],[21,40,26,38,"valueCallback"],[21,53,26,51],[21,54,26,52,"key"],[21,57,26,55],[21,58,26,56],[21,61,26,59,"key"],[21,64,26,62],[22,6,27,4,"value"],[22,11,27,9],[22,14,27,12,"options"],[22,21,27,19],[22,22,27,20,"valueCallback"],[22,35,27,33],[23,6,28,8],[24,6,29,8,"options"],[24,13,29,15],[24,14,29,16,"valueCallback"],[24,27,29,29],[24,28,29,30,"value"],[24,33,29,35],[24,34,29,36],[24,37,30,8,"value"],[24,42,30,13],[25,6,32,4],[25,10,32,10,"rest"],[25,14,32,14],[25,17,32,17,"string"],[25,23,32,23],[25,24,32,24,"slice"],[25,29,32,29],[25,30,32,30,"matchedString"],[25,43,32,43],[25,44,32,44,"length"],[25,50,32,50],[25,51,32,51],[26,6,34,4],[26,13,34,11],[27,8,34,13,"value"],[27,13,34,18],[28,8,34,20,"rest"],[29,6,34,25],[29,7,34,26],[30,4,35,2],[30,5,35,3],[31,2,36,0],[32,2,38,0],[32,11,38,9,"findKey"],[32,18,38,16,"findKey"],[32,19,38,17,"object"],[32,25,38,23],[32,27,38,25,"predicate"],[32,36,38,34],[32,38,38,36],[33,4,39,2],[33,9,39,7],[33,13,39,13,"key"],[33,16,39,16],[33,20,39,20,"object"],[33,26,39,26],[33,28,39,28],[34,6,40,4],[34,10,41,6,"Object"],[34,16,41,12],[34,17,41,13,"prototype"],[34,26,41,22],[34,27,41,23,"hasOwnProperty"],[34,41,41,37],[34,42,41,38,"call"],[34,46,41,42],[34,47,41,43,"object"],[34,53,41,49],[34,55,41,51,"key"],[34,58,41,54],[34,59,41,55],[34,63,42,6,"predicate"],[34,72,42,15],[34,73,42,16,"object"],[34,79,42,22],[34,80,42,23,"key"],[34,83,42,26],[34,84,42,27],[34,85,42,28],[34,87,43,6],[35,8,44,6],[35,15,44,13,"key"],[35,18,44,16],[36,6,45,4],[37,4,46,2],[38,4,47,2],[38,11,47,9,"undefined"],[38,20,47,18],[39,2,48,0],[40,2,50,0],[40,11,50,9,"findIndex"],[40,20,50,18,"findIndex"],[40,21,50,19,"array"],[40,26,50,24],[40,28,50,26,"predicate"],[40,37,50,35],[40,39,50,37],[41,4,51,2],[41,9,51,7],[41,13,51,11,"key"],[41,16,51,14],[41,19,51,17],[41,20,51,18],[41,22,51,20,"key"],[41,25,51,23],[41,28,51,26,"array"],[41,33,51,31],[41,34,51,32,"length"],[41,40,51,38],[41,42,51,40,"key"],[41,45,51,43],[41,47,51,45],[41,49,51,47],[42,6,52,4],[42,10,52,8,"predicate"],[42,19,52,17],[42,20,52,18,"array"],[42,25,52,23],[42,26,52,24,"key"],[42,29,52,27],[42,30,52,28],[42,31,52,29],[42,33,52,31],[43,8,53,6],[43,15,53,13,"key"],[43,18,53,16],[44,6,54,4],[45,4,55,2],[46,4,56,2],[46,11,56,9,"undefined"],[46,20,56,18],[47,2,57,0],[48,0,57,1],[48,3]],"functionMap":{"names":["<global>","buildMatchFn","<anonymous>","findIndex$argument_1","findKey$argument_1","findKey","findIndex"],"mappings":"AAA,OC;SCC;iCCkB,wCD;+BEE,wCF;GDa;CDC;AKE;CLU;AME;CNO"}},"type":"js/module"}]}