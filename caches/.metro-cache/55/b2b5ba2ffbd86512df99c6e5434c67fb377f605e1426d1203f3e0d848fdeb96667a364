{"dependencies":[{"name":"../../constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":5,"column":28,"index":107}}],"key":"0LIA5DrINmAZiA+WxylNrkCajGU=","exportNames":["*"]}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":109},"end":{"line":7,"column":49,"index":158}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.dayPeriodEnumToHours = dayPeriodEnumToHours;\n  exports.isLeapYearIndex = isLeapYearIndex;\n  exports.mapValue = mapValue;\n  exports.normalizeTwoDigitYear = normalizeTwoDigitYear;\n  exports.parseAnyDigitsSigned = parseAnyDigitsSigned;\n  exports.parseNDigits = parseNDigits;\n  exports.parseNDigitsSigned = parseNDigitsSigned;\n  exports.parseNumericPattern = parseNumericPattern;\n  exports.parseTimezonePattern = parseTimezonePattern;\n  var _constants = require(_dependencyMap[0], \"../../constants.js\");\n  var _constants2 = require(_dependencyMap[1], \"./constants.js\");\n  function mapValue(parseFnResult, mapFn) {\n    if (!parseFnResult) {\n      return parseFnResult;\n    }\n    return {\n      value: mapFn(parseFnResult.value),\n      rest: parseFnResult.rest\n    };\n  }\n  function parseNumericPattern(pattern, dateString) {\n    var matchResult = dateString.match(pattern);\n    if (!matchResult) {\n      return null;\n    }\n    return {\n      value: parseInt(matchResult[0], 10),\n      rest: dateString.slice(matchResult[0].length)\n    };\n  }\n  function parseTimezonePattern(pattern, dateString) {\n    var matchResult = dateString.match(pattern);\n    if (!matchResult) {\n      return null;\n    }\n\n    // Input is 'Z'\n    if (matchResult[0] === \"Z\") {\n      return {\n        value: 0,\n        rest: dateString.slice(1)\n      };\n    }\n    var sign = matchResult[1] === \"+\" ? 1 : -1;\n    var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n    var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n    var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n    return {\n      value: sign * (hours * _constants.millisecondsInHour + minutes * _constants.millisecondsInMinute + seconds * _constants.millisecondsInSecond),\n      rest: dateString.slice(matchResult[0].length)\n    };\n  }\n  function parseAnyDigitsSigned(dateString) {\n    return parseNumericPattern(_constants2.numericPatterns.anyDigitsSigned, dateString);\n  }\n  function parseNDigits(n, dateString) {\n    switch (n) {\n      case 1:\n        return parseNumericPattern(_constants2.numericPatterns.singleDigit, dateString);\n      case 2:\n        return parseNumericPattern(_constants2.numericPatterns.twoDigits, dateString);\n      case 3:\n        return parseNumericPattern(_constants2.numericPatterns.threeDigits, dateString);\n      case 4:\n        return parseNumericPattern(_constants2.numericPatterns.fourDigits, dateString);\n      default:\n        return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n    }\n  }\n  function parseNDigitsSigned(n, dateString) {\n    switch (n) {\n      case 1:\n        return parseNumericPattern(_constants2.numericPatterns.singleDigitSigned, dateString);\n      case 2:\n        return parseNumericPattern(_constants2.numericPatterns.twoDigitsSigned, dateString);\n      case 3:\n        return parseNumericPattern(_constants2.numericPatterns.threeDigitsSigned, dateString);\n      case 4:\n        return parseNumericPattern(_constants2.numericPatterns.fourDigitsSigned, dateString);\n      default:\n        return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n    }\n  }\n  function dayPeriodEnumToHours(dayPeriod) {\n    switch (dayPeriod) {\n      case \"morning\":\n        return 4;\n      case \"evening\":\n        return 17;\n      case \"pm\":\n      case \"noon\":\n      case \"afternoon\":\n        return 12;\n      case \"am\":\n      case \"midnight\":\n      case \"night\":\n      default:\n        return 0;\n    }\n  }\n  function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n    var isCommonEra = currentYear > 0;\n    // Absolute number of the current year:\n    // 1 -> 1 AC\n    // 0 -> 1 BC\n    // -1 -> 2 BC\n    var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n    var result;\n    if (absCurrentYear <= 50) {\n      result = twoDigitYear || 100;\n    } else {\n      var rangeEnd = absCurrentYear + 50;\n      var rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n      var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n      result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n    }\n    return isCommonEra ? result : 1 - result;\n  }\n  function isLeapYearIndex(year) {\n    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n  }\n});","lineCount":126,"map":[[14,2,1,0],[14,6,1,0,"_constants"],[14,16,1,0],[14,19,1,0,"require"],[14,26,1,0],[14,27,1,0,"_dependencyMap"],[14,41,1,0],[15,2,7,0],[15,6,7,0,"_constants2"],[15,17,7,0],[15,20,7,0,"require"],[15,27,7,0],[15,28,7,0,"_dependencyMap"],[15,42,7,0],[16,2,9,7],[16,11,9,16,"mapValue"],[16,19,9,24,"mapValue"],[16,20,9,25,"parseFnResult"],[16,33,9,38],[16,35,9,40,"mapFn"],[16,40,9,45],[16,42,9,47],[17,4,10,2],[17,8,10,6],[17,9,10,7,"parseFnResult"],[17,22,10,20],[17,24,10,22],[18,6,11,4],[18,13,11,11,"parseFnResult"],[18,26,11,24],[19,4,12,2],[20,4,14,2],[20,11,14,9],[21,6,15,4,"value"],[21,11,15,9],[21,13,15,11,"mapFn"],[21,18,15,16],[21,19,15,17,"parseFnResult"],[21,32,15,30],[21,33,15,31,"value"],[21,38,15,36],[21,39,15,37],[22,6,16,4,"rest"],[22,10,16,8],[22,12,16,10,"parseFnResult"],[22,25,16,23],[22,26,16,24,"rest"],[23,4,17,2],[23,5,17,3],[24,2,18,0],[25,2,20,7],[25,11,20,16,"parseNumericPattern"],[25,30,20,35,"parseNumericPattern"],[25,31,20,36,"pattern"],[25,38,20,43],[25,40,20,45,"dateString"],[25,50,20,55],[25,52,20,57],[26,4,21,2],[26,8,21,8,"matchResult"],[26,19,21,19],[26,22,21,22,"dateString"],[26,32,21,32],[26,33,21,33,"match"],[26,38,21,38],[26,39,21,39,"pattern"],[26,46,21,46],[26,47,21,47],[27,4,23,2],[27,8,23,6],[27,9,23,7,"matchResult"],[27,20,23,18],[27,22,23,20],[28,6,24,4],[28,13,24,11],[28,17,24,15],[29,4,25,2],[30,4,27,2],[30,11,27,9],[31,6,28,4,"value"],[31,11,28,9],[31,13,28,11,"parseInt"],[31,21,28,19],[31,22,28,20,"matchResult"],[31,33,28,31],[31,34,28,32],[31,35,28,33],[31,36,28,34],[31,38,28,36],[31,40,28,38],[31,41,28,39],[32,6,29,4,"rest"],[32,10,29,8],[32,12,29,10,"dateString"],[32,22,29,20],[32,23,29,21,"slice"],[32,28,29,26],[32,29,29,27,"matchResult"],[32,40,29,38],[32,41,29,39],[32,42,29,40],[32,43,29,41],[32,44,29,42,"length"],[32,50,29,48],[33,4,30,2],[33,5,30,3],[34,2,31,0],[35,2,33,7],[35,11,33,16,"parseTimezonePattern"],[35,31,33,36,"parseTimezonePattern"],[35,32,33,37,"pattern"],[35,39,33,44],[35,41,33,46,"dateString"],[35,51,33,56],[35,53,33,58],[36,4,34,2],[36,8,34,8,"matchResult"],[36,19,34,19],[36,22,34,22,"dateString"],[36,32,34,32],[36,33,34,33,"match"],[36,38,34,38],[36,39,34,39,"pattern"],[36,46,34,46],[36,47,34,47],[37,4,36,2],[37,8,36,6],[37,9,36,7,"matchResult"],[37,20,36,18],[37,22,36,20],[38,6,37,4],[38,13,37,11],[38,17,37,15],[39,4,38,2],[41,4,40,2],[42,4,41,2],[42,8,41,6,"matchResult"],[42,19,41,17],[42,20,41,18],[42,21,41,19],[42,22,41,20],[42,27,41,25],[42,30,41,28],[42,32,41,30],[43,6,42,4],[43,13,42,11],[44,8,43,6,"value"],[44,13,43,11],[44,15,43,13],[44,16,43,14],[45,8,44,6,"rest"],[45,12,44,10],[45,14,44,12,"dateString"],[45,24,44,22],[45,25,44,23,"slice"],[45,30,44,28],[45,31,44,29],[45,32,44,30],[46,6,45,4],[46,7,45,5],[47,4,46,2],[48,4,48,2],[48,8,48,8,"sign"],[48,12,48,12],[48,15,48,15,"matchResult"],[48,26,48,26],[48,27,48,27],[48,28,48,28],[48,29,48,29],[48,34,48,34],[48,37,48,37],[48,40,48,40],[48,41,48,41],[48,44,48,44],[48,45,48,45],[48,46,48,46],[49,4,49,2],[49,8,49,8,"hours"],[49,13,49,13],[49,16,49,16,"matchResult"],[49,27,49,27],[49,28,49,28],[49,29,49,29],[49,30,49,30],[49,33,49,33,"parseInt"],[49,41,49,41],[49,42,49,42,"matchResult"],[49,53,49,53],[49,54,49,54],[49,55,49,55],[49,56,49,56],[49,58,49,58],[49,60,49,60],[49,61,49,61],[49,64,49,64],[49,65,49,65],[50,4,50,2],[50,8,50,8,"minutes"],[50,15,50,15],[50,18,50,18,"matchResult"],[50,29,50,29],[50,30,50,30],[50,31,50,31],[50,32,50,32],[50,35,50,35,"parseInt"],[50,43,50,43],[50,44,50,44,"matchResult"],[50,55,50,55],[50,56,50,56],[50,57,50,57],[50,58,50,58],[50,60,50,60],[50,62,50,62],[50,63,50,63],[50,66,50,66],[50,67,50,67],[51,4,51,2],[51,8,51,8,"seconds"],[51,15,51,15],[51,18,51,18,"matchResult"],[51,29,51,29],[51,30,51,30],[51,31,51,31],[51,32,51,32],[51,35,51,35,"parseInt"],[51,43,51,43],[51,44,51,44,"matchResult"],[51,55,51,55],[51,56,51,56],[51,57,51,57],[51,58,51,58],[51,60,51,60],[51,62,51,62],[51,63,51,63],[51,66,51,66],[51,67,51,67],[52,4,53,2],[52,11,53,9],[53,6,54,4,"value"],[53,11,54,9],[53,13,55,6,"sign"],[53,17,55,10],[53,21,56,7,"hours"],[53,26,56,12],[53,29,56,15,"millisecondsInHour"],[53,58,56,33],[53,61,57,8,"minutes"],[53,68,57,15],[53,71,57,18,"millisecondsInMinute"],[53,102,57,38],[53,105,58,8,"seconds"],[53,112,58,15],[53,115,58,18,"millisecondsInSecond"],[53,146,58,38],[53,147,58,39],[54,6,59,4,"rest"],[54,10,59,8],[54,12,59,10,"dateString"],[54,22,59,20],[54,23,59,21,"slice"],[54,28,59,26],[54,29,59,27,"matchResult"],[54,40,59,38],[54,41,59,39],[54,42,59,40],[54,43,59,41],[54,44,59,42,"length"],[54,50,59,48],[55,4,60,2],[55,5,60,3],[56,2,61,0],[57,2,63,7],[57,11,63,16,"parseAnyDigitsSigned"],[57,31,63,36,"parseAnyDigitsSigned"],[57,32,63,37,"dateString"],[57,42,63,47],[57,44,63,49],[58,4,64,2],[58,11,64,9,"parseNumericPattern"],[58,30,64,28],[58,31,64,29,"numericPatterns"],[58,58,64,44],[58,59,64,45,"anyDigitsSigned"],[58,74,64,60],[58,76,64,62,"dateString"],[58,86,64,72],[58,87,64,73],[59,2,65,0],[60,2,67,7],[60,11,67,16,"parseNDigits"],[60,23,67,28,"parseNDigits"],[60,24,67,29,"n"],[60,25,67,30],[60,27,67,32,"dateString"],[60,37,67,42],[60,39,67,44],[61,4,68,2],[61,12,68,10,"n"],[61,13,68,11],[62,6,69,4],[62,11,69,9],[62,12,69,10],[63,8,70,6],[63,15,70,13,"parseNumericPattern"],[63,34,70,32],[63,35,70,33,"numericPatterns"],[63,62,70,48],[63,63,70,49,"singleDigit"],[63,74,70,60],[63,76,70,62,"dateString"],[63,86,70,72],[63,87,70,73],[64,6,71,4],[64,11,71,9],[64,12,71,10],[65,8,72,6],[65,15,72,13,"parseNumericPattern"],[65,34,72,32],[65,35,72,33,"numericPatterns"],[65,62,72,48],[65,63,72,49,"twoDigits"],[65,72,72,58],[65,74,72,60,"dateString"],[65,84,72,70],[65,85,72,71],[66,6,73,4],[66,11,73,9],[66,12,73,10],[67,8,74,6],[67,15,74,13,"parseNumericPattern"],[67,34,74,32],[67,35,74,33,"numericPatterns"],[67,62,74,48],[67,63,74,49,"threeDigits"],[67,74,74,60],[67,76,74,62,"dateString"],[67,86,74,72],[67,87,74,73],[68,6,75,4],[68,11,75,9],[68,12,75,10],[69,8,76,6],[69,15,76,13,"parseNumericPattern"],[69,34,76,32],[69,35,76,33,"numericPatterns"],[69,62,76,48],[69,63,76,49,"fourDigits"],[69,73,76,59],[69,75,76,61,"dateString"],[69,85,76,71],[69,86,76,72],[70,6,77,4],[71,8,78,6],[71,15,78,13,"parseNumericPattern"],[71,34,78,32],[71,35,78,33],[71,39,78,37,"RegExp"],[71,45,78,43],[71,46,78,44],[71,55,78,53],[71,58,78,56,"n"],[71,59,78,57],[71,62,78,60],[71,65,78,63],[71,66,78,64],[71,68,78,66,"dateString"],[71,78,78,76],[71,79,78,77],[72,4,79,2],[73,2,80,0],[74,2,82,7],[74,11,82,16,"parseNDigitsSigned"],[74,29,82,34,"parseNDigitsSigned"],[74,30,82,35,"n"],[74,31,82,36],[74,33,82,38,"dateString"],[74,43,82,48],[74,45,82,50],[75,4,83,2],[75,12,83,10,"n"],[75,13,83,11],[76,6,84,4],[76,11,84,9],[76,12,84,10],[77,8,85,6],[77,15,85,13,"parseNumericPattern"],[77,34,85,32],[77,35,85,33,"numericPatterns"],[77,62,85,48],[77,63,85,49,"singleDigitSigned"],[77,80,85,66],[77,82,85,68,"dateString"],[77,92,85,78],[77,93,85,79],[78,6,86,4],[78,11,86,9],[78,12,86,10],[79,8,87,6],[79,15,87,13,"parseNumericPattern"],[79,34,87,32],[79,35,87,33,"numericPatterns"],[79,62,87,48],[79,63,87,49,"twoDigitsSigned"],[79,78,87,64],[79,80,87,66,"dateString"],[79,90,87,76],[79,91,87,77],[80,6,88,4],[80,11,88,9],[80,12,88,10],[81,8,89,6],[81,15,89,13,"parseNumericPattern"],[81,34,89,32],[81,35,89,33,"numericPatterns"],[81,62,89,48],[81,63,89,49,"threeDigitsSigned"],[81,80,89,66],[81,82,89,68,"dateString"],[81,92,89,78],[81,93,89,79],[82,6,90,4],[82,11,90,9],[82,12,90,10],[83,8,91,6],[83,15,91,13,"parseNumericPattern"],[83,34,91,32],[83,35,91,33,"numericPatterns"],[83,62,91,48],[83,63,91,49,"fourDigitsSigned"],[83,79,91,65],[83,81,91,67,"dateString"],[83,91,91,77],[83,92,91,78],[84,6,92,4],[85,8,93,6],[85,15,93,13,"parseNumericPattern"],[85,34,93,32],[85,35,93,33],[85,39,93,37,"RegExp"],[85,45,93,43],[85,46,93,44],[85,57,93,55],[85,60,93,58,"n"],[85,61,93,59],[85,64,93,62],[85,67,93,65],[85,68,93,66],[85,70,93,68,"dateString"],[85,80,93,78],[85,81,93,79],[86,4,94,2],[87,2,95,0],[88,2,97,7],[88,11,97,16,"dayPeriodEnumToHours"],[88,31,97,36,"dayPeriodEnumToHours"],[88,32,97,37,"dayPeriod"],[88,41,97,46],[88,43,97,48],[89,4,98,2],[89,12,98,10,"dayPeriod"],[89,21,98,19],[90,6,99,4],[90,11,99,9],[90,20,99,18],[91,8,100,6],[91,15,100,13],[91,16,100,14],[92,6,101,4],[92,11,101,9],[92,20,101,18],[93,8,102,6],[93,15,102,13],[93,17,102,15],[94,6,103,4],[94,11,103,9],[94,15,103,13],[95,6,104,4],[95,11,104,9],[95,17,104,15],[96,6,105,4],[96,11,105,9],[96,22,105,20],[97,8,106,6],[97,15,106,13],[97,17,106,15],[98,6,107,4],[98,11,107,9],[98,15,107,13],[99,6,108,4],[99,11,108,9],[99,21,108,19],[100,6,109,4],[100,11,109,9],[100,18,109,16],[101,6,110,4],[102,8,111,6],[102,15,111,13],[102,16,111,14],[103,4,112,2],[104,2,113,0],[105,2,115,7],[105,11,115,16,"normalizeTwoDigitYear"],[105,32,115,37,"normalizeTwoDigitYear"],[105,33,115,38,"twoDigitYear"],[105,45,115,50],[105,47,115,52,"currentYear"],[105,58,115,63],[105,60,115,65],[106,4,116,2],[106,8,116,8,"isCommonEra"],[106,19,116,19],[106,22,116,22,"currentYear"],[106,33,116,33],[106,36,116,36],[106,37,116,37],[107,4,117,2],[108,4,118,2],[109,4,119,2],[110,4,120,2],[111,4,121,2],[111,8,121,8,"absCurrentYear"],[111,22,121,22],[111,25,121,25,"isCommonEra"],[111,36,121,36],[111,39,121,39,"currentYear"],[111,50,121,50],[111,53,121,53],[111,54,121,54],[111,57,121,57,"currentYear"],[111,68,121,68],[112,4,123,2],[112,8,123,6,"result"],[112,14,123,12],[113,4,124,2],[113,8,124,6,"absCurrentYear"],[113,22,124,20],[113,26,124,24],[113,28,124,26],[113,30,124,28],[114,6,125,4,"result"],[114,12,125,10],[114,15,125,13,"twoDigitYear"],[114,27,125,25],[114,31,125,29],[114,34,125,32],[115,4,126,2],[115,5,126,3],[115,11,126,9],[116,6,127,4],[116,10,127,10,"rangeEnd"],[116,18,127,18],[116,21,127,21,"absCurrentYear"],[116,35,127,35],[116,38,127,38],[116,40,127,40],[117,6,128,4],[117,10,128,10,"rangeEndCentury"],[117,25,128,25],[117,28,128,28,"Math"],[117,32,128,32],[117,33,128,33,"trunc"],[117,38,128,38],[117,39,128,39,"rangeEnd"],[117,47,128,47],[117,50,128,50],[117,53,128,53],[117,54,128,54],[117,57,128,57],[117,60,128,60],[118,6,129,4],[118,10,129,10,"isPreviousCentury"],[118,27,129,27],[118,30,129,30,"twoDigitYear"],[118,42,129,42],[118,46,129,46,"rangeEnd"],[118,54,129,54],[118,57,129,57],[118,60,129,60],[119,6,130,4,"result"],[119,12,130,10],[119,15,130,13,"twoDigitYear"],[119,27,130,25],[119,30,130,28,"rangeEndCentury"],[119,45,130,43],[119,49,130,47,"isPreviousCentury"],[119,66,130,64],[119,69,130,67],[119,72,130,70],[119,75,130,73],[119,76,130,74],[119,77,130,75],[120,4,131,2],[121,4,133,2],[121,11,133,9,"isCommonEra"],[121,22,133,20],[121,25,133,23,"result"],[121,31,133,29],[121,34,133,32],[121,35,133,33],[121,38,133,36,"result"],[121,44,133,42],[122,2,134,0],[123,2,136,7],[123,11,136,16,"isLeapYearIndex"],[123,26,136,31,"isLeapYearIndex"],[123,27,136,32,"year"],[123,31,136,36],[123,33,136,38],[124,4,137,2],[124,11,137,9,"year"],[124,15,137,13],[124,18,137,16],[124,21,137,19],[124,26,137,24],[124,27,137,25],[124,31,137,30,"year"],[124,35,137,34],[124,38,137,37],[124,39,137,38],[124,44,137,43],[124,45,137,44],[124,49,137,48,"year"],[124,53,137,52],[124,56,137,55],[124,59,137,58],[124,64,137,63],[124,65,137,65],[125,2,138,0],[126,0,138,1],[126,3]],"functionMap":{"names":["<global>","mapValue","parseNumericPattern","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","parseNDigitsSigned","dayPeriodEnumToHours","normalizeTwoDigitYear","isLeapYearIndex"],"mappings":"AAA;OCQ;CDS;OEE;CFW;OGE;CH4B;OIE;CJE;OKE;CLa;OME;CNa;OOE;CPgB;OQE;CRmB;OSE;CTE"}},"type":"js/module"}]}