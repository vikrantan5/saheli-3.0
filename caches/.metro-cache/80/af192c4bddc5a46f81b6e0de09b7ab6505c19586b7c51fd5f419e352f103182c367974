{"dependencies":[{"name":"./isDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"03WtQA+Ko8Xa0FsxL75+n0Zuz38=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":37,"index":75}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.isValid = isValid;\n  var _isDate = require(_dependencyMap[0], \"./isDate.js\");\n  var _toDate = require(_dependencyMap[1], \"./toDate.js\");\n  /**\n   * @name isValid\n   * @category Common Helpers\n   * @summary Is the given date valid?\n   *\n   * @description\n   * Returns false if argument is Invalid Date and true otherwise.\n   * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n   * Invalid Date is a Date, whose time value is NaN.\n   *\n   * Time value of Date: http://es5.github.io/#x15.9.1.1\n   *\n   * @param date - The date to check\n   *\n   * @returns The date is valid\n   *\n   * @example\n   * // For the valid date:\n   * const result = isValid(new Date(2014, 1, 31))\n   * //=> true\n   *\n   * @example\n   * // For the value, convertible into a date:\n   * const result = isValid(1393804800000)\n   * //=> true\n   *\n   * @example\n   * // For the invalid date:\n   * const result = isValid(new Date(''))\n   * //=> false\n   */\n  function isValid(date) {\n    return !(!(0, _isDate.isDate)(date) && typeof date !== \"number\" || isNaN(+(0, _toDate.toDate)(date)));\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = isValid;\n});","lineCount":46,"map":[[7,2,1,0],[7,6,1,0,"_isDate"],[7,13,1,0],[7,16,1,0,"require"],[7,23,1,0],[7,24,1,0,"_dependencyMap"],[7,38,1,0],[8,2,2,0],[8,6,2,0,"_toDate"],[8,13,2,0],[8,16,2,0,"require"],[8,23,2,0],[8,24,2,0,"_dependencyMap"],[8,38,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,2,35,7],[40,11,35,16,"isValid"],[40,18,35,23,"isValid"],[40,19,35,24,"date"],[40,23,35,28],[40,25,35,30],[41,4,36,2],[41,11,36,9],[41,13,36,12],[41,14,36,13],[41,18,36,13,"isDate"],[41,32,36,19],[41,34,36,20,"date"],[41,38,36,24],[41,39,36,25],[41,43,36,29],[41,50,36,36,"date"],[41,54,36,40],[41,59,36,45],[41,67,36,53],[41,71,36,58,"isNaN"],[41,76,36,63],[41,77,36,64],[41,78,36,65],[41,82,36,65,"toDate"],[41,96,36,71],[41,98,36,72,"date"],[41,102,36,76],[41,103,36,77],[41,104,36,78],[41,105,36,79],[42,2,37,0],[44,2,39,0],[45,2,39,0],[45,6,39,0,"_default"],[45,14,39,0],[45,17,39,0,"exports"],[45,24,39,0],[45,25,39,0,"default"],[45,32,39,0],[45,35,40,15,"isValid"],[45,42,40,22],[46,0,40,22],[46,3]],"functionMap":{"names":["<global>","isValid"],"mappings":"AAA;OCkC;CDE"}},"type":"js/module"}]}