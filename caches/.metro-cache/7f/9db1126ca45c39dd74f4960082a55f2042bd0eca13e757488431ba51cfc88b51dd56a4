{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"./_lib/getTimezoneOffsetInMilliseconds.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":92,"index":92}}],"key":"AyqjCuTamFHRMXjptSd4N6rS1NE=","exportNames":["*"]}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":93},"end":{"line":2,"column":51,"index":144}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":145},"end":{"line":3,"column":37,"index":182}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _getTimezoneOffsetInMilliseconds = require(_dependencyMap[2], \"./_lib/getTimezoneOffsetInMilliseconds.js\");\n  var _constants = require(_dependencyMap[3], \"./constants.js\");\n  var _toDate = require(_dependencyMap[4], \"./toDate.js\");\n  /**\n   * @name getOverlappingDaysInIntervals\n   * @category Interval Helpers\n   * @summary Get the number of days that overlap in two time intervals\n   *\n   * @description\n   * Get the number of days that overlap in two time intervals. It uses the time\n   * between dates to calculate the number of days, rounding it up to include\n   * partial days.\n   *\n   * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n   * result in 1.\n   *\n   * @param intervalLeft - The first interval to compare.\n   * @param intervalRight - The second interval to compare.\n   * @param options - An object with options\n   *\n   * @returns The number of days that overlap in two time intervals\n   *\n   * @example\n   * // For overlapping time intervals adds 1 for each started overlapping day:\n   * getOverlappingDaysInIntervals(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n   * )\n   * //=> 3\n   *\n   * @example\n   * // For non-overlapping time intervals returns 0:\n   * getOverlappingDaysInIntervals(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n   * )\n   * //=> 0\n   */\n\n  function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n    var _sort = [+(0, _toDate.toDate)(intervalLeft.start), +(0, _toDate.toDate)(intervalLeft.end)].sort((a, b) => a - b),\n      _sort2 = (0, _slicedToArray2.default)(_sort, 2),\n      leftStart = _sort2[0],\n      leftEnd = _sort2[1];\n    var _sort3 = [+(0, _toDate.toDate)(intervalRight.start), +(0, _toDate.toDate)(intervalRight.end)].sort((a, b) => a - b),\n      _sort4 = (0, _slicedToArray2.default)(_sort3, 2),\n      rightStart = _sort4[0],\n      rightEnd = _sort4[1];\n\n    // Prevent NaN result if intervals don't overlap at all.\n    var isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n    if (!isOverlapping) return 0;\n\n    // Remove the timezone offset to negate the DST effect on calculations.\n    var overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n    var left = overlapLeft - (0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(overlapLeft);\n    var overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n    var right = overlapRight - (0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(overlapRight);\n\n    // Ceil the number to include partial days too.\n    return Math.ceil((right - left) / _constants.millisecondsInDay);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = getOverlappingDaysInIntervals;\n});","lineCount":74,"map":[[9,2,1,0],[9,6,1,0,"_getTimezoneOffsetInMilliseconds"],[9,38,1,0],[9,41,1,0,"require"],[9,48,1,0],[9,49,1,0,"_dependencyMap"],[9,63,1,0],[10,2,2,0],[10,6,2,0,"_constants"],[10,16,2,0],[10,19,2,0,"require"],[10,26,2,0],[10,27,2,0,"_dependencyMap"],[10,41,2,0],[11,2,3,0],[11,6,3,0,"_toDate"],[11,13,3,0],[11,16,3,0,"require"],[11,23,3,0],[11,24,3,0,"_dependencyMap"],[11,38,3,0],[12,2,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[48,2,41,7],[48,11,41,16,"getOverlappingDaysInIntervals"],[48,40,41,45,"getOverlappingDaysInIntervals"],[48,41,41,46,"intervalLeft"],[48,53,41,58],[48,55,41,60,"intervalRight"],[48,68,41,73],[48,70,41,75],[49,4,42,2],[49,8,42,2,"_sort"],[49,13,42,2],[49,16,42,31],[49,17,43,4],[49,18,43,5],[49,22,43,5,"toDate"],[49,36,43,11],[49,38,43,12,"intervalLeft"],[49,50,43,24],[49,51,43,25,"start"],[49,56,43,30],[49,57,43,31],[49,59,44,4],[49,60,44,5],[49,64,44,5,"toDate"],[49,78,44,11],[49,80,44,12,"intervalLeft"],[49,92,44,24],[49,93,44,25,"end"],[49,96,44,28],[49,97,44,29],[49,98,45,3],[49,99,45,4,"sort"],[49,103,45,8],[49,104,45,9],[49,105,45,10,"a"],[49,106,45,11],[49,108,45,13,"b"],[49,109,45,14],[49,114,45,19,"a"],[49,115,45,20],[49,118,45,23,"b"],[49,119,45,24],[49,120,45,25],[50,6,45,25,"_sort2"],[50,12,45,25],[50,19,45,25,"_slicedToArray2"],[50,34,45,25],[50,35,45,25,"default"],[50,42,45,25],[50,44,45,25,"_sort"],[50,49,45,25],[51,6,42,9,"leftStart"],[51,15,42,18],[51,18,42,18,"_sort2"],[51,24,42,18],[52,6,42,20,"leftEnd"],[52,13,42,27],[52,16,42,27,"_sort2"],[52,22,42,27],[53,4,46,2],[53,8,46,2,"_sort3"],[53,14,46,2],[53,17,46,33],[53,18,47,4],[53,19,47,5],[53,23,47,5,"toDate"],[53,37,47,11],[53,39,47,12,"intervalRight"],[53,52,47,25],[53,53,47,26,"start"],[53,58,47,31],[53,59,47,32],[53,61,48,4],[53,62,48,5],[53,66,48,5,"toDate"],[53,80,48,11],[53,82,48,12,"intervalRight"],[53,95,48,25],[53,96,48,26,"end"],[53,99,48,29],[53,100,48,30],[53,101,49,3],[53,102,49,4,"sort"],[53,106,49,8],[53,107,49,9],[53,108,49,10,"a"],[53,109,49,11],[53,111,49,13,"b"],[53,112,49,14],[53,117,49,19,"a"],[53,118,49,20],[53,121,49,23,"b"],[53,122,49,24],[53,123,49,25],[54,6,49,25,"_sort4"],[54,12,49,25],[54,19,49,25,"_slicedToArray2"],[54,34,49,25],[54,35,49,25,"default"],[54,42,49,25],[54,44,49,25,"_sort3"],[54,50,49,25],[55,6,46,9,"rightStart"],[55,16,46,19],[55,19,46,19,"_sort4"],[55,25,46,19],[56,6,46,21,"rightEnd"],[56,14,46,29],[56,17,46,29,"_sort4"],[56,23,46,29],[58,4,51,2],[59,4,52,2],[59,8,52,8,"isOverlapping"],[59,21,52,21],[59,24,52,24,"leftStart"],[59,33,52,33],[59,36,52,36,"rightEnd"],[59,44,52,44],[59,48,52,48,"rightStart"],[59,58,52,58],[59,61,52,61,"leftEnd"],[59,68,52,68],[60,4,53,2],[60,8,53,6],[60,9,53,7,"isOverlapping"],[60,22,53,20],[60,24,53,22],[60,31,53,29],[60,32,53,30],[62,4,55,2],[63,4,56,2],[63,8,56,8,"overlapLeft"],[63,19,56,19],[63,22,56,22,"rightStart"],[63,32,56,32],[63,35,56,35,"leftStart"],[63,44,56,44],[63,47,56,47,"leftStart"],[63,56,56,56],[63,59,56,59,"rightStart"],[63,69,56,69],[64,4,57,2],[64,8,57,8,"left"],[64,12,57,12],[64,15,57,15,"overlapLeft"],[64,26,57,26],[64,29,57,29],[64,33,57,29,"getTimezoneOffsetInMilliseconds"],[64,97,57,60],[64,99,57,61,"overlapLeft"],[64,110,57,72],[64,111,57,73],[65,4,58,2],[65,8,58,8,"overlapRight"],[65,20,58,20],[65,23,58,23,"rightEnd"],[65,31,58,31],[65,34,58,34,"leftEnd"],[65,41,58,41],[65,44,58,44,"leftEnd"],[65,51,58,51],[65,54,58,54,"rightEnd"],[65,62,58,62],[66,4,59,2],[66,8,59,8,"right"],[66,13,59,13],[66,16,59,16,"overlapRight"],[66,28,59,28],[66,31,59,31],[66,35,59,31,"getTimezoneOffsetInMilliseconds"],[66,99,59,62],[66,101,59,63,"overlapRight"],[66,113,59,75],[66,114,59,76],[68,4,61,2],[69,4,62,2],[69,11,62,9,"Math"],[69,15,62,13],[69,16,62,14,"ceil"],[69,20,62,18],[69,21,62,19],[69,22,62,20,"right"],[69,27,62,25],[69,30,62,28,"left"],[69,34,62,32],[69,38,62,36,"millisecondsInDay"],[69,66,62,53],[69,67,62,54],[70,2,63,0],[72,2,65,0],[73,2,65,0],[73,6,65,0,"_default"],[73,14,65,0],[73,17,65,0,"exports"],[73,24,65,0],[73,25,65,0,"default"],[73,32,65,0],[73,35,66,15,"getOverlappingDaysInIntervals"],[73,64,66,44],[74,0,66,44],[74,3]],"functionMap":{"names":["<global>","getOverlappingDaysInIntervals","sort$argument_0"],"mappings":"AAA;OCwC;SCI,eD;SCI,eD;CDc"}},"type":"js/module"}]}