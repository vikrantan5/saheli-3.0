{"dependencies":[{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":37,"index":89}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.setYear = setYear;\n  var _constructFrom = require(_dependencyMap[0], \"./constructFrom.js\");\n  var _toDate = require(_dependencyMap[1], \"./toDate.js\");\n  /**\n   * The {@link setYear} function options.\n   */\n\n  /**\n   * @name setYear\n   * @category Year Helpers\n   * @summary Set the year to the given date.\n   *\n   * @description\n   * Set the year to the given date.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to be changed\n   * @param year - The year of the new date\n   * @param options - An object with options.\n   *\n   * @returns The new date with the year set\n   *\n   * @example\n   * // Set year 2013 to 1 September 2014:\n   * const result = setYear(new Date(2014, 8, 1), 2013)\n   * //=> Sun Sep 01 2013 00:00:00\n   */\n  function setYear(date, year, options) {\n    var date_ = (0, _toDate.toDate)(date, options?.in);\n\n    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n    if (isNaN(+date_)) return (0, _constructFrom.constructFrom)(options?.in || date, NaN);\n    date_.setFullYear(year);\n    return date_;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = setYear;\n});","lineCount":46,"map":[[7,2,1,0],[7,6,1,0,"_constructFrom"],[7,20,1,0],[7,23,1,0,"require"],[7,30,1,0],[7,31,1,0,"_dependencyMap"],[7,45,1,0],[8,2,2,0],[8,6,2,0,"_toDate"],[8,13,2,0],[8,16,2,0,"require"],[8,23,2,0],[8,24,2,0,"_dependencyMap"],[8,38,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,2,30,7],[35,11,30,16,"setYear"],[35,18,30,23,"setYear"],[35,19,30,24,"date"],[35,23,30,28],[35,25,30,30,"year"],[35,29,30,34],[35,31,30,36,"options"],[35,38,30,43],[35,40,30,45],[36,4,31,2],[36,8,31,8,"date_"],[36,13,31,13],[36,16,31,16],[36,20,31,16,"toDate"],[36,34,31,22],[36,36,31,23,"date"],[36,40,31,27],[36,42,31,29,"options"],[36,49,31,36],[36,51,31,38,"in"],[36,53,31,40],[36,54,31,41],[38,4,33,2],[39,4,34,2],[39,8,34,6,"isNaN"],[39,13,34,11],[39,14,34,12],[39,15,34,13,"date_"],[39,20,34,18],[39,21,34,19],[39,23,34,21],[39,30,34,28],[39,34,34,28,"constructFrom"],[39,62,34,41],[39,64,34,42,"options"],[39,71,34,49],[39,73,34,51,"in"],[39,75,34,53],[39,79,34,57,"date"],[39,83,34,61],[39,85,34,63,"NaN"],[39,88,34,66],[39,89,34,67],[40,4,36,2,"date_"],[40,9,36,7],[40,10,36,8,"setFullYear"],[40,21,36,19],[40,22,36,20,"year"],[40,26,36,24],[40,27,36,25],[41,4,37,2],[41,11,37,9,"date_"],[41,16,37,14],[42,2,38,0],[44,2,40,0],[45,2,40,0],[45,6,40,0,"_default"],[45,14,40,0],[45,17,40,0,"exports"],[45,24,40,0],[45,25,40,0,"default"],[45,32,40,0],[45,35,41,15,"setYear"],[45,42,41,22],[46,0,41,22],[46,3]],"functionMap":{"names":["<global>","setYear"],"mappings":"AAA;OC6B;CDQ"}},"type":"js/module"}]}