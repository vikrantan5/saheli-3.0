{"dependencies":[{"name":"./core","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":37,"index":116},"end":{"line":4,"column":54,"index":133}}],"key":"FXN3sf/EjRB4E2rwdgFcvRpWg7U=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  ;\n  (function (root, factory) {\n    if (typeof exports === \"object\") {\n      // CommonJS\n      module.exports = exports = factory(require(_dependencyMap[0], \"./core\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      // AMD\n      define([\"./core\"], factory);\n    } else {\n      // Global (browser)\n      factory(root.CryptoJS);\n    }\n  })(this, function (CryptoJS) {\n    (function () {\n      // Check if typed arrays are supported\n      if (typeof ArrayBuffer != 'function') {\n        return;\n      }\n\n      // Shortcuts\n      var C = CryptoJS;\n      var C_lib = C.lib;\n      var WordArray = C_lib.WordArray;\n\n      // Reference original init\n      var superInit = WordArray.init;\n\n      // Augment WordArray.init to handle typed arrays\n      var subInit = WordArray.init = function (typedArray) {\n        // Convert buffers to uint8\n        if (typedArray instanceof ArrayBuffer) {\n          typedArray = new Uint8Array(typedArray);\n        }\n\n        // Convert other array views to uint8\n        if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {\n          typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n        }\n\n        // Handle Uint8Array\n        if (typedArray instanceof Uint8Array) {\n          // Shortcut\n          var typedArrayByteLength = typedArray.byteLength;\n\n          // Extract bytes\n          var words = [];\n          for (var i = 0; i < typedArrayByteLength; i++) {\n            words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n          }\n\n          // Initialize this word array\n          superInit.call(this, words, typedArrayByteLength);\n        } else {\n          // Else call normal init\n          superInit.apply(this, arguments);\n        }\n      };\n      subInit.prototype = WordArray;\n    })();\n    return CryptoJS.lib.WordArray;\n  });\n});","lineCount":63,"map":[[2,2,1,0],[3,2,1,2],[3,13,1,12,"root"],[3,17,1,16],[3,19,1,18,"factory"],[3,26,1,25],[3,28,1,27],[4,4,2,1],[4,8,2,5],[4,15,2,12,"exports"],[4,22,2,19],[4,27,2,24],[4,35,2,32],[4,37,2,34],[5,6,3,2],[6,6,4,2,"module"],[6,12,4,8],[6,13,4,9,"exports"],[6,20,4,16],[6,23,4,19,"exports"],[6,30,4,26],[6,33,4,29,"factory"],[6,40,4,36],[6,41,4,37,"require"],[6,48,4,44],[6,49,4,44,"_dependencyMap"],[6,63,4,44],[6,76,4,53],[6,77,4,54],[6,78,4,55],[7,4,5,1],[7,5,5,2],[7,11,6,6],[7,15,6,10],[7,22,6,17,"define"],[7,28,6,23],[7,33,6,28],[7,43,6,38],[7,47,6,42,"define"],[7,53,6,48],[7,54,6,49,"amd"],[7,57,6,52],[7,59,6,54],[8,6,7,2],[9,6,8,2,"define"],[9,12,8,8],[9,13,8,9],[9,14,8,10],[9,22,8,18],[9,23,8,19],[9,25,8,21,"factory"],[9,32,8,28],[9,33,8,29],[10,4,9,1],[10,5,9,2],[10,11,10,6],[11,6,11,2],[12,6,12,2,"factory"],[12,13,12,9],[12,14,12,10,"root"],[12,18,12,14],[12,19,12,15,"CryptoJS"],[12,27,12,23],[12,28,12,24],[13,4,13,1],[14,2,14,0],[14,3,14,1],[14,5,14,2],[14,9,14,6],[14,11,14,8],[14,21,14,18,"CryptoJS"],[14,29,14,26],[14,31,14,28],[15,4,16,2],[15,17,16,14],[16,6,17,5],[17,6,18,5],[17,10,18,9],[17,17,18,16,"ArrayBuffer"],[17,28,18,27],[17,32,18,31],[17,42,18,41],[17,44,18,43],[18,8,19,9],[19,6,20,5],[21,6,22,5],[22,6,23,5],[22,10,23,9,"C"],[22,11,23,10],[22,14,23,13,"CryptoJS"],[22,22,23,21],[23,6,24,5],[23,10,24,9,"C_lib"],[23,15,24,14],[23,18,24,17,"C"],[23,19,24,18],[23,20,24,19,"lib"],[23,23,24,22],[24,6,25,5],[24,10,25,9,"WordArray"],[24,19,25,18],[24,22,25,21,"C_lib"],[24,27,25,26],[24,28,25,27,"WordArray"],[24,37,25,36],[26,6,27,5],[27,6,28,5],[27,10,28,9,"superInit"],[27,19,28,18],[27,22,28,21,"WordArray"],[27,31,28,30],[27,32,28,31,"init"],[27,36,28,35],[29,6,30,5],[30,6,31,5],[30,10,31,9,"subInit"],[30,17,31,16],[30,20,31,19,"WordArray"],[30,29,31,28],[30,30,31,29,"init"],[30,34,31,33],[30,37,31,36],[30,47,31,46,"typedArray"],[30,57,31,56],[30,59,31,58],[31,8,32,9],[32,8,33,9],[32,12,33,13,"typedArray"],[32,22,33,23],[32,34,33,35,"ArrayBuffer"],[32,45,33,46],[32,47,33,48],[33,10,34,13,"typedArray"],[33,20,34,23],[33,23,34,26],[33,27,34,30,"Uint8Array"],[33,37,34,40],[33,38,34,41,"typedArray"],[33,48,34,51],[33,49,34,52],[34,8,35,9],[36,8,37,9],[37,8,38,9],[37,12,39,13,"typedArray"],[37,22,39,23],[37,34,39,35,"Int8Array"],[37,43,39,44],[37,47,40,14],[37,54,40,21,"Uint8ClampedArray"],[37,71,40,38],[37,76,40,43],[37,87,40,54],[37,91,40,58,"typedArray"],[37,101,40,68],[37,113,40,80,"Uint8ClampedArray"],[37,130,40,98],[37,134,41,13,"typedArray"],[37,144,41,23],[37,156,41,35,"Int16Array"],[37,166,41,45],[37,170,42,13,"typedArray"],[37,180,42,23],[37,192,42,35,"Uint16Array"],[37,203,42,46],[37,207,43,13,"typedArray"],[37,217,43,23],[37,229,43,35,"Int32Array"],[37,239,43,45],[37,243,44,13,"typedArray"],[37,253,44,23],[37,265,44,35,"Uint32Array"],[37,276,44,46],[37,280,45,13,"typedArray"],[37,290,45,23],[37,302,45,35,"Float32Array"],[37,314,45,47],[37,318,46,13,"typedArray"],[37,328,46,23],[37,340,46,35,"Float64Array"],[37,352,46,47],[37,354,47,11],[38,10,48,13,"typedArray"],[38,20,48,23],[38,23,48,26],[38,27,48,30,"Uint8Array"],[38,37,48,40],[38,38,48,41,"typedArray"],[38,48,48,51],[38,49,48,52,"buffer"],[38,55,48,58],[38,57,48,60,"typedArray"],[38,67,48,70],[38,68,48,71,"byteOffset"],[38,78,48,81],[38,80,48,83,"typedArray"],[38,90,48,93],[38,91,48,94,"byteLength"],[38,101,48,104],[38,102,48,105],[39,8,49,9],[41,8,51,9],[42,8,52,9],[42,12,52,13,"typedArray"],[42,22,52,23],[42,34,52,35,"Uint8Array"],[42,44,52,45],[42,46,52,47],[43,10,53,13],[44,10,54,13],[44,14,54,17,"typedArrayByteLength"],[44,34,54,37],[44,37,54,40,"typedArray"],[44,47,54,50],[44,48,54,51,"byteLength"],[44,58,54,61],[46,10,56,13],[47,10,57,13],[47,14,57,17,"words"],[47,19,57,22],[47,22,57,25],[47,24,57,27],[48,10,58,13],[48,15,58,18],[48,19,58,22,"i"],[48,20,58,23],[48,23,58,26],[48,24,58,27],[48,26,58,29,"i"],[48,27,58,30],[48,30,58,33,"typedArrayByteLength"],[48,50,58,53],[48,52,58,55,"i"],[48,53,58,56],[48,55,58,58],[48,57,58,60],[49,12,59,17,"words"],[49,17,59,22],[49,18,59,23,"i"],[49,19,59,24],[49,24,59,29],[49,25,59,30],[49,26,59,31],[49,30,59,35,"typedArray"],[49,40,59,45],[49,41,59,46,"i"],[49,42,59,47],[49,43,59,48],[49,47,59,53],[49,49,59,55],[49,52,59,59,"i"],[49,53,59,60],[49,56,59,63],[49,57,59,64],[49,60,59,68],[49,61,59,70],[50,10,60,13],[52,10,62,13],[53,10,63,13,"superInit"],[53,19,63,22],[53,20,63,23,"call"],[53,24,63,27],[53,25,63,28],[53,29,63,32],[53,31,63,34,"words"],[53,36,63,39],[53,38,63,41,"typedArrayByteLength"],[53,58,63,61],[53,59,63,62],[54,8,64,9],[54,9,64,10],[54,15,64,16],[55,10,65,13],[56,10,66,13,"superInit"],[56,19,66,22],[56,20,66,23,"apply"],[56,25,66,28],[56,26,66,29],[56,30,66,33],[56,32,66,35,"arguments"],[56,41,66,44],[56,42,66,45],[57,8,67,9],[58,6,68,5],[58,7,68,6],[59,6,70,5,"subInit"],[59,13,70,12],[59,14,70,13,"prototype"],[59,23,70,22],[59,26,70,25,"WordArray"],[59,35,70,34],[60,4,71,1],[60,5,71,2],[60,7,71,3],[60,8,71,4],[61,4,74,1],[61,11,74,8,"CryptoJS"],[61,19,74,16],[61,20,74,17,"lib"],[61,23,74,20],[61,24,74,21,"WordArray"],[61,33,74,30],[62,2,76,0],[62,3,76,1],[62,4,76,2],[63,0,76,4],[63,3]],"functionMap":{"names":["<global>","<anonymous>","WordArray.init"],"mappings":"AAA,EC;CDa,OC;oCCiB;MDqC;CDQ"}},"type":"js/module"}]}