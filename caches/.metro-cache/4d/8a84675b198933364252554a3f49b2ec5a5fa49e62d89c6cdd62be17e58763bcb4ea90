{"dependencies":[{"name":"./_lib/format/lightFormatters.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":67,"index":67}}],"key":"VfPBVPZL5tVjamd4/64vRDUW4DY=","exportNames":["*"]}},{"name":"./isValid.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":68},"end":{"line":2,"column":39,"index":107}}],"key":"Sst1buy9uBfV7bjRtTAEggSwFYs=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":108},"end":{"line":3,"column":37,"index":145}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.lightFormat = lightFormat;\n  Object.defineProperty(exports, \"lightFormatters\", {\n    enumerable: true,\n    get: function () {\n      return _lightFormatters.lightFormatters;\n    }\n  });\n  var _lightFormatters = require(_dependencyMap[0], \"./_lib/format/lightFormatters.js\");\n  var _isValid = require(_dependencyMap[1], \"./isValid.js\");\n  var _toDate = require(_dependencyMap[2], \"./toDate.js\");\n  // Rexports of internal for libraries to use.\n  // See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n  // This RegExp consists of three parts separated by `|`:\n  // - (\\w)\\1* matches any sequences of the same letter\n  // - '' matches two quote characters in a row\n  // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n  //   except a single quote symbol, which ends the sequence.\n  //   Two quote characters do not end the sequence.\n  //   If there is no matching single quote\n  //   then the sequence will continue until the end of the string.\n  // - . matches any single character unmatched by previous parts of the RegExps\n  var formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n  var escapedStringRegExp = /^'([^]*?)'?$/;\n  var doubleQuoteRegExp = /''/g;\n  var unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n  /**\n   * @private\n   */\n\n  /**\n   * @name lightFormat\n   * @category Common Helpers\n   * @summary Format the date.\n   *\n   * @description\n   * Return the formatted date string in the given format. Unlike `format`,\n   * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\n   *\n   * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\n   * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n   *\n   * The characters wrapped between two single quotes characters (') are escaped.\n   * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n   *\n   * Format of the string is based on Unicode Technical Standard #35:\n   * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n   *\n   * Accepted patterns:\n   * | Unit                            | Pattern | Result examples                   |\n   * |---------------------------------|---------|-----------------------------------|\n   * | AM, PM                          | a..aaa  | AM, PM                            |\n   * |                                 | aaaa    | a.m., p.m.                        |\n   * |                                 | aaaaa   | a, p                              |\n   * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\n   * |                                 | yy      | 44, 01, 00, 17                    |\n   * |                                 | yyy     | 044, 001, 000, 017                |\n   * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\n   * | Month (formatting)              | M       | 1, 2, ..., 12                     |\n   * |                                 | MM      | 01, 02, ..., 12                   |\n   * | Day of month                    | d       | 1, 2, ..., 31                     |\n   * |                                 | dd      | 01, 02, ..., 31                   |\n   * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\n   * |                                 | hh      | 01, 02, ..., 11, 12               |\n   * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\n   * |                                 | HH      | 00, 01, 02, ..., 23               |\n   * | Minute                          | m       | 0, 1, ..., 59                     |\n   * |                                 | mm      | 00, 01, ..., 59                   |\n   * | Second                          | s       | 0, 1, ..., 59                     |\n   * |                                 | ss      | 00, 01, ..., 59                   |\n   * | Fraction of second              | S       | 0, 1, ..., 9                      |\n   * |                                 | SS      | 00, 01, ..., 99                   |\n   * |                                 | SSS     | 000, 001, ..., 999                |\n   * |                                 | SSSS    | ...                               |\n   *\n   * @param date - The original date\n   * @param format - The string of tokens\n   *\n   * @returns The formatted date string\n   *\n   * @throws `Invalid time value` if the date is invalid\n   * @throws format string contains an unescaped latin alphabet character\n   *\n   * @example\n   * const result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\n   * //=> '2014-02-11'\n   */\n  function lightFormat(date, formatStr) {\n    var date_ = (0, _toDate.toDate)(date);\n    if (!(0, _isValid.isValid)(date_)) {\n      throw new RangeError(\"Invalid time value\");\n    }\n    var tokens = formatStr.match(formattingTokensRegExp);\n\n    // The only case when formattingTokensRegExp doesn't match the string is when it's empty\n    if (!tokens) return \"\";\n    var result = tokens.map(substring => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return \"'\";\n      }\n      var firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return cleanEscapedString(substring);\n      }\n      var formatter = _lightFormatters.lightFormatters[firstCharacter];\n      if (formatter) {\n        return formatter(date_, substring);\n      }\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\"Format string contains an unescaped latin alphabet character `\" + firstCharacter + \"`\");\n      }\n      return substring;\n    }).join(\"\");\n    return result;\n  }\n  function cleanEscapedString(input) {\n    var matches = input.match(escapedStringRegExp);\n    if (!matches) return input;\n    return matches[1].replace(doubleQuoteRegExp, \"'\");\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = lightFormat;\n});","lineCount":131,"map":[[13,2,1,0],[13,6,1,0,"_lightFormatters"],[13,22,1,0],[13,25,1,0,"require"],[13,32,1,0],[13,33,1,0,"_dependencyMap"],[13,47,1,0],[14,2,2,0],[14,6,2,0,"_isValid"],[14,14,2,0],[14,17,2,0,"require"],[14,24,2,0],[14,25,2,0,"_dependencyMap"],[14,39,2,0],[15,2,3,0],[15,6,3,0,"_toDate"],[15,13,3,0],[15,16,3,0,"require"],[15,23,3,0],[15,24,3,0,"_dependencyMap"],[15,38,3,0],[16,2,5,0],[17,2,6,0],[19,2,9,0],[20,2,10,0],[21,2,11,0],[22,2,12,0],[23,2,13,0],[24,2,14,0],[25,2,15,0],[26,2,16,0],[27,2,17,0],[28,2,18,0],[28,6,18,6,"formattingTokensRegExp"],[28,28,18,28],[28,31,18,31],[28,63,18,63],[29,2,20,0],[29,6,20,6,"escapedStringRegExp"],[29,25,20,25],[29,28,20,28],[29,42,20,42],[30,2,21,0],[30,6,21,6,"doubleQuoteRegExp"],[30,23,21,23],[30,26,21,26],[30,31,21,31],[31,2,22,0],[31,6,22,6,"unescapedLatinCharacterRegExp"],[31,35,22,35],[31,38,22,38],[31,48,22,48],[33,2,24,0],[34,0,25,0],[35,0,26,0],[37,2,28,0],[38,0,29,0],[39,0,30,0],[40,0,31,0],[41,0,32,0],[42,0,33,0],[43,0,34,0],[44,0,35,0],[45,0,36,0],[46,0,37,0],[47,0,38,0],[48,0,39,0],[49,0,40,0],[50,0,41,0],[51,0,42,0],[52,0,43,0],[53,0,44,0],[54,0,45,0],[55,0,46,0],[56,0,47,0],[57,0,48,0],[58,0,49,0],[59,0,50,0],[60,0,51,0],[61,0,52,0],[62,0,53,0],[63,0,54,0],[64,0,55,0],[65,0,56,0],[66,0,57,0],[67,0,58,0],[68,0,59,0],[69,0,60,0],[70,0,61,0],[71,0,62,0],[72,0,63,0],[73,0,64,0],[74,0,65,0],[75,0,66,0],[76,0,67,0],[77,0,68,0],[78,0,69,0],[79,0,70,0],[80,0,71,0],[81,0,72,0],[82,0,73,0],[83,0,74,0],[84,0,75,0],[85,0,76,0],[86,0,77,0],[87,0,78,0],[88,0,79,0],[89,0,80,0],[90,0,81,0],[91,0,82,0],[92,0,83,0],[93,0,84,0],[94,2,85,7],[94,11,85,16,"lightFormat"],[94,22,85,27,"lightFormat"],[94,23,85,28,"date"],[94,27,85,32],[94,29,85,34,"formatStr"],[94,38,85,43],[94,40,85,45],[95,4,86,2],[95,8,86,8,"date_"],[95,13,86,13],[95,16,86,16],[95,20,86,16,"toDate"],[95,34,86,22],[95,36,86,23,"date"],[95,40,86,27],[95,41,86,28],[96,4,88,2],[96,8,88,6],[96,9,88,7],[96,13,88,7,"isValid"],[96,29,88,14],[96,31,88,15,"date_"],[96,36,88,20],[96,37,88,21],[96,39,88,23],[97,6,89,4],[97,12,89,10],[97,16,89,14,"RangeError"],[97,26,89,24],[97,27,89,25],[97,47,89,45],[97,48,89,46],[98,4,90,2],[99,4,92,2],[99,8,92,8,"tokens"],[99,14,92,14],[99,17,92,17,"formatStr"],[99,26,92,26],[99,27,92,27,"match"],[99,32,92,32],[99,33,92,33,"formattingTokensRegExp"],[99,55,92,55],[99,56,92,56],[101,4,94,2],[102,4,95,2],[102,8,95,6],[102,9,95,7,"tokens"],[102,15,95,13],[102,17,95,15],[102,24,95,22],[102,26,95,24],[103,4,97,2],[103,8,97,8,"result"],[103,14,97,14],[103,17,97,17,"tokens"],[103,23,97,23],[103,24,98,5,"map"],[103,27,98,8],[103,28,98,10,"substring"],[103,37,98,19],[103,41,98,24],[104,6,99,6],[105,6,100,6],[105,10,100,10,"substring"],[105,19,100,19],[105,24,100,24],[105,28,100,28],[105,30,100,30],[106,8,101,8],[106,15,101,15],[106,18,101,18],[107,6,102,6],[108,6,104,6],[108,10,104,12,"firstCharacter"],[108,24,104,26],[108,27,104,29,"substring"],[108,36,104,38],[108,37,104,39],[108,38,104,40],[108,39,104,41],[109,6,105,6],[109,10,105,10,"firstCharacter"],[109,24,105,24],[109,29,105,29],[109,32,105,32],[109,34,105,34],[110,8,106,8],[110,15,106,15,"cleanEscapedString"],[110,33,106,33],[110,34,106,34,"substring"],[110,43,106,43],[110,44,106,44],[111,6,107,6],[112,6,109,6],[112,10,109,12,"formatter"],[112,19,109,21],[112,22,109,24,"lightFormatters"],[112,54,109,39],[112,55,109,40,"firstCharacter"],[112,69,109,54],[112,70,109,55],[113,6,110,6],[113,10,110,10,"formatter"],[113,19,110,19],[113,21,110,21],[114,8,111,8],[114,15,111,15,"formatter"],[114,24,111,24],[114,25,111,25,"date_"],[114,30,111,30],[114,32,111,32,"substring"],[114,41,111,41],[114,42,111,42],[115,6,112,6],[116,6,114,6],[116,10,114,10,"firstCharacter"],[116,24,114,24],[116,25,114,25,"match"],[116,30,114,30],[116,31,114,31,"unescapedLatinCharacterRegExp"],[116,60,114,60],[116,61,114,61],[116,63,114,63],[117,8,115,8],[117,14,115,14],[117,18,115,18,"RangeError"],[117,28,115,28],[117,29,116,10],[117,93,116,74],[117,96,117,12,"firstCharacter"],[117,110,117,26],[117,113,118,12],[117,116,119,8],[117,117,119,9],[118,6,120,6],[119,6,122,6],[119,13,122,13,"substring"],[119,22,122,22],[120,4,123,4],[120,5,123,5],[120,6,123,6],[120,7,124,5,"join"],[120,11,124,9],[120,12,124,10],[120,14,124,12],[120,15,124,13],[121,4,126,2],[121,11,126,9,"result"],[121,17,126,15],[122,2,127,0],[123,2,129,0],[123,11,129,9,"cleanEscapedString"],[123,29,129,27,"cleanEscapedString"],[123,30,129,28,"input"],[123,35,129,33],[123,37,129,35],[124,4,130,2],[124,8,130,8,"matches"],[124,15,130,15],[124,18,130,18,"input"],[124,23,130,23],[124,24,130,24,"match"],[124,29,130,29],[124,30,130,30,"escapedStringRegExp"],[124,49,130,49],[124,50,130,50],[125,4,131,2],[125,8,131,6],[125,9,131,7,"matches"],[125,16,131,14],[125,18,131,16],[125,25,131,23,"input"],[125,30,131,28],[126,4,132,2],[126,11,132,9,"matches"],[126,18,132,16],[126,19,132,17],[126,20,132,18],[126,21,132,19],[126,22,132,20,"replace"],[126,29,132,27],[126,30,132,28,"doubleQuoteRegExp"],[126,47,132,45],[126,49,132,47],[126,52,132,50],[126,53,132,51],[127,2,133,0],[129,2,135,0],[130,2,135,0],[130,6,135,0,"_default"],[130,14,135,0],[130,17,135,0,"exports"],[130,24,135,0],[130,25,135,0,"default"],[130,32,135,0],[130,35,136,15,"lightFormat"],[130,46,136,26],[131,0,136,26],[131,3]],"functionMap":{"names":["<global>","lightFormat","tokens.map$argument_0","cleanEscapedString"],"mappings":"AAA;OCoF;SCa;KDyB;CDI;AGE;CHI"}},"type":"js/module"}]}