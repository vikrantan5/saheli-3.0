{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.areIntervalsOverlapping = areIntervalsOverlapping;\n  exports.default = void 0;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _toDate = require(_dependencyMap[2], \"./toDate.js\");\n  /**\n   * The {@link areIntervalsOverlapping} function options.\n   */\n\n  /**\n   * @name areIntervalsOverlapping\n   * @category Interval Helpers\n   * @summary Is the given time interval overlapping with another time interval?\n   *\n   * @description\n   * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\n   *\n   * @param intervalLeft - The first interval to compare.\n   * @param intervalRight - The second interval to compare.\n   * @param options - The object with options\n   *\n   * @returns Whether the time intervals are overlapping\n   *\n   * @example\n   * // For overlapping time intervals:\n   * areIntervalsOverlapping(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n   * )\n   * //=> true\n   *\n   * @example\n   * // For non-overlapping time intervals:\n   * areIntervalsOverlapping(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n   * )\n   * //=> false\n   *\n   * @example\n   * // For adjacent time intervals:\n   * areIntervalsOverlapping(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n   * )\n   * //=> false\n   *\n   * @example\n   * // Using the inclusive option:\n   * areIntervalsOverlapping(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n   *   { inclusive: true }\n   * )\n   * //=> true\n   */\n  function areIntervalsOverlapping(intervalLeft, intervalRight, options) {\n    var _sort = [+(0, _toDate.toDate)(intervalLeft.start, options?.in), +(0, _toDate.toDate)(intervalLeft.end, options?.in)].sort((a, b) => a - b),\n      _sort2 = (0, _slicedToArray2.default)(_sort, 2),\n      leftStartTime = _sort2[0],\n      leftEndTime = _sort2[1];\n    var _sort3 = [+(0, _toDate.toDate)(intervalRight.start, options?.in), +(0, _toDate.toDate)(intervalRight.end, options?.in)].sort((a, b) => a - b),\n      _sort4 = (0, _slicedToArray2.default)(_sort3, 2),\n      rightStartTime = _sort4[0],\n      rightEndTime = _sort4[1];\n    if (options?.inclusive) return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n    return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = areIntervalsOverlapping;\n});","lineCount":76,"map":[[9,2,1,0],[9,6,1,0,"_toDate"],[9,13,1,0],[9,16,1,0,"require"],[9,23,1,0],[9,24,1,0,"_dependencyMap"],[9,38,1,0],[10,2,3,0],[11,0,4,0],[12,0,5,0],[14,2,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,0,48,0],[56,0,49,0],[57,0,50,0],[58,0,51,0],[59,0,52,0],[60,0,53,0],[61,2,54,7],[61,11,54,16,"areIntervalsOverlapping"],[61,34,54,39,"areIntervalsOverlapping"],[61,35,54,40,"intervalLeft"],[61,47,54,52],[61,49,54,54,"intervalRight"],[61,62,54,67],[61,64,54,69,"options"],[61,71,54,76],[61,73,54,78],[62,4,55,2],[62,8,55,2,"_sort"],[62,13,55,2],[62,16,55,39],[62,17,56,4],[62,18,56,5],[62,22,56,5,"toDate"],[62,36,56,11],[62,38,56,12,"intervalLeft"],[62,50,56,24],[62,51,56,25,"start"],[62,56,56,30],[62,58,56,32,"options"],[62,65,56,39],[62,67,56,41,"in"],[62,69,56,43],[62,70,56,44],[62,72,57,4],[62,73,57,5],[62,77,57,5,"toDate"],[62,91,57,11],[62,93,57,12,"intervalLeft"],[62,105,57,24],[62,106,57,25,"end"],[62,109,57,28],[62,111,57,30,"options"],[62,118,57,37],[62,120,57,39,"in"],[62,122,57,41],[62,123,57,42],[62,124,58,3],[62,125,58,4,"sort"],[62,129,58,8],[62,130,58,9],[62,131,58,10,"a"],[62,132,58,11],[62,134,58,13,"b"],[62,135,58,14],[62,140,58,19,"a"],[62,141,58,20],[62,144,58,23,"b"],[62,145,58,24],[62,146,58,25],[63,6,58,25,"_sort2"],[63,12,58,25],[63,19,58,25,"_slicedToArray2"],[63,34,58,25],[63,35,58,25,"default"],[63,42,58,25],[63,44,58,25,"_sort"],[63,49,58,25],[64,6,55,9,"leftStartTime"],[64,19,55,22],[64,22,55,22,"_sort2"],[64,28,55,22],[65,6,55,24,"leftEndTime"],[65,17,55,35],[65,20,55,35,"_sort2"],[65,26,55,35],[66,4,59,2],[66,8,59,2,"_sort3"],[66,14,59,2],[66,17,59,41],[66,18,60,4],[66,19,60,5],[66,23,60,5,"toDate"],[66,37,60,11],[66,39,60,12,"intervalRight"],[66,52,60,25],[66,53,60,26,"start"],[66,58,60,31],[66,60,60,33,"options"],[66,67,60,40],[66,69,60,42,"in"],[66,71,60,44],[66,72,60,45],[66,74,61,4],[66,75,61,5],[66,79,61,5,"toDate"],[66,93,61,11],[66,95,61,12,"intervalRight"],[66,108,61,25],[66,109,61,26,"end"],[66,112,61,29],[66,114,61,31,"options"],[66,121,61,38],[66,123,61,40,"in"],[66,125,61,42],[66,126,61,43],[66,127,62,3],[66,128,62,4,"sort"],[66,132,62,8],[66,133,62,9],[66,134,62,10,"a"],[66,135,62,11],[66,137,62,13,"b"],[66,138,62,14],[66,143,62,19,"a"],[66,144,62,20],[66,147,62,23,"b"],[66,148,62,24],[66,149,62,25],[67,6,62,25,"_sort4"],[67,12,62,25],[67,19,62,25,"_slicedToArray2"],[67,34,62,25],[67,35,62,25,"default"],[67,42,62,25],[67,44,62,25,"_sort3"],[67,50,62,25],[68,6,59,9,"rightStartTime"],[68,20,59,23],[68,23,59,23,"_sort4"],[68,29,59,23],[69,6,59,25,"rightEndTime"],[69,18,59,37],[69,21,59,37,"_sort4"],[69,27,59,37],[70,4,64,2],[70,8,64,6,"options"],[70,15,64,13],[70,17,64,15,"inclusive"],[70,26,64,24],[70,28,65,4],[70,35,65,11,"leftStartTime"],[70,48,65,24],[70,52,65,28,"rightEndTime"],[70,64,65,40],[70,68,65,44,"rightStartTime"],[70,82,65,58],[70,86,65,62,"leftEndTime"],[70,97,65,73],[71,4,67,2],[71,11,67,9,"leftStartTime"],[71,24,67,22],[71,27,67,25,"rightEndTime"],[71,39,67,37],[71,43,67,41,"rightStartTime"],[71,57,67,55],[71,60,67,58,"leftEndTime"],[71,71,67,69],[72,2,68,0],[74,2,70,0],[75,2,70,0],[75,6,70,0,"_default"],[75,14,70,0],[75,17,70,0,"exports"],[75,24,70,0],[75,25,70,0,"default"],[75,32,70,0],[75,35,71,15,"areIntervalsOverlapping"],[75,58,71,38],[76,0,71,38],[76,3]],"functionMap":{"names":["<global>","areIntervalsOverlapping","sort$argument_0"],"mappings":"AAA;OCqD;SCI,eD;SCI,eD;CDM"}},"type":"js/module"}]}