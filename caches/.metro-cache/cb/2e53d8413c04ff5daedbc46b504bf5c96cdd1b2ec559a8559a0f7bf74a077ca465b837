{"dependencies":[{"name":"./_lib/addLeadingZeros.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}}],"key":"nr19Y2AxEUlGdF0WaI8ULOMy6Cc=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":61},"end":{"line":2,"column":37,"index":98}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.formatISO = formatISO;\n  var _addLeadingZeros = require(_dependencyMap[0], \"./_lib/addLeadingZeros.js\");\n  var _toDate = require(_dependencyMap[1], \"./toDate.js\");\n  /**\n   * The {@link formatISO} function options.\n   */\n\n  /**\n   * @name formatISO\n   * @category Common Helpers\n   * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n   *\n   * @description\n   * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n   *\n   * @param date - The original date\n   * @param options - An object with options.\n   *\n   * @returns The formatted date string (in local time zone)\n   *\n   * @throws `date` must not be Invalid Date\n   *\n   * @example\n   * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n   * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n   * //=> '2019-09-18T19:00:52Z'\n   *\n   * @example\n   * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n   * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n   * //=> '20190918T190052'\n   *\n   * @example\n   * // Represent 18 September 2019 in ISO 8601 format, date only:\n   * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n   * //=> '2019-09-18'\n   *\n   * @example\n   * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n   * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n   * //=> '19:00:52Z'\n   */\n  function formatISO(date, options) {\n    var date_ = (0, _toDate.toDate)(date, options?.in);\n    if (isNaN(+date_)) {\n      throw new RangeError(\"Invalid time value\");\n    }\n    var format = options?.format ?? \"extended\";\n    var representation = options?.representation ?? \"complete\";\n    var result = \"\";\n    var tzOffset = \"\";\n    var dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n    var timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n    // Representation is either 'date' or 'complete'\n    if (representation !== \"time\") {\n      var day = (0, _addLeadingZeros.addLeadingZeros)(date_.getDate(), 2);\n      var month = (0, _addLeadingZeros.addLeadingZeros)(date_.getMonth() + 1, 2);\n      var year = (0, _addLeadingZeros.addLeadingZeros)(date_.getFullYear(), 4);\n\n      // yyyyMMdd or yyyy-MM-dd.\n      result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n    }\n\n    // Representation is either 'time' or 'complete'\n    if (representation !== \"date\") {\n      // Add the timezone.\n      var offset = date_.getTimezoneOffset();\n      if (offset !== 0) {\n        var absoluteOffset = Math.abs(offset);\n        var hourOffset = (0, _addLeadingZeros.addLeadingZeros)(Math.trunc(absoluteOffset / 60), 2);\n        var minuteOffset = (0, _addLeadingZeros.addLeadingZeros)(absoluteOffset % 60, 2);\n        // If less than 0, the sign is +, because it is ahead of time.\n        var sign = offset < 0 ? \"+\" : \"-\";\n        tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n      } else {\n        tzOffset = \"Z\";\n      }\n      var hour = (0, _addLeadingZeros.addLeadingZeros)(date_.getHours(), 2);\n      var minute = (0, _addLeadingZeros.addLeadingZeros)(date_.getMinutes(), 2);\n      var second = (0, _addLeadingZeros.addLeadingZeros)(date_.getSeconds(), 2);\n\n      // If there's also date, separate it with time with 'T'\n      var separator = result === \"\" ? \"\" : \"T\";\n\n      // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n      var time = [hour, minute, second].join(timeDelimiter);\n\n      // HHmmss or HH:mm:ss.\n      result = `${result}${separator}${time}${tzOffset}`;\n    }\n    return result;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = formatISO;\n});","lineCount":102,"map":[[7,2,1,0],[7,6,1,0,"_addLeadingZeros"],[7,22,1,0],[7,25,1,0,"require"],[7,32,1,0],[7,33,1,0,"_dependencyMap"],[7,47,1,0],[8,2,2,0],[8,6,2,0,"_toDate"],[8,13,2,0],[8,16,2,0,"require"],[8,23,2,0],[8,24,2,0,"_dependencyMap"],[8,38,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,2,43,7],[48,11,43,16,"formatISO"],[48,20,43,25,"formatISO"],[48,21,43,26,"date"],[48,25,43,30],[48,27,43,32,"options"],[48,34,43,39],[48,36,43,41],[49,4,44,2],[49,8,44,8,"date_"],[49,13,44,13],[49,16,44,16],[49,20,44,16,"toDate"],[49,34,44,22],[49,36,44,23,"date"],[49,40,44,27],[49,42,44,29,"options"],[49,49,44,36],[49,51,44,38,"in"],[49,53,44,40],[49,54,44,41],[50,4,46,2],[50,8,46,6,"isNaN"],[50,13,46,11],[50,14,46,12],[50,15,46,13,"date_"],[50,20,46,18],[50,21,46,19],[50,23,46,21],[51,6,47,4],[51,12,47,10],[51,16,47,14,"RangeError"],[51,26,47,24],[51,27,47,25],[51,47,47,45],[51,48,47,46],[52,4,48,2],[53,4,50,2],[53,8,50,8,"format"],[53,14,50,14],[53,17,50,17,"options"],[53,24,50,24],[53,26,50,26,"format"],[53,32,50,32],[53,36,50,36],[53,46,50,46],[54,4,51,2],[54,8,51,8,"representation"],[54,22,51,22],[54,25,51,25,"options"],[54,32,51,32],[54,34,51,34,"representation"],[54,48,51,48],[54,52,51,52],[54,62,51,62],[55,4,53,2],[55,8,53,6,"result"],[55,14,53,12],[55,17,53,15],[55,19,53,17],[56,4,54,2],[56,8,54,6,"tzOffset"],[56,16,54,14],[56,19,54,17],[56,21,54,19],[57,4,56,2],[57,8,56,8,"dateDelimiter"],[57,21,56,21],[57,24,56,24,"format"],[57,30,56,30],[57,35,56,35],[57,45,56,45],[57,48,56,48],[57,51,56,51],[57,54,56,54],[57,56,56,56],[58,4,57,2],[58,8,57,8,"timeDelimiter"],[58,21,57,21],[58,24,57,24,"format"],[58,30,57,30],[58,35,57,35],[58,45,57,45],[58,48,57,48],[58,51,57,51],[58,54,57,54],[58,56,57,56],[60,4,59,2],[61,4,60,2],[61,8,60,6,"representation"],[61,22,60,20],[61,27,60,25],[61,33,60,31],[61,35,60,33],[62,6,61,4],[62,10,61,10,"day"],[62,13,61,13],[62,16,61,16],[62,20,61,16,"addLeadingZeros"],[62,52,61,31],[62,54,61,32,"date_"],[62,59,61,37],[62,60,61,38,"getDate"],[62,67,61,45],[62,68,61,46],[62,69,61,47],[62,71,61,49],[62,72,61,50],[62,73,61,51],[63,6,62,4],[63,10,62,10,"month"],[63,15,62,15],[63,18,62,18],[63,22,62,18,"addLeadingZeros"],[63,54,62,33],[63,56,62,34,"date_"],[63,61,62,39],[63,62,62,40,"getMonth"],[63,70,62,48],[63,71,62,49],[63,72,62,50],[63,75,62,53],[63,76,62,54],[63,78,62,56],[63,79,62,57],[63,80,62,58],[64,6,63,4],[64,10,63,10,"year"],[64,14,63,14],[64,17,63,17],[64,21,63,17,"addLeadingZeros"],[64,53,63,32],[64,55,63,33,"date_"],[64,60,63,38],[64,61,63,39,"getFullYear"],[64,72,63,50],[64,73,63,51],[64,74,63,52],[64,76,63,54],[64,77,63,55],[64,78,63,56],[66,6,65,4],[67,6,66,4,"result"],[67,12,66,10],[67,15,66,13],[67,18,66,16,"year"],[67,22,66,20],[67,25,66,23,"dateDelimiter"],[67,38,66,36],[67,41,66,39,"month"],[67,46,66,44],[67,49,66,47,"dateDelimiter"],[67,62,66,60],[67,65,66,63,"day"],[67,68,66,66],[67,70,66,68],[68,4,67,2],[70,4,69,2],[71,4,70,2],[71,8,70,6,"representation"],[71,22,70,20],[71,27,70,25],[71,33,70,31],[71,35,70,33],[72,6,71,4],[73,6,72,4],[73,10,72,10,"offset"],[73,16,72,16],[73,19,72,19,"date_"],[73,24,72,24],[73,25,72,25,"getTimezoneOffset"],[73,42,72,42],[73,43,72,43],[73,44,72,44],[74,6,74,4],[74,10,74,8,"offset"],[74,16,74,14],[74,21,74,19],[74,22,74,20],[74,24,74,22],[75,8,75,6],[75,12,75,12,"absoluteOffset"],[75,26,75,26],[75,29,75,29,"Math"],[75,33,75,33],[75,34,75,34,"abs"],[75,37,75,37],[75,38,75,38,"offset"],[75,44,75,44],[75,45,75,45],[76,8,76,6],[76,12,76,12,"hourOffset"],[76,22,76,22],[76,25,76,25],[76,29,76,25,"addLeadingZeros"],[76,61,76,40],[76,63,76,41,"Math"],[76,67,76,45],[76,68,76,46,"trunc"],[76,73,76,51],[76,74,76,52,"absoluteOffset"],[76,88,76,66],[76,91,76,69],[76,93,76,71],[76,94,76,72],[76,96,76,74],[76,97,76,75],[76,98,76,76],[77,8,77,6],[77,12,77,12,"minuteOffset"],[77,24,77,24],[77,27,77,27],[77,31,77,27,"addLeadingZeros"],[77,63,77,42],[77,65,77,43,"absoluteOffset"],[77,79,77,57],[77,82,77,60],[77,84,77,62],[77,86,77,64],[77,87,77,65],[77,88,77,66],[78,8,78,6],[79,8,79,6],[79,12,79,12,"sign"],[79,16,79,16],[79,19,79,19,"offset"],[79,25,79,25],[79,28,79,28],[79,29,79,29],[79,32,79,32],[79,35,79,35],[79,38,79,38],[79,41,79,41],[80,8,81,6,"tzOffset"],[80,16,81,14],[80,19,81,17],[80,22,81,20,"sign"],[80,26,81,24],[80,29,81,27,"hourOffset"],[80,39,81,37],[80,43,81,41,"minuteOffset"],[80,55,81,53],[80,57,81,55],[81,6,82,4],[81,7,82,5],[81,13,82,11],[82,8,83,6,"tzOffset"],[82,16,83,14],[82,19,83,17],[82,22,83,20],[83,6,84,4],[84,6,86,4],[84,10,86,10,"hour"],[84,14,86,14],[84,17,86,17],[84,21,86,17,"addLeadingZeros"],[84,53,86,32],[84,55,86,33,"date_"],[84,60,86,38],[84,61,86,39,"getHours"],[84,69,86,47],[84,70,86,48],[84,71,86,49],[84,73,86,51],[84,74,86,52],[84,75,86,53],[85,6,87,4],[85,10,87,10,"minute"],[85,16,87,16],[85,19,87,19],[85,23,87,19,"addLeadingZeros"],[85,55,87,34],[85,57,87,35,"date_"],[85,62,87,40],[85,63,87,41,"getMinutes"],[85,73,87,51],[85,74,87,52],[85,75,87,53],[85,77,87,55],[85,78,87,56],[85,79,87,57],[86,6,88,4],[86,10,88,10,"second"],[86,16,88,16],[86,19,88,19],[86,23,88,19,"addLeadingZeros"],[86,55,88,34],[86,57,88,35,"date_"],[86,62,88,40],[86,63,88,41,"getSeconds"],[86,73,88,51],[86,74,88,52],[86,75,88,53],[86,77,88,55],[86,78,88,56],[86,79,88,57],[88,6,90,4],[89,6,91,4],[89,10,91,10,"separator"],[89,19,91,19],[89,22,91,22,"result"],[89,28,91,28],[89,33,91,33],[89,35,91,35],[89,38,91,38],[89,40,91,40],[89,43,91,43],[89,46,91,46],[91,6,93,4],[92,6,94,4],[92,10,94,10,"time"],[92,14,94,14],[92,17,94,17],[92,18,94,18,"hour"],[92,22,94,22],[92,24,94,24,"minute"],[92,30,94,30],[92,32,94,32,"second"],[92,38,94,38],[92,39,94,39],[92,40,94,40,"join"],[92,44,94,44],[92,45,94,45,"timeDelimiter"],[92,58,94,58],[92,59,94,59],[94,6,96,4],[95,6,97,4,"result"],[95,12,97,10],[95,15,97,13],[95,18,97,16,"result"],[95,24,97,22],[95,27,97,25,"separator"],[95,36,97,34],[95,39,97,37,"time"],[95,43,97,41],[95,46,97,44,"tzOffset"],[95,54,97,52],[95,56,97,54],[96,4,98,2],[97,4,100,2],[97,11,100,9,"result"],[97,17,100,15],[98,2,101,0],[100,2,103,0],[101,2,103,0],[101,6,103,0,"_default"],[101,14,103,0],[101,17,103,0,"exports"],[101,24,103,0],[101,25,103,0,"default"],[101,32,103,0],[101,35,104,15,"formatISO"],[101,44,104,24],[102,0,104,24],[102,3]],"functionMap":{"names":["<global>","formatISO"],"mappings":"AAA;OC0C;CD0D"}},"type":"js/module"}]}