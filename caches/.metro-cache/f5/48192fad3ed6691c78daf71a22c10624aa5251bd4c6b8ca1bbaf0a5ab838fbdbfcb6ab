{"dependencies":[{"name":"./core","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":37,"index":116},"end":{"line":4,"column":54,"index":133}}],"key":"FXN3sf/EjRB4E2rwdgFcvRpWg7U=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  ;\n  (function (root, factory) {\n    if (typeof exports === \"object\") {\n      // CommonJS\n      module.exports = exports = factory(require(_dependencyMap[0], \"./core\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      // AMD\n      define([\"./core\"], factory);\n    } else {\n      // Global (browser)\n      factory(root.CryptoJS);\n    }\n  })(this, function (CryptoJS) {\n    (function () {\n      // Shortcuts\n      var C = CryptoJS;\n      var C_lib = C.lib;\n      var WordArray = C_lib.WordArray;\n      var C_enc = C.enc;\n\n      /**\n       * Base64url encoding strategy.\n       */\n      var Base64url = C_enc.Base64url = {\n        /**\n         * Converts a word array to a Base64url string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @param {boolean} urlSafe Whether to use url safe\n         *\n         * @return {string} The Base64url string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);\n         */\n        stringify: function (wordArray, urlSafe) {\n          if (urlSafe === undefined) {\n            urlSafe = true;\n          }\n          // Shortcuts\n          var words = wordArray.words;\n          var sigBytes = wordArray.sigBytes;\n          var map = urlSafe ? this._safe_map : this._map;\n\n          // Clamp excess bits\n          wordArray.clamp();\n\n          // Convert\n          var base64Chars = [];\n          for (var i = 0; i < sigBytes; i += 3) {\n            var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n            var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n            var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n            var triplet = byte1 << 16 | byte2 << 8 | byte3;\n            for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n              base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n            }\n          }\n\n          // Add padding\n          var paddingChar = map.charAt(64);\n          if (paddingChar) {\n            while (base64Chars.length % 4) {\n              base64Chars.push(paddingChar);\n            }\n          }\n          return base64Chars.join('');\n        },\n        /**\n         * Converts a Base64url string to a word array.\n         *\n         * @param {string} base64Str The Base64url string.\n         *\n         * @param {boolean} urlSafe Whether to use url safe\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);\n         */\n        parse: function (base64Str, urlSafe) {\n          if (urlSafe === undefined) {\n            urlSafe = true;\n          }\n\n          // Shortcuts\n          var base64StrLength = base64Str.length;\n          var map = urlSafe ? this._safe_map : this._map;\n          var reverseMap = this._reverseMap;\n          if (!reverseMap) {\n            reverseMap = this._reverseMap = [];\n            for (var j = 0; j < map.length; j++) {\n              reverseMap[map.charCodeAt(j)] = j;\n            }\n          }\n\n          // Ignore padding\n          var paddingChar = map.charAt(64);\n          if (paddingChar) {\n            var paddingIndex = base64Str.indexOf(paddingChar);\n            if (paddingIndex !== -1) {\n              base64StrLength = paddingIndex;\n            }\n          }\n\n          // Convert\n          return parseLoop(base64Str, base64StrLength, reverseMap);\n        },\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n      };\n      function parseLoop(base64Str, base64StrLength, reverseMap) {\n        var words = [];\n        var nBytes = 0;\n        for (var i = 0; i < base64StrLength; i++) {\n          if (i % 4) {\n            var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n            var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n            var bitsCombined = bits1 | bits2;\n            words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n            nBytes++;\n          }\n        }\n        return WordArray.create(words, nBytes);\n      }\n    })();\n    return CryptoJS.enc.Base64url;\n  });\n});","lineCount":137,"map":[[2,2,1,0],[3,2,1,2],[3,13,1,12,"root"],[3,17,1,16],[3,19,1,18,"factory"],[3,26,1,25],[3,28,1,27],[4,4,2,1],[4,8,2,5],[4,15,2,12,"exports"],[4,22,2,19],[4,27,2,24],[4,35,2,32],[4,37,2,34],[5,6,3,2],[6,6,4,2,"module"],[6,12,4,8],[6,13,4,9,"exports"],[6,20,4,16],[6,23,4,19,"exports"],[6,30,4,26],[6,33,4,29,"factory"],[6,40,4,36],[6,41,4,37,"require"],[6,48,4,44],[6,49,4,44,"_dependencyMap"],[6,63,4,44],[6,76,4,53],[6,77,4,54],[6,78,4,55],[7,4,5,1],[7,5,5,2],[7,11,6,6],[7,15,6,10],[7,22,6,17,"define"],[7,28,6,23],[7,33,6,28],[7,43,6,38],[7,47,6,42,"define"],[7,53,6,48],[7,54,6,49,"amd"],[7,57,6,52],[7,59,6,54],[8,6,7,2],[9,6,8,2,"define"],[9,12,8,8],[9,13,8,9],[9,14,8,10],[9,22,8,18],[9,23,8,19],[9,25,8,21,"factory"],[9,32,8,28],[9,33,8,29],[10,4,9,1],[10,5,9,2],[10,11,10,6],[11,6,11,2],[12,6,12,2,"factory"],[12,13,12,9],[12,14,12,10,"root"],[12,18,12,14],[12,19,12,15,"CryptoJS"],[12,27,12,23],[12,28,12,24],[13,4,13,1],[14,2,14,0],[14,3,14,1],[14,5,14,2],[14,9,14,6],[14,11,14,8],[14,21,14,18,"CryptoJS"],[14,29,14,26],[14,31,14,28],[15,4,16,2],[15,17,16,14],[16,6,17,5],[17,6,18,5],[17,10,18,9,"C"],[17,11,18,10],[17,14,18,13,"CryptoJS"],[17,22,18,21],[18,6,19,5],[18,10,19,9,"C_lib"],[18,15,19,14],[18,18,19,17,"C"],[18,19,19,18],[18,20,19,19,"lib"],[18,23,19,22],[19,6,20,5],[19,10,20,9,"WordArray"],[19,19,20,18],[19,22,20,21,"C_lib"],[19,27,20,26],[19,28,20,27,"WordArray"],[19,37,20,36],[20,6,21,5],[20,10,21,9,"C_enc"],[20,15,21,14],[20,18,21,17,"C"],[20,19,21,18],[20,20,21,19,"enc"],[20,23,21,22],[22,6,23,5],[23,0,24,0],[24,0,25,0],[25,6,26,5],[25,10,26,9,"Base64url"],[25,19,26,18],[25,22,26,21,"C_enc"],[25,27,26,26],[25,28,26,27,"Base64url"],[25,37,26,36],[25,40,26,39],[26,8,27,9],[27,0,28,0],[28,0,29,0],[29,0,30,0],[30,0,31,0],[31,0,32,0],[32,0,33,0],[33,0,34,0],[34,0,35,0],[35,0,36,0],[36,0,37,0],[37,0,38,0],[38,0,39,0],[39,0,40,0],[40,0,41,0],[41,8,42,9,"stringify"],[41,17,42,18],[41,19,42,20],[41,28,42,20,"stringify"],[41,29,42,30,"wordArray"],[41,38,42,39],[41,40,42,41,"urlSafe"],[41,47,42,48],[41,49,42,50],[42,10,43,13],[42,14,43,17,"urlSafe"],[42,21,43,24],[42,26,43,29,"undefined"],[42,35,43,38],[42,37,43,40],[43,12,44,17,"urlSafe"],[43,19,44,24],[43,22,44,27],[43,26,44,31],[44,10,45,13],[45,10,46,13],[46,10,47,13],[46,14,47,17,"words"],[46,19,47,22],[46,22,47,25,"wordArray"],[46,31,47,34],[46,32,47,35,"words"],[46,37,47,40],[47,10,48,13],[47,14,48,17,"sigBytes"],[47,22,48,25],[47,25,48,28,"wordArray"],[47,34,48,37],[47,35,48,38,"sigBytes"],[47,43,48,46],[48,10,49,13],[48,14,49,17,"map"],[48,17,49,20],[48,20,49,23,"urlSafe"],[48,27,49,30],[48,30,49,33],[48,34,49,37],[48,35,49,38,"_safe_map"],[48,44,49,47],[48,47,49,50],[48,51,49,54],[48,52,49,55,"_map"],[48,56,49,59],[50,10,51,13],[51,10,52,13,"wordArray"],[51,19,52,22],[51,20,52,23,"clamp"],[51,25,52,28],[51,26,52,29],[51,27,52,30],[53,10,54,13],[54,10,55,13],[54,14,55,17,"base64Chars"],[54,25,55,28],[54,28,55,31],[54,30,55,33],[55,10,56,13],[55,15,56,18],[55,19,56,22,"i"],[55,20,56,23],[55,23,56,26],[55,24,56,27],[55,26,56,29,"i"],[55,27,56,30],[55,30,56,33,"sigBytes"],[55,38,56,41],[55,40,56,43,"i"],[55,41,56,44],[55,45,56,48],[55,46,56,49],[55,48,56,51],[56,12,57,17],[56,16,57,21,"byte1"],[56,21,57,26],[56,24,57,30,"words"],[56,29,57,35],[56,30,57,36,"i"],[56,31,57,37],[56,36,57,42],[56,37,57,43],[56,38,57,44],[56,43,57,56],[56,45,57,58],[56,48,57,62,"i"],[56,49,57,63],[56,52,57,66],[56,53,57,67],[56,56,57,71],[56,57,57,73],[56,60,57,83],[56,64,57,87],[57,12,58,17],[57,16,58,21,"byte2"],[57,21,58,26],[57,24,58,30,"words"],[57,29,58,35],[57,30,58,37,"i"],[57,31,58,38],[57,34,58,41],[57,35,58,42],[57,40,58,48],[57,41,58,49],[57,42,58,50],[57,47,58,56],[57,49,58,58],[57,52,58,62],[57,53,58,63,"i"],[57,54,58,64],[57,57,58,67],[57,58,58,68],[57,62,58,72],[57,63,58,73],[57,66,58,77],[57,67,58,79],[57,70,58,83],[57,74,58,87],[58,12,59,17],[58,16,59,21,"byte3"],[58,21,59,26],[58,24,59,30,"words"],[58,29,59,35],[58,30,59,37,"i"],[58,31,59,38],[58,34,59,41],[58,35,59,42],[58,40,59,48],[58,41,59,49],[58,42,59,50],[58,47,59,56],[58,49,59,58],[58,52,59,62],[58,53,59,63,"i"],[58,54,59,64],[58,57,59,67],[58,58,59,68],[58,62,59,72],[58,63,59,73],[58,66,59,77],[58,67,59,79],[58,70,59,83],[58,74,59,87],[59,12,61,17],[59,16,61,21,"triplet"],[59,23,61,28],[59,26,61,32,"byte1"],[59,31,61,37],[59,35,61,41],[59,37,61,43],[59,40,61,48,"byte2"],[59,45,61,53],[59,49,61,57],[59,50,61,59],[59,53,61,62,"byte3"],[59,58,61,67],[60,12,63,17],[60,17,63,22],[60,21,63,26,"j"],[60,22,63,27],[60,25,63,30],[60,26,63,31],[60,28,63,34,"j"],[60,29,63,35],[60,32,63,38],[60,33,63,39],[60,37,63,45,"i"],[60,38,63,46],[60,41,63,49,"j"],[60,42,63,50],[60,45,63,53],[60,49,63,57],[60,52,63,60,"sigBytes"],[60,60,63,69],[60,62,63,71,"j"],[60,63,63,72],[60,65,63,74],[60,67,63,76],[61,14,64,21,"base64Chars"],[61,25,64,32],[61,26,64,33,"push"],[61,30,64,37],[61,31,64,38,"map"],[61,34,64,41],[61,35,64,42,"charAt"],[61,41,64,48],[61,42,64,50,"triplet"],[61,49,64,57],[61,54,64,63],[61,55,64,64],[61,59,64,68],[61,60,64,69],[61,63,64,72,"j"],[61,64,64,73],[61,65,64,75],[61,68,64,79],[61,72,64,83],[61,73,64,84],[61,74,64,85],[62,12,65,17],[63,10,66,13],[65,10,68,13],[66,10,69,13],[66,14,69,17,"paddingChar"],[66,25,69,28],[66,28,69,31,"map"],[66,31,69,34],[66,32,69,35,"charAt"],[66,38,69,41],[66,39,69,42],[66,41,69,44],[66,42,69,45],[67,10,70,13],[67,14,70,17,"paddingChar"],[67,25,70,28],[67,27,70,30],[68,12,71,17],[68,19,71,24,"base64Chars"],[68,30,71,35],[68,31,71,36,"length"],[68,37,71,42],[68,40,71,45],[68,41,71,46],[68,43,71,48],[69,14,72,21,"base64Chars"],[69,25,72,32],[69,26,72,33,"push"],[69,30,72,37],[69,31,72,38,"paddingChar"],[69,42,72,49],[69,43,72,50],[70,12,73,17],[71,10,74,13],[72,10,76,13],[72,17,76,20,"base64Chars"],[72,28,76,31],[72,29,76,32,"join"],[72,33,76,36],[72,34,76,37],[72,36,76,39],[72,37,76,40],[73,8,77,9],[73,9,77,10],[74,8,79,9],[75,0,80,0],[76,0,81,0],[77,0,82,0],[78,0,83,0],[79,0,84,0],[80,0,85,0],[81,0,86,0],[82,0,87,0],[83,0,88,0],[84,0,89,0],[85,0,90,0],[86,0,91,0],[87,0,92,0],[88,0,93,0],[89,8,94,9,"parse"],[89,13,94,14],[89,15,94,16],[89,24,94,16,"parse"],[89,25,94,26,"base64Str"],[89,34,94,35],[89,36,94,37,"urlSafe"],[89,43,94,44],[89,45,94,46],[90,10,95,13],[90,14,95,17,"urlSafe"],[90,21,95,24],[90,26,95,29,"undefined"],[90,35,95,38],[90,37,95,40],[91,12,96,17,"urlSafe"],[91,19,96,24],[91,22,96,27],[91,26,96,31],[92,10,97,13],[94,10,99,13],[95,10,100,13],[95,14,100,17,"base64StrLength"],[95,29,100,32],[95,32,100,35,"base64Str"],[95,41,100,44],[95,42,100,45,"length"],[95,48,100,51],[96,10,101,13],[96,14,101,17,"map"],[96,17,101,20],[96,20,101,23,"urlSafe"],[96,27,101,30],[96,30,101,33],[96,34,101,37],[96,35,101,38,"_safe_map"],[96,44,101,47],[96,47,101,50],[96,51,101,54],[96,52,101,55,"_map"],[96,56,101,59],[97,10,102,13],[97,14,102,17,"reverseMap"],[97,24,102,27],[97,27,102,30],[97,31,102,34],[97,32,102,35,"_reverseMap"],[97,43,102,46],[98,10,104,13],[98,14,104,17],[98,15,104,18,"reverseMap"],[98,25,104,28],[98,27,104,30],[99,12,105,17,"reverseMap"],[99,22,105,27],[99,25,105,30],[99,29,105,34],[99,30,105,35,"_reverseMap"],[99,41,105,46],[99,44,105,49],[99,46,105,51],[100,12,106,17],[100,17,106,22],[100,21,106,26,"j"],[100,22,106,27],[100,25,106,30],[100,26,106,31],[100,28,106,33,"j"],[100,29,106,34],[100,32,106,37,"map"],[100,35,106,40],[100,36,106,41,"length"],[100,42,106,47],[100,44,106,49,"j"],[100,45,106,50],[100,47,106,52],[100,49,106,54],[101,14,107,21,"reverseMap"],[101,24,107,31],[101,25,107,32,"map"],[101,28,107,35],[101,29,107,36,"charCodeAt"],[101,39,107,46],[101,40,107,47,"j"],[101,41,107,48],[101,42,107,49],[101,43,107,50],[101,46,107,53,"j"],[101,47,107,54],[102,12,108,17],[103,10,109,13],[105,10,111,13],[106,10,112,13],[106,14,112,17,"paddingChar"],[106,25,112,28],[106,28,112,31,"map"],[106,31,112,34],[106,32,112,35,"charAt"],[106,38,112,41],[106,39,112,42],[106,41,112,44],[106,42,112,45],[107,10,113,13],[107,14,113,17,"paddingChar"],[107,25,113,28],[107,27,113,30],[108,12,114,17],[108,16,114,21,"paddingIndex"],[108,28,114,33],[108,31,114,36,"base64Str"],[108,40,114,45],[108,41,114,46,"indexOf"],[108,48,114,53],[108,49,114,54,"paddingChar"],[108,60,114,65],[108,61,114,66],[109,12,115,17],[109,16,115,21,"paddingIndex"],[109,28,115,33],[109,33,115,38],[109,34,115,39],[109,35,115,40],[109,37,115,42],[110,14,116,21,"base64StrLength"],[110,29,116,36],[110,32,116,39,"paddingIndex"],[110,44,116,51],[111,12,117,17],[112,10,118,13],[114,10,120,13],[115,10,121,13],[115,17,121,20,"parseLoop"],[115,26,121,29],[115,27,121,30,"base64Str"],[115,36,121,39],[115,38,121,41,"base64StrLength"],[115,53,121,56],[115,55,121,58,"reverseMap"],[115,65,121,68],[115,66,121,69],[116,8,123,9],[116,9,123,10],[117,8,125,9,"_map"],[117,12,125,13],[117,14,125,15],[117,81,125,82],[118,8,126,9,"_safe_map"],[118,17,126,18],[118,19,126,20],[119,6,127,5],[119,7,127,6],[120,6,129,5],[120,15,129,14,"parseLoop"],[120,24,129,23,"parseLoop"],[120,25,129,24,"base64Str"],[120,34,129,33],[120,36,129,35,"base64StrLength"],[120,51,129,50],[120,53,129,52,"reverseMap"],[120,63,129,62],[120,65,129,64],[121,8,130,9],[121,12,130,13,"words"],[121,17,130,18],[121,20,130,21],[121,22,130,23],[122,8,131,9],[122,12,131,13,"nBytes"],[122,18,131,19],[122,21,131,22],[122,22,131,23],[123,8,132,9],[123,13,132,14],[123,17,132,18,"i"],[123,18,132,19],[123,21,132,22],[123,22,132,23],[123,24,132,25,"i"],[123,25,132,26],[123,28,132,29,"base64StrLength"],[123,43,132,44],[123,45,132,46,"i"],[123,46,132,47],[123,48,132,49],[123,50,132,51],[124,10,133,13],[124,14,133,17,"i"],[124,15,133,18],[124,18,133,21],[124,19,133,22],[124,21,133,24],[125,12,134,17],[125,16,134,21,"bits1"],[125,21,134,26],[125,24,134,29,"reverseMap"],[125,34,134,39],[125,35,134,40,"base64Str"],[125,44,134,49],[125,45,134,50,"charCodeAt"],[125,55,134,60],[125,56,134,61,"i"],[125,57,134,62],[125,60,134,65],[125,61,134,66],[125,62,134,67],[125,63,134,68],[125,67,134,74,"i"],[125,68,134,75],[125,71,134,78],[125,72,134,79],[125,75,134,83],[125,76,134,85],[126,12,135,17],[126,16,135,21,"bits2"],[126,21,135,26],[126,24,135,29,"reverseMap"],[126,34,135,39],[126,35,135,40,"base64Str"],[126,44,135,49],[126,45,135,50,"charCodeAt"],[126,55,135,60],[126,56,135,61,"i"],[126,57,135,62],[126,58,135,63],[126,59,135,64],[126,64,135,70],[126,65,135,71],[126,68,135,75,"i"],[126,69,135,76],[126,72,135,79],[126,73,135,80],[126,76,135,84],[126,77,135,86],[127,12,136,17],[127,16,136,21,"bitsCombined"],[127,28,136,33],[127,31,136,36,"bits1"],[127,36,136,41],[127,39,136,44,"bits2"],[127,44,136,49],[128,12,137,17,"words"],[128,17,137,22],[128,18,137,23,"nBytes"],[128,24,137,29],[128,29,137,34],[128,30,137,35],[128,31,137,36],[128,35,137,40,"bitsCombined"],[128,47,137,52],[128,51,137,57],[128,53,137,59],[128,56,137,63,"nBytes"],[128,62,137,69],[128,65,137,72],[128,66,137,73],[128,69,137,77],[128,70,137,79],[129,12,138,17,"nBytes"],[129,18,138,23],[129,20,138,25],[130,10,139,13],[131,8,140,9],[132,8,141,9],[132,15,141,16,"WordArray"],[132,24,141,25],[132,25,141,26,"create"],[132,31,141,32],[132,32,141,33,"words"],[132,37,141,38],[132,39,141,40,"nBytes"],[132,45,141,46],[132,46,141,47],[133,6,142,5],[134,4,143,1],[134,5,143,2],[134,7,143,3],[134,8,143,4],[135,4,146,1],[135,11,146,8,"CryptoJS"],[135,19,146,16],[135,20,146,17,"enc"],[135,23,146,20],[135,24,146,21,"Base64url"],[135,33,146,30],[136,2,148,0],[136,3,148,1],[136,4,148,2],[137,0,148,4],[137,3]],"functionMap":{"names":["<global>","<anonymous>","C_enc.Base64url.stringify","C_enc.Base64url.parse","parseLoop"],"mappings":"AAA,EC;CDa,OC;oBC4B;UDmC;gBEiB;UF6B;KGM;MHa;CDM"}},"type":"js/module"}]}