{"dependencies":[{"name":"./_lib/defaultLocale.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"pt9gPO2ve6GSRFbXPAQkm4R9a2w=","exportNames":["*"]}},{"name":"./_lib/defaultOptions.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":61,"index":118}}],"key":"RLyj7w3ZPZGGUSjkcz/7nwwn2xo=","exportNames":["*"]}},{"name":"./_lib/format/formatters.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":119},"end":{"line":3,"column":57,"index":176}}],"key":"TiYeZxxIqfGXhii8TNHsDjdVgSk=","exportNames":["*"]}},{"name":"./_lib/format/longFormatters.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":177},"end":{"line":4,"column":65,"index":242}}],"key":"ghTgInBXDR+yG5yk4A6IO0LL1Eg=","exportNames":["*"]}},{"name":"./_lib/protectedTokens.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":243},"end":{"line":9,"column":35,"index":373}}],"key":"g5HrjPuBYD2nx+mX4aSusGNYBeA=","exportNames":["*"]}},{"name":"./isValid.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":374},"end":{"line":10,"column":39,"index":413}}],"key":"Sst1buy9uBfV7bjRtTAEggSwFYs=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":414},"end":{"line":11,"column":37,"index":451}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.format = exports.formatDate = format;\n  Object.defineProperty(exports, \"formatters\", {\n    enumerable: true,\n    get: function () {\n      return _formatters.formatters;\n    }\n  });\n  Object.defineProperty(exports, \"longFormatters\", {\n    enumerable: true,\n    get: function () {\n      return _longFormatters.longFormatters;\n    }\n  });\n  var _defaultLocale = require(_dependencyMap[0], \"./_lib/defaultLocale.js\");\n  var _defaultOptions = require(_dependencyMap[1], \"./_lib/defaultOptions.js\");\n  var _formatters = require(_dependencyMap[2], \"./_lib/format/formatters.js\");\n  var _longFormatters = require(_dependencyMap[3], \"./_lib/format/longFormatters.js\");\n  var _protectedTokens = require(_dependencyMap[4], \"./_lib/protectedTokens.js\");\n  var _isValid = require(_dependencyMap[5], \"./isValid.js\");\n  var _toDate = require(_dependencyMap[6], \"./toDate.js\");\n  // Rexports of internal for libraries to use.\n  // See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n  // This RegExp consists of three parts separated by `|`:\n  // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n  //   (one of the certain letters followed by `o`)\n  // - (\\w)\\1* matches any sequences of the same letter\n  // - '' matches two quote characters in a row\n  // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n  //   except a single quote symbol, which ends the sequence.\n  //   Two quote characters do not end the sequence.\n  //   If there is no matching single quote\n  //   then the sequence will continue until the end of the string.\n  // - . matches any single character unmatched by previous parts of the RegExps\n  var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n  // This RegExp catches symbols escaped by quotes, and also\n  // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n  var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n  var escapedStringRegExp = /^'([^]*?)'?$/;\n  var doubleQuoteRegExp = /''/g;\n  var unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n  /**\n   * The {@link format} function options.\n   */\n\n  /**\n   * @name format\n   * @alias formatDate\n   * @category Common Helpers\n   * @summary Format the date.\n   *\n   * @description\n   * Return the formatted date string in the given format. The result may vary by locale.\n   *\n   * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n   * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n   *\n   * The characters wrapped between two single quotes characters (') are escaped.\n   * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n   * (see the last example)\n   *\n   * Format of the string is based on Unicode Technical Standard #35:\n   * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n   * with a few additions (see note 7 below the table).\n   *\n   * Accepted patterns:\n   * | Unit                            | Pattern | Result examples                   | Notes |\n   * |---------------------------------|---------|-----------------------------------|-------|\n   * | Era                             | G..GGG  | AD, BC                            |       |\n   * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n   * |                                 | GGGGG   | A, B                              |       |\n   * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n   * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n   * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n   * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n   * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n   * |                                 | yyyyy   | ...                               | 3,5   |\n   * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n   * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n   * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n   * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n   * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n   * |                                 | YYYYY   | ...                               | 3,5   |\n   * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n   * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n   * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n   * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n   * |                                 | RRRRR   | ...                               | 3,5,7 |\n   * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n   * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n   * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n   * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n   * |                                 | uuuuu   | ...                               | 3,5   |\n   * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n   * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n   * |                                 | QQ      | 01, 02, 03, 04                    |       |\n   * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n   * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n   * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n   * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n   * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n   * |                                 | qq      | 01, 02, 03, 04                    |       |\n   * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n   * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n   * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n   * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n   * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n   * |                                 | MM      | 01, 02, ..., 12                   |       |\n   * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n   * |                                 | MMMM    | January, February, ..., December  | 2     |\n   * |                                 | MMMMM   | J, F, ..., D                      |       |\n   * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n   * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n   * |                                 | LL      | 01, 02, ..., 12                   |       |\n   * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n   * |                                 | LLLL    | January, February, ..., December  | 2     |\n   * |                                 | LLLLL   | J, F, ..., D                      |       |\n   * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n   * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n   * |                                 | ww      | 01, 02, ..., 53                   |       |\n   * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n   * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n   * |                                 | II      | 01, 02, ..., 53                   | 7     |\n   * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n   * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n   * |                                 | dd      | 01, 02, ..., 31                   |       |\n   * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n   * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n   * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n   * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n   * |                                 | DDDD    | ...                               | 3     |\n   * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n   * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n   * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n   * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n   * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n   * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n   * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n   * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n   * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n   * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n   * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n   * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n   * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n   * |                                 | ee      | 02, 03, ..., 01                   |       |\n   * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n   * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n   * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n   * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n   * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n   * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n   * |                                 | cc      | 02, 03, ..., 01                   |       |\n   * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n   * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n   * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n   * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n   * | AM, PM                          | a..aa   | AM, PM                            |       |\n   * |                                 | aaa     | am, pm                            |       |\n   * |                                 | aaaa    | a.m., p.m.                        | 2     |\n   * |                                 | aaaaa   | a, p                              |       |\n   * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n   * |                                 | bbb     | am, pm, noon, midnight            |       |\n   * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n   * |                                 | bbbbb   | a, p, n, mi                       |       |\n   * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n   * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n   * |                                 | BBBBB   | at night, in the morning, ...     |       |\n   * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n   * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n   * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n   * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n   * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n   * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n   * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n   * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n   * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n   * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n   * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n   * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n   * | Minute                          | m       | 0, 1, ..., 59                     |       |\n   * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n   * |                                 | mm      | 00, 01, ..., 59                   |       |\n   * | Second                          | s       | 0, 1, ..., 59                     |       |\n   * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n   * |                                 | ss      | 00, 01, ..., 59                   |       |\n   * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n   * |                                 | SS      | 00, 01, ..., 99                   |       |\n   * |                                 | SSS     | 000, 001, ..., 999                |       |\n   * |                                 | SSSS    | ...                               | 3     |\n   * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n   * |                                 | XX      | -0800, +0530, Z                   |       |\n   * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n   * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n   * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n   * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n   * |                                 | xx      | -0800, +0530, +0000               |       |\n   * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n   * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n   * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n   * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n   * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n   * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n   * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n   * | Seconds timestamp               | t       | 512969520                         | 7     |\n   * |                                 | tt      | ...                               | 3,7   |\n   * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n   * |                                 | TT      | ...                               | 3,7   |\n   * | Long localized date             | P       | 04/29/1453                        | 7     |\n   * |                                 | PP      | Apr 29, 1453                      | 7     |\n   * |                                 | PPP     | April 29th, 1453                  | 7     |\n   * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n   * | Long localized time             | p       | 12:00 AM                          | 7     |\n   * |                                 | pp      | 12:00:00 AM                       | 7     |\n   * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n   * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n   * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n   * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n   * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n   * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n   * Notes:\n   * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n   *    are the same as \"stand-alone\" units, but are different in some languages.\n   *    \"Formatting\" units are declined according to the rules of the language\n   *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n   *\n   *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n   *\n   *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n   *\n   * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n   *    the single quote characters (see below).\n   *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n   *    the output will be the same as default pattern for this unit, usually\n   *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n   *    are marked with \"2\" in the last column of the table.\n   *\n   *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n   *\n   *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n   *\n   *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n   *\n   *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n   *\n   *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n   *\n   * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n   *    The output will be padded with zeros to match the length of the pattern.\n   *\n   *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n   *\n   * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n   *    These tokens represent the shortest form of the quarter.\n   *\n   * 5. The main difference between `y` and `u` patterns are B.C. years:\n   *\n   *    | Year | `y` | `u` |\n   *    |------|-----|-----|\n   *    | AC 1 |   1 |   1 |\n   *    | BC 1 |   1 |   0 |\n   *    | BC 2 |   2 |  -1 |\n   *\n   *    Also `yy` always returns the last two digits of a year,\n   *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n   *\n   *    | Year | `yy` | `uu` |\n   *    |------|------|------|\n   *    | 1    |   01 |   01 |\n   *    | 14   |   14 |   14 |\n   *    | 376  |   76 |  376 |\n   *    | 1453 |   53 | 1453 |\n   *\n   *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n   *    except local week-numbering years are dependent on `options.weekStartsOn`\n   *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n   *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n   *\n   * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n   *    so right now these tokens fall back to GMT timezones.\n   *\n   * 7. These patterns are not in the Unicode Technical Standard #35:\n   *    - `i`: ISO day of week\n   *    - `I`: ISO week of year\n   *    - `R`: ISO week-numbering year\n   *    - `t`: seconds timestamp\n   *    - `T`: milliseconds timestamp\n   *    - `o`: ordinal number modifier\n   *    - `P`: long localized date\n   *    - `p`: long localized time\n   *\n   * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n   *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n   *\n   * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n   *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n   *\n   * @param date - The original date\n   * @param format - The string of tokens\n   * @param options - An object with options\n   *\n   * @returns The formatted date string\n   *\n   * @throws `date` must not be Invalid Date\n   * @throws `options.locale` must contain `localize` property\n   * @throws `options.locale` must contain `formatLong` property\n   * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n   * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n   * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n   * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n   * @throws format string contains an unescaped latin alphabet character\n   *\n   * @example\n   * // Represent 11 February 2014 in middle-endian format:\n   * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n   * //=> '02/11/2014'\n   *\n   * @example\n   * // Represent 2 July 2014 in Esperanto:\n   * import { eoLocale } from 'date-fns/locale/eo'\n   * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n   *   locale: eoLocale\n   * })\n   * //=> '2-a de julio 2014'\n   *\n   * @example\n   * // Escape string by single quote characters:\n   * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n   * //=> \"3 o'clock\"\n   */\n  function format(date, formatStr, options) {\n    var defaultOptions = (0, _defaultOptions.getDefaultOptions)();\n    var locale = options?.locale ?? defaultOptions.locale ?? _defaultLocale.defaultLocale;\n    var firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions.firstWeekContainsDate ?? defaultOptions.locale?.options?.firstWeekContainsDate ?? 1;\n    var weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;\n    var originalDate = (0, _toDate.toDate)(date, options?.in);\n    if (!(0, _isValid.isValid)(originalDate)) {\n      throw new RangeError(\"Invalid time value\");\n    }\n    var parts = formatStr.match(longFormattingTokensRegExp).map(substring => {\n      var firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        var longFormatter = _longFormatters.longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    }).join(\"\").match(formattingTokensRegExp).map(substring => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return {\n          isToken: false,\n          value: \"'\"\n        };\n      }\n      var firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return {\n          isToken: false,\n          value: cleanEscapedString(substring)\n        };\n      }\n      if (_formatters.formatters[firstCharacter]) {\n        return {\n          isToken: true,\n          value: substring\n        };\n      }\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\"Format string contains an unescaped latin alphabet character `\" + firstCharacter + \"`\");\n      }\n      return {\n        isToken: false,\n        value: substring\n      };\n    });\n\n    // invoke localize preprocessor (only for french locales at the moment)\n    if (locale.localize.preprocessor) {\n      parts = locale.localize.preprocessor(originalDate, parts);\n    }\n    var formatterOptions = {\n      firstWeekContainsDate,\n      weekStartsOn,\n      locale\n    };\n    return parts.map(part => {\n      if (!part.isToken) return part.value;\n      var token = part.value;\n      if (!options?.useAdditionalWeekYearTokens && (0, _protectedTokens.isProtectedWeekYearToken)(token) || !options?.useAdditionalDayOfYearTokens && (0, _protectedTokens.isProtectedDayOfYearToken)(token)) {\n        (0, _protectedTokens.warnOrThrowProtectedError)(token, formatStr, String(date));\n      }\n      var formatter = _formatters.formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    }).join(\"\");\n  }\n  function cleanEscapedString(input) {\n    var matched = input.match(escapedStringRegExp);\n    if (!matched) {\n      return input;\n    }\n    return matched[1].replace(doubleQuoteRegExp, \"'\");\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = format;\n});","lineCount":411,"map":[[19,2,1,0],[19,6,1,0,"_defaultLocale"],[19,20,1,0],[19,23,1,0,"require"],[19,30,1,0],[19,31,1,0,"_dependencyMap"],[19,45,1,0],[20,2,2,0],[20,6,2,0,"_defaultOptions"],[20,21,2,0],[20,24,2,0,"require"],[20,31,2,0],[20,32,2,0,"_dependencyMap"],[20,46,2,0],[21,2,3,0],[21,6,3,0,"_formatters"],[21,17,3,0],[21,20,3,0,"require"],[21,27,3,0],[21,28,3,0,"_dependencyMap"],[21,42,3,0],[22,2,4,0],[22,6,4,0,"_longFormatters"],[22,21,4,0],[22,24,4,0,"require"],[22,31,4,0],[22,32,4,0,"_dependencyMap"],[22,46,4,0],[23,2,5,0],[23,6,5,0,"_protectedTokens"],[23,22,5,0],[23,25,5,0,"require"],[23,32,5,0],[23,33,5,0,"_dependencyMap"],[23,47,5,0],[24,2,10,0],[24,6,10,0,"_isValid"],[24,14,10,0],[24,17,10,0,"require"],[24,24,10,0],[24,25,10,0,"_dependencyMap"],[24,39,10,0],[25,2,11,0],[25,6,11,0,"_toDate"],[25,13,11,0],[25,16,11,0,"require"],[25,23,11,0],[25,24,11,0,"_dependencyMap"],[25,38,11,0],[26,2,13,0],[27,2,14,0],[29,2,17,0],[30,2,18,0],[31,2,19,0],[32,2,20,0],[33,2,21,0],[34,2,22,0],[35,2,23,0],[36,2,24,0],[37,2,25,0],[38,2,26,0],[39,2,27,0],[40,2,28,0],[40,6,28,6,"formattingTokensRegExp"],[40,28,28,28],[40,31,29,2],[40,86,29,57],[42,2,31,0],[43,2,32,0],[44,2,33,0],[44,6,33,6,"longFormattingTokensRegExp"],[44,32,33,32],[44,35,33,35],[44,70,33,70],[45,2,35,0],[45,6,35,6,"escapedStringRegExp"],[45,25,35,25],[45,28,35,28],[45,42,35,42],[46,2,36,0],[46,6,36,6,"doubleQuoteRegExp"],[46,23,36,23],[46,26,36,26],[46,31,36,31],[47,2,37,0],[47,6,37,6,"unescapedLatinCharacterRegExp"],[47,35,37,35],[47,38,37,38],[47,48,37,48],[48,2,41,0],[49,0,42,0],[50,0,43,0],[52,2,45,0],[53,0,46,0],[54,0,47,0],[55,0,48,0],[56,0,49,0],[57,0,50,0],[58,0,51,0],[59,0,52,0],[60,0,53,0],[61,0,54,0],[62,0,55,0],[63,0,56,0],[64,0,57,0],[65,0,58,0],[66,0,59,0],[67,0,60,0],[68,0,61,0],[69,0,62,0],[70,0,63,0],[71,0,64,0],[72,0,65,0],[73,0,66,0],[74,0,67,0],[75,0,68,0],[76,0,69,0],[77,0,70,0],[78,0,71,0],[79,0,72,0],[80,0,73,0],[81,0,74,0],[82,0,75,0],[83,0,76,0],[84,0,77,0],[85,0,78,0],[86,0,79,0],[87,0,80,0],[88,0,81,0],[89,0,82,0],[90,0,83,0],[91,0,84,0],[92,0,85,0],[93,0,86,0],[94,0,87,0],[95,0,88,0],[96,0,89,0],[97,0,90,0],[98,0,91,0],[99,0,92,0],[100,0,93,0],[101,0,94,0],[102,0,95,0],[103,0,96,0],[104,0,97,0],[105,0,98,0],[106,0,99,0],[107,0,100,0],[108,0,101,0],[109,0,102,0],[110,0,103,0],[111,0,104,0],[112,0,105,0],[113,0,106,0],[114,0,107,0],[115,0,108,0],[116,0,109,0],[117,0,110,0],[118,0,111,0],[119,0,112,0],[120,0,113,0],[121,0,114,0],[122,0,115,0],[123,0,116,0],[124,0,117,0],[125,0,118,0],[126,0,119,0],[127,0,120,0],[128,0,121,0],[129,0,122,0],[130,0,123,0],[131,0,124,0],[132,0,125,0],[133,0,126,0],[134,0,127,0],[135,0,128,0],[136,0,129,0],[137,0,130,0],[138,0,131,0],[139,0,132,0],[140,0,133,0],[141,0,134,0],[142,0,135,0],[143,0,136,0],[144,0,137,0],[145,0,138,0],[146,0,139,0],[147,0,140,0],[148,0,141,0],[149,0,142,0],[150,0,143,0],[151,0,144,0],[152,0,145,0],[153,0,146,0],[154,0,147,0],[155,0,148,0],[156,0,149,0],[157,0,150,0],[158,0,151,0],[159,0,152,0],[160,0,153,0],[161,0,154,0],[162,0,155,0],[163,0,156,0],[164,0,157,0],[165,0,158,0],[166,0,159,0],[167,0,160,0],[168,0,161,0],[169,0,162,0],[170,0,163,0],[171,0,164,0],[172,0,165,0],[173,0,166,0],[174,0,167,0],[175,0,168,0],[176,0,169,0],[177,0,170,0],[178,0,171,0],[179,0,172,0],[180,0,173,0],[181,0,174,0],[182,0,175,0],[183,0,176,0],[184,0,177,0],[185,0,178,0],[186,0,179,0],[187,0,180,0],[188,0,181,0],[189,0,182,0],[190,0,183,0],[191,0,184,0],[192,0,185,0],[193,0,186,0],[194,0,187,0],[195,0,188,0],[196,0,189,0],[197,0,190,0],[198,0,191,0],[199,0,192,0],[200,0,193,0],[201,0,194,0],[202,0,195,0],[203,0,196,0],[204,0,197,0],[205,0,198,0],[206,0,199,0],[207,0,200,0],[208,0,201,0],[209,0,202,0],[210,0,203,0],[211,0,204,0],[212,0,205,0],[213,0,206,0],[214,0,207,0],[215,0,208,0],[216,0,209,0],[217,0,210,0],[218,0,211,0],[219,0,212,0],[220,0,213,0],[221,0,214,0],[222,0,215,0],[223,0,216,0],[224,0,217,0],[225,0,218,0],[226,0,219,0],[227,0,220,0],[228,0,221,0],[229,0,222,0],[230,0,223,0],[231,0,224,0],[232,0,225,0],[233,0,226,0],[234,0,227,0],[235,0,228,0],[236,0,229,0],[237,0,230,0],[238,0,231,0],[239,0,232,0],[240,0,233,0],[241,0,234,0],[242,0,235,0],[243,0,236,0],[244,0,237,0],[245,0,238,0],[246,0,239,0],[247,0,240,0],[248,0,241,0],[249,0,242,0],[250,0,243,0],[251,0,244,0],[252,0,245,0],[253,0,246,0],[254,0,247,0],[255,0,248,0],[256,0,249,0],[257,0,250,0],[258,0,251,0],[259,0,252,0],[260,0,253,0],[261,0,254,0],[262,0,255,0],[263,0,256,0],[264,0,257,0],[265,0,258,0],[266,0,259,0],[267,0,260,0],[268,0,261,0],[269,0,262,0],[270,0,263,0],[271,0,264,0],[272,0,265,0],[273,0,266,0],[274,0,267,0],[275,0,268,0],[276,0,269,0],[277,0,270,0],[278,0,271,0],[279,0,272,0],[280,0,273,0],[281,0,274,0],[282,0,275,0],[283,0,276,0],[284,0,277,0],[285,0,278,0],[286,0,279,0],[287,0,280,0],[288,0,281,0],[289,0,282,0],[290,0,283,0],[291,0,284,0],[292,0,285,0],[293,0,286,0],[294,0,287,0],[295,0,288,0],[296,0,289,0],[297,0,290,0],[298,0,291,0],[299,0,292,0],[300,0,293,0],[301,0,294,0],[302,0,295,0],[303,0,296,0],[304,0,297,0],[305,0,298,0],[306,0,299,0],[307,0,300,0],[308,0,301,0],[309,0,302,0],[310,0,303,0],[311,0,304,0],[312,0,305,0],[313,0,306,0],[314,0,307,0],[315,0,308,0],[316,0,309,0],[317,0,310,0],[318,0,311,0],[319,0,312,0],[320,0,313,0],[321,0,314,0],[322,0,315,0],[323,0,316,0],[324,0,317,0],[325,0,318,0],[326,0,319,0],[327,0,320,0],[328,0,321,0],[329,0,322,0],[330,0,323,0],[331,0,324,0],[332,0,325,0],[333,0,326,0],[334,0,327,0],[335,0,328,0],[336,2,329,7],[336,11,329,16,"format"],[336,17,329,22,"format"],[336,18,329,23,"date"],[336,22,329,27],[336,24,329,29,"formatStr"],[336,33,329,38],[336,35,329,40,"options"],[336,42,329,47],[336,44,329,49],[337,4,330,2],[337,8,330,8,"defaultOptions"],[337,22,330,22],[337,25,330,25],[337,29,330,25,"getDefaultOptions"],[337,62,330,42],[337,64,330,43],[337,65,330,44],[338,4,331,2],[338,8,331,8,"locale"],[338,14,331,14],[338,17,331,17,"options"],[338,24,331,24],[338,26,331,26,"locale"],[338,32,331,32],[338,36,331,36,"defaultOptions"],[338,50,331,50],[338,51,331,51,"locale"],[338,57,331,57],[338,61,331,61,"defaultLocale"],[338,89,331,74],[339,4,333,2],[339,8,333,8,"firstWeekContainsDate"],[339,29,333,29],[339,32,334,4,"options"],[339,39,334,11],[339,41,334,13,"firstWeekContainsDate"],[339,62,334,34],[339,66,335,4,"options"],[339,73,335,11],[339,75,335,13,"locale"],[339,81,335,19],[339,83,335,21,"options"],[339,90,335,28],[339,92,335,30,"firstWeekContainsDate"],[339,113,335,51],[339,117,336,4,"defaultOptions"],[339,131,336,18],[339,132,336,19,"firstWeekContainsDate"],[339,153,336,40],[339,157,337,4,"defaultOptions"],[339,171,337,18],[339,172,337,19,"locale"],[339,178,337,25],[339,180,337,27,"options"],[339,187,337,34],[339,189,337,36,"firstWeekContainsDate"],[339,210,337,57],[339,214,338,4],[339,215,338,5],[340,4,340,2],[340,8,340,8,"weekStartsOn"],[340,20,340,20],[340,23,341,4,"options"],[340,30,341,11],[340,32,341,13,"weekStartsOn"],[340,44,341,25],[340,48,342,4,"options"],[340,55,342,11],[340,57,342,13,"locale"],[340,63,342,19],[340,65,342,21,"options"],[340,72,342,28],[340,74,342,30,"weekStartsOn"],[340,86,342,42],[340,90,343,4,"defaultOptions"],[340,104,343,18],[340,105,343,19,"weekStartsOn"],[340,117,343,31],[340,121,344,4,"defaultOptions"],[340,135,344,18],[340,136,344,19,"locale"],[340,142,344,25],[340,144,344,27,"options"],[340,151,344,34],[340,153,344,36,"weekStartsOn"],[340,165,344,48],[340,169,345,4],[340,170,345,5],[341,4,347,2],[341,8,347,8,"originalDate"],[341,20,347,20],[341,23,347,23],[341,27,347,23,"toDate"],[341,41,347,29],[341,43,347,30,"date"],[341,47,347,34],[341,49,347,36,"options"],[341,56,347,43],[341,58,347,45,"in"],[341,60,347,47],[341,61,347,48],[342,4,349,2],[342,8,349,6],[342,9,349,7],[342,13,349,7,"isValid"],[342,29,349,14],[342,31,349,15,"originalDate"],[342,43,349,27],[342,44,349,28],[342,46,349,30],[343,6,350,4],[343,12,350,10],[343,16,350,14,"RangeError"],[343,26,350,24],[343,27,350,25],[343,47,350,45],[343,48,350,46],[344,4,351,2],[345,4,353,2],[345,8,353,6,"parts"],[345,13,353,11],[345,16,353,14,"formatStr"],[345,25,353,23],[345,26,354,5,"match"],[345,31,354,10],[345,32,354,11,"longFormattingTokensRegExp"],[345,58,354,37],[345,59,354,38],[345,60,355,5,"map"],[345,63,355,8],[345,64,355,10,"substring"],[345,73,355,19],[345,77,355,24],[346,6,356,6],[346,10,356,12,"firstCharacter"],[346,24,356,26],[346,27,356,29,"substring"],[346,36,356,38],[346,37,356,39],[346,38,356,40],[346,39,356,41],[347,6,357,6],[347,10,357,10,"firstCharacter"],[347,24,357,24],[347,29,357,29],[347,32,357,32],[347,36,357,36,"firstCharacter"],[347,50,357,50],[347,55,357,55],[347,58,357,58],[347,60,357,60],[348,8,358,8],[348,12,358,14,"longFormatter"],[348,25,358,27],[348,28,358,30,"longFormatters"],[348,58,358,44],[348,59,358,45,"firstCharacter"],[348,73,358,59],[348,74,358,60],[349,8,359,8],[349,15,359,15,"longFormatter"],[349,28,359,28],[349,29,359,29,"substring"],[349,38,359,38],[349,40,359,40,"locale"],[349,46,359,46],[349,47,359,47,"formatLong"],[349,57,359,57],[349,58,359,58],[350,6,360,6],[351,6,361,6],[351,13,361,13,"substring"],[351,22,361,22],[352,4,362,4],[352,5,362,5],[352,6,362,6],[352,7,363,5,"join"],[352,11,363,9],[352,12,363,10],[352,14,363,12],[352,15,363,13],[352,16,364,5,"match"],[352,21,364,10],[352,22,364,11,"formattingTokensRegExp"],[352,44,364,33],[352,45,364,34],[352,46,365,5,"map"],[352,49,365,8],[352,50,365,10,"substring"],[352,59,365,19],[352,63,365,24],[353,6,366,6],[354,6,367,6],[354,10,367,10,"substring"],[354,19,367,19],[354,24,367,24],[354,28,367,28],[354,30,367,30],[355,8,368,8],[355,15,368,15],[356,10,368,17,"isToken"],[356,17,368,24],[356,19,368,26],[356,24,368,31],[357,10,368,33,"value"],[357,15,368,38],[357,17,368,40],[358,8,368,44],[358,9,368,45],[359,6,369,6],[360,6,371,6],[360,10,371,12,"firstCharacter"],[360,24,371,26],[360,27,371,29,"substring"],[360,36,371,38],[360,37,371,39],[360,38,371,40],[360,39,371,41],[361,6,372,6],[361,10,372,10,"firstCharacter"],[361,24,372,24],[361,29,372,29],[361,32,372,32],[361,34,372,34],[362,8,373,8],[362,15,373,15],[363,10,373,17,"isToken"],[363,17,373,24],[363,19,373,26],[363,24,373,31],[364,10,373,33,"value"],[364,15,373,38],[364,17,373,40,"cleanEscapedString"],[364,35,373,58],[364,36,373,59,"substring"],[364,45,373,68],[365,8,373,70],[365,9,373,71],[366,6,374,6],[367,6,376,6],[367,10,376,10,"formatters"],[367,32,376,20],[367,33,376,21,"firstCharacter"],[367,47,376,35],[367,48,376,36],[367,50,376,38],[368,8,377,8],[368,15,377,15],[369,10,377,17,"isToken"],[369,17,377,24],[369,19,377,26],[369,23,377,30],[370,10,377,32,"value"],[370,15,377,37],[370,17,377,39,"substring"],[371,8,377,49],[371,9,377,50],[372,6,378,6],[373,6,380,6],[373,10,380,10,"firstCharacter"],[373,24,380,24],[373,25,380,25,"match"],[373,30,380,30],[373,31,380,31,"unescapedLatinCharacterRegExp"],[373,60,380,60],[373,61,380,61],[373,63,380,63],[374,8,381,8],[374,14,381,14],[374,18,381,18,"RangeError"],[374,28,381,28],[374,29,382,10],[374,93,382,74],[374,96,383,12,"firstCharacter"],[374,110,383,26],[374,113,384,12],[374,116,385,8],[374,117,385,9],[375,6,386,6],[376,6,388,6],[376,13,388,13],[377,8,388,15,"isToken"],[377,15,388,22],[377,17,388,24],[377,22,388,29],[378,8,388,31,"value"],[378,13,388,36],[378,15,388,38,"substring"],[379,6,388,48],[379,7,388,49],[380,4,389,4],[380,5,389,5],[380,6,389,6],[382,4,391,2],[383,4,392,2],[383,8,392,6,"locale"],[383,14,392,12],[383,15,392,13,"localize"],[383,23,392,21],[383,24,392,22,"preprocessor"],[383,36,392,34],[383,38,392,36],[384,6,393,4,"parts"],[384,11,393,9],[384,14,393,12,"locale"],[384,20,393,18],[384,21,393,19,"localize"],[384,29,393,27],[384,30,393,28,"preprocessor"],[384,42,393,40],[384,43,393,41,"originalDate"],[384,55,393,53],[384,57,393,55,"parts"],[384,62,393,60],[384,63,393,61],[385,4,394,2],[386,4,396,2],[386,8,396,8,"formatterOptions"],[386,24,396,24],[386,27,396,27],[387,6,397,4,"firstWeekContainsDate"],[387,27,397,25],[388,6,398,4,"weekStartsOn"],[388,18,398,16],[389,6,399,4,"locale"],[390,4,400,2],[390,5,400,3],[391,4,402,2],[391,11,402,9,"parts"],[391,16,402,14],[391,17,403,5,"map"],[391,20,403,8],[391,21,403,10,"part"],[391,25,403,14],[391,29,403,19],[392,6,404,6],[392,10,404,10],[392,11,404,11,"part"],[392,15,404,15],[392,16,404,16,"isToken"],[392,23,404,23],[392,25,404,25],[392,32,404,32,"part"],[392,36,404,36],[392,37,404,37,"value"],[392,42,404,42],[393,6,406,6],[393,10,406,12,"token"],[393,15,406,17],[393,18,406,20,"part"],[393,22,406,24],[393,23,406,25,"value"],[393,28,406,30],[394,6,408,6],[394,10,409,9],[394,11,409,10,"options"],[394,18,409,17],[394,20,409,19,"useAdditionalWeekYearTokens"],[394,47,409,46],[394,51,410,10],[394,55,410,10,"isProtectedWeekYearToken"],[394,96,410,34],[394,98,410,35,"token"],[394,103,410,40],[394,104,410,41],[394,108,411,9],[394,109,411,10,"options"],[394,116,411,17],[394,118,411,19,"useAdditionalDayOfYearTokens"],[394,146,411,47],[394,150,412,10],[394,154,412,10,"isProtectedDayOfYearToken"],[394,196,412,35],[394,198,412,36,"token"],[394,203,412,41],[394,204,412,43],[394,206,413,8],[395,8,414,8],[395,12,414,8,"warnOrThrowProtectedError"],[395,54,414,33],[395,56,414,34,"token"],[395,61,414,39],[395,63,414,41,"formatStr"],[395,72,414,50],[395,74,414,52,"String"],[395,80,414,58],[395,81,414,59,"date"],[395,85,414,63],[395,86,414,64],[395,87,414,65],[396,6,415,6],[397,6,417,6],[397,10,417,12,"formatter"],[397,19,417,21],[397,22,417,24,"formatters"],[397,44,417,34],[397,45,417,35,"token"],[397,50,417,40],[397,51,417,41],[397,52,417,42],[397,53,417,43],[397,54,417,44],[398,6,418,6],[398,13,418,13,"formatter"],[398,22,418,22],[398,23,418,23,"originalDate"],[398,35,418,35],[398,37,418,37,"token"],[398,42,418,42],[398,44,418,44,"locale"],[398,50,418,50],[398,51,418,51,"localize"],[398,59,418,59],[398,61,418,61,"formatterOptions"],[398,77,418,77],[398,78,418,78],[399,4,419,4],[399,5,419,5],[399,6,419,6],[399,7,420,5,"join"],[399,11,420,9],[399,12,420,10],[399,14,420,12],[399,15,420,13],[400,2,421,0],[401,2,423,0],[401,11,423,9,"cleanEscapedString"],[401,29,423,27,"cleanEscapedString"],[401,30,423,28,"input"],[401,35,423,33],[401,37,423,35],[402,4,424,2],[402,8,424,8,"matched"],[402,15,424,15],[402,18,424,18,"input"],[402,23,424,23],[402,24,424,24,"match"],[402,29,424,29],[402,30,424,30,"escapedStringRegExp"],[402,49,424,49],[402,50,424,50],[403,4,426,2],[403,8,426,6],[403,9,426,7,"matched"],[403,16,426,14],[403,18,426,16],[404,6,427,4],[404,13,427,11,"input"],[404,18,427,16],[405,4,428,2],[406,4,430,2],[406,11,430,9,"matched"],[406,18,430,16],[406,19,430,17],[406,20,430,18],[406,21,430,19],[406,22,430,20,"replace"],[406,29,430,27],[406,30,430,28,"doubleQuoteRegExp"],[406,47,430,45],[406,49,430,47],[406,52,430,50],[406,53,430,51],[407,2,431,0],[409,2,433,0],[410,2,433,0],[410,6,433,0,"_default"],[410,14,433,0],[410,17,433,0,"exports"],[410,24,433,0],[410,25,433,0,"default"],[410,32,433,0],[410,35,434,15,"format"],[410,41,434,21],[411,0,434,21],[411,3]],"functionMap":{"names":["<global>","format","formatStr.match.map$argument_0","formatStr.match...match.map$argument_0","parts.map$argument_0","cleanEscapedString"],"mappings":"AAA;OCwU;SC0B;KDO;SEG;KFwB;SGc;KHgB;CDE;AKE;CLQ"}},"type":"js/module"}]}