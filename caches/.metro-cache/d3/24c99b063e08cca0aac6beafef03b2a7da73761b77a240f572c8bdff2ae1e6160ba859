{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.interval = interval;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _normalizeDates3 = require(_dependencyMap[2], \"./_lib/normalizeDates.js\");\n  /**\n   * The {@link interval} function options.\n   */\n\n  /**\n   * The {@link interval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the start argument,\n   * then the end interval date. If a context function is passed, it uses the context\n   * function return type.\n   */\n\n  /**\n   * @name interval\n   * @category Interval Helpers\n   * @summary Creates an interval object and validates its values.\n   *\n   * @description\n   * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.\n   *\n   * @typeParam StartDate - Start date type.\n   * @typeParam EndDate - End date type.\n   * @typeParam Options - Options type.\n   *\n   * @param start - The start of the interval.\n   * @param end - The end of the interval.\n   * @param options - The options object.\n   *\n   * @throws `Start date is invalid` when `start` is invalid.\n   * @throws `End date is invalid` when `end` is invalid.\n   * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.\n   *\n   * @returns The normalized and validated interval object.\n   */\n  function interval(start, end, options) {\n    var _normalizeDates = (0, _normalizeDates3.normalizeDates)(options?.in, start, end),\n      _normalizeDates2 = (0, _slicedToArray2.default)(_normalizeDates, 2),\n      _start = _normalizeDates2[0],\n      _end = _normalizeDates2[1];\n    if (isNaN(+_start)) throw new TypeError(\"Start date is invalid\");\n    if (isNaN(+_end)) throw new TypeError(\"End date is invalid\");\n    if (options?.assertPositive && +_start > +_end) throw new TypeError(\"End date must be after start date\");\n    return {\n      start: _start,\n      end: _end\n    };\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = interval;\n});","lineCount":59,"map":[[9,2,1,0],[9,6,1,0,"_normalizeDates3"],[9,22,1,0],[9,25,1,0,"require"],[9,32,1,0],[9,33,1,0,"_dependencyMap"],[9,47,1,0],[10,2,3,0],[11,0,4,0],[12,0,5,0],[14,2,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[21,2,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,2,36,7],[43,11,36,16,"interval"],[43,19,36,24,"interval"],[43,20,36,25,"start"],[43,25,36,30],[43,27,36,32,"end"],[43,30,36,35],[43,32,36,37,"options"],[43,39,36,44],[43,41,36,46],[44,4,37,2],[44,8,37,2,"_normalizeDates"],[44,23,37,2],[44,26,37,25],[44,30,37,25,"normalizeDates"],[44,61,37,39],[44,63,37,40,"options"],[44,70,37,47],[44,72,37,49,"in"],[44,74,37,51],[44,76,37,53,"start"],[44,81,37,58],[44,83,37,60,"end"],[44,86,37,63],[44,87,37,64],[45,6,37,64,"_normalizeDates2"],[45,22,37,64],[45,29,37,64,"_slicedToArray2"],[45,44,37,64],[45,45,37,64,"default"],[45,52,37,64],[45,54,37,64,"_normalizeDates"],[45,69,37,64],[46,6,37,9,"_start"],[46,12,37,15],[46,15,37,15,"_normalizeDates2"],[46,31,37,15],[47,6,37,17,"_end"],[47,10,37,21],[47,13,37,21,"_normalizeDates2"],[47,29,37,21],[48,4,39,2],[48,8,39,6,"isNaN"],[48,13,39,11],[48,14,39,12],[48,15,39,13,"_start"],[48,21,39,19],[48,22,39,20],[48,24,39,22],[48,30,39,28],[48,34,39,32,"TypeError"],[48,43,39,41],[48,44,39,42],[48,67,39,65],[48,68,39,66],[49,4,40,2],[49,8,40,6,"isNaN"],[49,13,40,11],[49,14,40,12],[49,15,40,13,"_end"],[49,19,40,17],[49,20,40,18],[49,22,40,20],[49,28,40,26],[49,32,40,30,"TypeError"],[49,41,40,39],[49,42,40,40],[49,63,40,61],[49,64,40,62],[50,4,42,2],[50,8,42,6,"options"],[50,15,42,13],[50,17,42,15,"assertPositive"],[50,31,42,29],[50,35,42,33],[50,36,42,34,"_start"],[50,42,42,40],[50,45,42,43],[50,46,42,44,"_end"],[50,50,42,48],[50,52,43,4],[50,58,43,10],[50,62,43,14,"TypeError"],[50,71,43,23],[50,72,43,24],[50,107,43,59],[50,108,43,60],[51,4,45,2],[51,11,45,9],[52,6,45,11,"start"],[52,11,45,16],[52,13,45,18,"_start"],[52,19,45,24],[53,6,45,26,"end"],[53,9,45,29],[53,11,45,31,"_end"],[54,4,45,36],[54,5,45,37],[55,2,46,0],[57,2,48,0],[58,2,48,0],[58,6,48,0,"_default"],[58,14,48,0],[58,17,48,0,"exports"],[58,24,48,0],[58,25,48,0,"default"],[58,32,48,0],[58,35,49,15,"interval"],[58,43,49,23],[59,0,49,23],[59,3]],"functionMap":{"names":["<global>","interval"],"mappings":"AAA;OCmC;CDU"}},"type":"js/module"}]}