{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}},{"name":"./max.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":31,"index":90}}],"key":"/ig9kvdgCUKfntz07z+RRKdvFCY=","exportNames":["*"]}},{"name":"./min.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":91},"end":{"line":3,"column":31,"index":122}}],"key":"IaiS1NqD3bj2r8kvzJAuj5V7ZVA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.clamp = clamp;\n  exports.default = void 0;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _normalizeDates3 = require(_dependencyMap[2], \"./_lib/normalizeDates.js\");\n  var _max = require(_dependencyMap[3], \"./max.js\");\n  var _min = require(_dependencyMap[4], \"./min.js\");\n  /**\n   * The {@link clamp} function options.\n   */\n\n  /**\n   * The {@link clamp} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name clamp\n   * @category Interval Helpers\n   * @summary Return a date bounded by the start and the end of the given interval.\n   *\n   * @description\n   * Clamps a date to the lower bound with the start of the interval and the upper\n   * bound with the end of the interval.\n   *\n   * - When the date is less than the start of the interval, the start is returned.\n   * - When the date is greater than the end of the interval, the end is returned.\n   * - Otherwise the date is returned.\n   *\n   * @typeParam DateType - Date argument type.\n   * @typeParam IntervalType - Interval argument type.\n   * @typeParam Options - Options type.\n   *\n   * @param date - The date to be bounded\n   * @param interval - The interval to bound to\n   * @param options - An object with options\n   *\n   * @returns The date bounded by the start and the end of the interval\n   *\n   * @example\n   * // What is Mar 21, 2021 bounded to an interval starting at Mar 22, 2021 and ending at Apr 01, 2021\n   * const result = clamp(new Date(2021, 2, 21), {\n   *   start: new Date(2021, 2, 22),\n   *   end: new Date(2021, 3, 1),\n   * })\n   * //=> Mon Mar 22 2021 00:00:00\n   */\n  function clamp(date, interval, options) {\n    var _normalizeDates = (0, _normalizeDates3.normalizeDates)(options?.in, date, interval.start, interval.end),\n      _normalizeDates2 = (0, _slicedToArray2.default)(_normalizeDates, 3),\n      date_ = _normalizeDates2[0],\n      start = _normalizeDates2[1],\n      end = _normalizeDates2[2];\n    return (0, _min.min)([(0, _max.max)([date_, start], options), end], options);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = clamp;\n});","lineCount":65,"map":[[9,2,1,0],[9,6,1,0,"_normalizeDates3"],[9,22,1,0],[9,25,1,0,"require"],[9,32,1,0],[9,33,1,0,"_dependencyMap"],[9,47,1,0],[10,2,2,0],[10,6,2,0,"_max"],[10,10,2,0],[10,13,2,0,"require"],[10,20,2,0],[10,21,2,0,"_dependencyMap"],[10,35,2,0],[11,2,3,0],[11,6,3,0,"_min"],[11,10,3,0],[11,13,3,0,"require"],[11,20,3,0],[11,21,3,0,"_dependencyMap"],[11,35,3,0],[12,2,5,0],[13,0,6,0],[14,0,7,0],[16,2,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[23,2,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,2,47,7],[54,11,47,16,"clamp"],[54,16,47,21,"clamp"],[54,17,47,22,"date"],[54,21,47,26],[54,23,47,28,"interval"],[54,31,47,36],[54,33,47,38,"options"],[54,40,47,45],[54,42,47,47],[55,4,48,2],[55,8,48,2,"_normalizeDates"],[55,23,48,2],[55,26,48,30],[55,30,48,30,"normalizeDates"],[55,61,48,44],[55,63,49,4,"options"],[55,70,49,11],[55,72,49,13,"in"],[55,74,49,15],[55,76,50,4,"date"],[55,80,50,8],[55,82,51,4,"interval"],[55,90,51,12],[55,91,51,13,"start"],[55,96,51,18],[55,98,52,4,"interval"],[55,106,52,12],[55,107,52,13,"end"],[55,110,53,2],[55,111,53,3],[56,6,53,3,"_normalizeDates2"],[56,22,53,3],[56,29,53,3,"_slicedToArray2"],[56,44,53,3],[56,45,53,3,"default"],[56,52,53,3],[56,54,53,3,"_normalizeDates"],[56,69,53,3],[57,6,48,9,"date_"],[57,11,48,14],[57,14,48,14,"_normalizeDates2"],[57,30,48,14],[58,6,48,16,"start"],[58,11,48,21],[58,14,48,21,"_normalizeDates2"],[58,30,48,21],[59,6,48,23,"end"],[59,9,48,26],[59,12,48,26,"_normalizeDates2"],[59,28,48,26],[60,4,55,2],[60,11,55,9],[60,15,55,9,"min"],[60,23,55,12],[60,25,55,13],[60,26,55,14],[60,30,55,14,"max"],[60,38,55,17],[60,40,55,18],[60,41,55,19,"date_"],[60,46,55,24],[60,48,55,26,"start"],[60,53,55,31],[60,54,55,32],[60,56,55,34,"options"],[60,63,55,41],[60,64,55,42],[60,66,55,44,"end"],[60,69,55,47],[60,70,55,48],[60,72,55,50,"options"],[60,79,55,57],[60,80,55,58],[61,2,56,0],[63,2,58,0],[64,2,58,0],[64,6,58,0,"_default"],[64,14,58,0],[64,17,58,0,"exports"],[64,24,58,0],[64,25,58,0,"default"],[64,32,58,0],[64,35,59,15,"clamp"],[64,40,59,20],[65,0,59,20],[65,3]],"functionMap":{"names":["<global>","clamp"],"mappings":"AAA;OC8C;CDS"}},"type":"js/module"}]}