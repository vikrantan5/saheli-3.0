{"dependencies":[{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.toDate = toDate;\n  var _constructFrom = require(_dependencyMap[0], \"./constructFrom.js\");\n  /**\n   * @name toDate\n   * @category Common Helpers\n   * @summary Convert the given argument to an instance of Date.\n   *\n   * @description\n   * Convert the given argument to an instance of Date.\n   *\n   * If the argument is an instance of Date, the function returns its clone.\n   *\n   * If the argument is a number, it is treated as a timestamp.\n   *\n   * If the argument is none of the above, the function returns Invalid Date.\n   *\n   * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n   * enabling to transfer extra properties from the reference date to the new date.\n   * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n   * that accept a time zone as a constructor argument.\n   *\n   * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param argument - The value to convert\n   *\n   * @returns The parsed date in the local time zone\n   *\n   * @example\n   * // Clone the date:\n   * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n   * //=> Tue Feb 11 2014 11:30:30\n   *\n   * @example\n   * // Convert the timestamp to date:\n   * const result = toDate(1392098430000)\n   * //=> Tue Feb 11 2014 11:30:30\n   */\n  function toDate(argument, context) {\n    // [TODO] Get rid of `toDate` or `constructFrom`?\n    return (0, _constructFrom.constructFrom)(context || argument, argument);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = toDate;\n});","lineCount":53,"map":[[7,2,1,0],[7,6,1,0,"_constructFrom"],[7,20,1,0],[7,23,1,0,"require"],[7,30,1,0],[7,31,1,0,"_dependencyMap"],[7,45,1,0],[8,2,3,0],[9,0,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,2,41,7],[46,11,41,16,"toDate"],[46,17,41,22,"toDate"],[46,18,41,23,"argument"],[46,26,41,31],[46,28,41,33,"context"],[46,35,41,40],[46,37,41,42],[47,4,42,2],[48,4,43,2],[48,11,43,9],[48,15,43,9,"constructFrom"],[48,43,43,22],[48,45,43,23,"context"],[48,52,43,30],[48,56,43,34,"argument"],[48,64,43,42],[48,66,43,44,"argument"],[48,74,43,52],[48,75,43,53],[49,2,44,0],[51,2,46,0],[52,2,46,0],[52,6,46,0,"_default"],[52,14,46,0],[52,17,46,0,"exports"],[52,24,46,0],[52,25,46,0,"default"],[52,32,46,0],[52,35,47,15,"toDate"],[52,41,47,21],[53,0,47,21],[53,3]],"functionMap":{"names":["<global>","toDate"],"mappings":"AAA;OCwC;CDG"}},"type":"js/module"}]}