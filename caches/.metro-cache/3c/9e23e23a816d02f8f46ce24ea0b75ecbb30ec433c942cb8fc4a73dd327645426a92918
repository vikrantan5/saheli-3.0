{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.closestIndexTo = closestIndexTo;\n  exports.default = void 0;\n  var _toDate = require(_dependencyMap[0], \"./toDate.js\");\n  /**\n   * @name closestIndexTo\n   * @category Common Helpers\n   * @summary Return an index of the closest date from the array comparing to the given date.\n   *\n   * @description\n   * Return an index of the closest date from the array comparing to the given date.\n   *\n   * @param dateToCompare - The date to compare with\n   * @param dates - The array to search\n   *\n   * @returns An index of the date closest to the given date or undefined if no valid value is given\n   *\n   * @example\n   * // Which date is closer to 6 September 2015?\n   * const dateToCompare = new Date(2015, 8, 6)\n   * const datesArray = [\n   *   new Date(2015, 0, 1),\n   *   new Date(2016, 0, 1),\n   *   new Date(2017, 0, 1)\n   * ]\n   * const result = closestIndexTo(dateToCompare, datesArray)\n   * //=> 1\n   */\n  function closestIndexTo(dateToCompare, dates) {\n    // [TODO] It would be better to return -1 here rather than undefined, as this\n    // is how JS behaves, but it would be a breaking change, so we need\n    // to consider it for v4.\n    var timeToCompare = +(0, _toDate.toDate)(dateToCompare);\n    if (isNaN(timeToCompare)) return NaN;\n    var result;\n    var minDistance;\n    dates.forEach((date, index) => {\n      var date_ = (0, _toDate.toDate)(date);\n      if (isNaN(+date_)) {\n        result = NaN;\n        minDistance = NaN;\n        return;\n      }\n      var distance = Math.abs(timeToCompare - +date_);\n      if (result == null || distance < minDistance) {\n        result = index;\n        minDistance = distance;\n      }\n    });\n    return result;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = closestIndexTo;\n});","lineCount":58,"map":[[7,2,1,0],[7,6,1,0,"_toDate"],[7,13,1,0],[7,16,1,0,"require"],[7,23,1,0],[7,24,1,0,"_dependencyMap"],[7,38,1,0],[8,2,3,0],[9,0,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,2,27,7],[32,11,27,16,"closestIndexTo"],[32,25,27,30,"closestIndexTo"],[32,26,27,31,"dateToCompare"],[32,39,27,44],[32,41,27,46,"dates"],[32,46,27,51],[32,48,27,53],[33,4,28,2],[34,4,29,2],[35,4,30,2],[36,4,31,2],[36,8,31,8,"timeToCompare"],[36,21,31,21],[36,24,31,24],[36,25,31,25],[36,29,31,25,"toDate"],[36,43,31,31],[36,45,31,32,"dateToCompare"],[36,58,31,45],[36,59,31,46],[37,4,33,2],[37,8,33,6,"isNaN"],[37,13,33,11],[37,14,33,12,"timeToCompare"],[37,27,33,25],[37,28,33,26],[37,30,33,28],[37,37,33,35,"NaN"],[37,40,33,38],[38,4,35,2],[38,8,35,6,"result"],[38,14,35,12],[39,4,36,2],[39,8,36,6,"minDistance"],[39,19,36,17],[40,4,37,2,"dates"],[40,9,37,7],[40,10,37,8,"forEach"],[40,17,37,15],[40,18,37,16],[40,19,37,17,"date"],[40,23,37,21],[40,25,37,23,"index"],[40,30,37,28],[40,35,37,33],[41,6,38,4],[41,10,38,10,"date_"],[41,15,38,15],[41,18,38,18],[41,22,38,18,"toDate"],[41,36,38,24],[41,38,38,25,"date"],[41,42,38,29],[41,43,38,30],[42,6,40,4],[42,10,40,8,"isNaN"],[42,15,40,13],[42,16,40,14],[42,17,40,15,"date_"],[42,22,40,20],[42,23,40,21],[42,25,40,23],[43,8,41,6,"result"],[43,14,41,12],[43,17,41,15,"NaN"],[43,20,41,18],[44,8,42,6,"minDistance"],[44,19,42,17],[44,22,42,20,"NaN"],[44,25,42,23],[45,8,43,6],[46,6,44,4],[47,6,46,4],[47,10,46,10,"distance"],[47,18,46,18],[47,21,46,21,"Math"],[47,25,46,25],[47,26,46,26,"abs"],[47,29,46,29],[47,30,46,30,"timeToCompare"],[47,43,46,43],[47,46,46,46],[47,47,46,47,"date_"],[47,52,46,52],[47,53,46,53],[48,6,47,4],[48,10,47,8,"result"],[48,16,47,14],[48,20,47,18],[48,24,47,22],[48,28,47,26,"distance"],[48,36,47,34],[48,39,47,37,"minDistance"],[48,50,47,48],[48,52,47,50],[49,8,48,6,"result"],[49,14,48,12],[49,17,48,15,"index"],[49,22,48,20],[50,8,49,6,"minDistance"],[50,19,49,17],[50,22,49,20,"distance"],[50,30,49,28],[51,6,50,4],[52,4,51,2],[52,5,51,3],[52,6,51,4],[53,4,53,2],[53,11,53,9,"result"],[53,17,53,15],[54,2,54,0],[56,2,56,0],[57,2,56,0],[57,6,56,0,"_default"],[57,14,56,0],[57,17,56,0,"exports"],[57,24,56,0],[57,25,56,0,"default"],[57,32,56,0],[57,35,57,15,"closestIndexTo"],[57,49,57,29],[58,0,57,29],[58,3]],"functionMap":{"names":["<global>","closestIndexTo","dates.forEach$argument_0"],"mappings":"AAA;OC0B;gBCU;GDc;CDG"}},"type":"js/module"}]}