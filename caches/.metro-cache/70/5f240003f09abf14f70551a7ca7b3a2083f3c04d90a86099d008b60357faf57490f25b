{"dependencies":[{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":52,"index":52}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}},{"name":"./startOfWeek.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":53},"end":{"line":2,"column":47,"index":100}}],"key":"P3QLf1gnhZwOwCLzrccpsspoyVY=","exportNames":["*"]}},{"name":"./startOfWeekYear.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":101},"end":{"line":3,"column":55,"index":156}}],"key":"tCEmGu/zjPVKU+WJVPcXPZwIpTo=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":157},"end":{"line":4,"column":37,"index":194}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.getWeek = getWeek;\n  var _constants = require(_dependencyMap[0], \"./constants.js\");\n  var _startOfWeek = require(_dependencyMap[1], \"./startOfWeek.js\");\n  var _startOfWeekYear = require(_dependencyMap[2], \"./startOfWeekYear.js\");\n  var _toDate = require(_dependencyMap[3], \"./toDate.js\");\n  /**\n   * The {@link getWeek} function options.\n   */\n\n  /**\n   * @name getWeek\n   * @category Week Helpers\n   * @summary Get the local week index of the given date.\n   *\n   * @description\n   * Get the local week index of the given date.\n   * The exact calculation depends on the values of\n   * `options.weekStartsOn` (which is the index of the first day of the week)\n   * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n   * the first week of the week-numbering year)\n   *\n   * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n   *\n   * @param date - The given date\n   * @param options - An object with options\n   *\n   * @returns The week\n   *\n   * @example\n   * // Which week of the local week numbering year is 2 January 2005 with default options?\n   * const result = getWeek(new Date(2005, 0, 2))\n   * //=> 2\n   *\n   * @example\n   * // Which week of the local week numbering year is 2 January 2005,\n   * // if Monday is the first day of the week,\n   * // and the first week of the year always contains 4 January?\n   * const result = getWeek(new Date(2005, 0, 2), {\n   *   weekStartsOn: 1,\n   *   firstWeekContainsDate: 4\n   * })\n   * //=> 53\n   */\n  function getWeek(date, options) {\n    var _date = (0, _toDate.toDate)(date, options?.in);\n    var diff = +(0, _startOfWeek.startOfWeek)(_date, options) - +(0, _startOfWeekYear.startOfWeekYear)(_date, options);\n\n    // Round the number of weeks to the nearest integer because the number of\n    // milliseconds in a week is not constant (e.g. it's different in the week of\n    // the daylight saving time clock shift).\n    return Math.round(diff / _constants.millisecondsInWeek) + 1;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = getWeek;\n});","lineCount":61,"map":[[7,2,1,0],[7,6,1,0,"_constants"],[7,16,1,0],[7,19,1,0,"require"],[7,26,1,0],[7,27,1,0,"_dependencyMap"],[7,41,1,0],[8,2,2,0],[8,6,2,0,"_startOfWeek"],[8,18,2,0],[8,21,2,0,"require"],[8,28,2,0],[8,29,2,0,"_dependencyMap"],[8,43,2,0],[9,2,3,0],[9,6,3,0,"_startOfWeekYear"],[9,22,3,0],[9,25,3,0,"require"],[9,32,3,0],[9,33,3,0,"_dependencyMap"],[9,47,3,0],[10,2,4,0],[10,6,4,0,"_toDate"],[10,13,4,0],[10,16,4,0,"require"],[10,23,4,0],[10,24,4,0,"_dependencyMap"],[10,38,4,0],[11,2,6,0],[12,0,7,0],[13,0,8,0],[15,2,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,2,44,7],[49,11,44,16,"getWeek"],[49,18,44,23,"getWeek"],[49,19,44,24,"date"],[49,23,44,28],[49,25,44,30,"options"],[49,32,44,37],[49,34,44,39],[50,4,45,2],[50,8,45,8,"_date"],[50,13,45,13],[50,16,45,16],[50,20,45,16,"toDate"],[50,34,45,22],[50,36,45,23,"date"],[50,40,45,27],[50,42,45,29,"options"],[50,49,45,36],[50,51,45,38,"in"],[50,53,45,40],[50,54,45,41],[51,4,46,2],[51,8,46,8,"diff"],[51,12,46,12],[51,15,46,15],[51,16,46,16],[51,20,46,16,"startOfWeek"],[51,44,46,27],[51,46,46,28,"_date"],[51,51,46,33],[51,53,46,35,"options"],[51,60,46,42],[51,61,46,43],[51,64,46,46],[51,65,46,47],[51,69,46,47,"startOfWeekYear"],[51,101,46,62],[51,103,46,63,"_date"],[51,108,46,68],[51,110,46,70,"options"],[51,117,46,77],[51,118,46,78],[53,4,48,2],[54,4,49,2],[55,4,50,2],[56,4,51,2],[56,11,51,9,"Math"],[56,15,51,13],[56,16,51,14,"round"],[56,21,51,19],[56,22,51,20,"diff"],[56,26,51,24],[56,29,51,27,"millisecondsInWeek"],[56,58,51,45],[56,59,51,46],[56,62,51,49],[56,63,51,50],[57,2,52,0],[59,2,54,0],[60,2,54,0],[60,6,54,0,"_default"],[60,14,54,0],[60,17,54,0,"exports"],[60,24,54,0],[60,25,54,0,"default"],[60,32,54,0],[60,35,55,15,"getWeek"],[60,42,55,22],[61,0,55,22],[61,3]],"functionMap":{"names":["<global>","getWeek"],"mappings":"AAA;OC2C;CDQ"}},"type":"js/module"}]}