{"dependencies":[{"name":"assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":33,"index":249},"end":{"line":6,"column":50,"index":266}}],"key":"Umsy3wQQm6DbjafRIeuw3teOkUU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var assert_1 = __importDefault(require(_dependencyMap[0], \"assert\"));\n  function computeNextBackoffInterval(initialBackoff, previousRetryCount) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$multiplier = _ref.multiplier,\n      multiplier = _ref$multiplier === void 0 ? 1.5 : _ref$multiplier,\n      _ref$randomizationFac = _ref.randomizationFactor,\n      randomizationFactor = _ref$randomizationFac === void 0 ? 0.25 : _ref$randomizationFac,\n      _ref$minBackoff = _ref.minBackoff,\n      minBackoff = _ref$minBackoff === void 0 ? initialBackoff : _ref$minBackoff,\n      _ref$maxBackoff = _ref.maxBackoff,\n      maxBackoff = _ref$maxBackoff === void 0 ? Infinity : _ref$maxBackoff;\n    assert_1.default(initialBackoff > 0, `The initial backoff interval must be positive`);\n    assert_1.default(previousRetryCount >= 0, `The previous retry count must not be negative`);\n    assert_1.default(multiplier >= 1, `The backoff multiplier must be greater than or equal to 1`);\n    assert_1.default(0 <= randomizationFactor && randomizationFactor <= 1, `The randomization factor must be between 0 and 1, inclusive`);\n    assert_1.default(minBackoff >= 0, `The minimum backoff interval must be positive`);\n    var nextBackoff = initialBackoff * multiplier ** previousRetryCount;\n    // Apply jitter within the negative to positive range of the randomization factor\n    var jitterFactor = 1 - randomizationFactor + 2 * randomizationFactor * Math.random();\n    return Math.min(Math.max(nextBackoff * jitterFactor, minBackoff), maxBackoff);\n  }\n  exports.computeNextBackoffInterval = computeNextBackoffInterval;\n});","lineCount":34,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__importDefault"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__importDefault"],[4,52,2,51],[4,56,2,56],[4,66,2,66,"mod"],[4,69,2,69],[4,71,2,71],[5,4,3,4],[5,11,3,12,"mod"],[5,14,3,15],[5,18,3,19,"mod"],[5,21,3,22],[5,22,3,23,"__esModule"],[5,32,3,33],[5,35,3,37,"mod"],[5,38,3,40],[5,41,3,43],[6,6,3,45],[6,15,3,54],[6,17,3,56,"mod"],[7,4,3,60],[7,5,3,61],[8,2,4,0],[8,3,4,1],[9,2,5,0,"Object"],[9,8,5,6],[9,9,5,7,"defineProperty"],[9,23,5,21],[9,24,5,22,"exports"],[9,31,5,29],[9,33,5,31],[9,45,5,43],[9,47,5,45],[10,4,5,47,"value"],[10,9,5,52],[10,11,5,54],[11,2,5,59],[11,3,5,60],[11,4,5,61],[12,2,6,0],[12,6,6,6,"assert_1"],[12,14,6,14],[12,17,6,17,"__importDefault"],[12,32,6,32],[12,33,6,33,"require"],[12,40,6,40],[12,41,6,40,"_dependencyMap"],[12,55,6,40],[12,68,6,49],[12,69,6,50],[12,70,6,51],[13,2,7,0],[13,11,7,9,"computeNextBackoffInterval"],[13,37,7,35,"computeNextBackoffInterval"],[13,38,7,36,"initialBackoff"],[13,52,7,50],[13,54,7,52,"previousRetryCount"],[13,72,7,70],[13,74,7,180],[14,4,7,180],[14,8,7,180,"_ref"],[14,12,7,180],[14,15,7,180,"arguments"],[14,24,7,180],[14,25,7,180,"length"],[14,31,7,180],[14,39,7,180,"arguments"],[14,48,7,180],[14,56,7,180,"undefined"],[14,65,7,180],[14,68,7,180,"arguments"],[14,77,7,180],[14,83,7,176],[14,84,7,177],[14,85,7,178],[15,6,7,178,"_ref$multiplier"],[15,21,7,178],[15,24,7,178,"_ref"],[15,28,7,178],[15,29,7,74,"multiplier"],[15,39,7,84],[16,6,7,74,"multiplier"],[16,16,7,84],[16,19,7,84,"_ref$multiplier"],[16,34,7,84],[16,48,7,87],[16,51,7,90],[16,54,7,90,"_ref$multiplier"],[16,69,7,90],[17,6,7,90,"_ref$randomizationFac"],[17,27,7,90],[17,30,7,90,"_ref"],[17,34,7,90],[17,35,7,92,"randomizationFactor"],[17,54,7,111],[18,6,7,92,"randomizationFactor"],[18,25,7,111],[18,28,7,111,"_ref$randomizationFac"],[18,49,7,111],[18,63,7,114],[18,67,7,118],[18,70,7,118,"_ref$randomizationFac"],[18,91,7,118],[19,6,7,118,"_ref$minBackoff"],[19,21,7,118],[19,24,7,118,"_ref"],[19,28,7,118],[19,29,7,120,"minBackoff"],[19,39,7,130],[20,6,7,120,"minBackoff"],[20,16,7,130],[20,19,7,130,"_ref$minBackoff"],[20,34,7,130],[20,48,7,133,"initialBackoff"],[20,62,7,147],[20,65,7,147,"_ref$minBackoff"],[20,80,7,147],[21,6,7,147,"_ref$maxBackoff"],[21,21,7,147],[21,24,7,147,"_ref"],[21,28,7,147],[21,29,7,149,"maxBackoff"],[21,39,7,159],[22,6,7,149,"maxBackoff"],[22,16,7,159],[22,19,7,159,"_ref$maxBackoff"],[22,34,7,159],[22,48,7,162,"Infinity"],[22,56,7,170],[22,59,7,170,"_ref$maxBackoff"],[22,74,7,170],[23,4,8,4,"assert_1"],[23,12,8,12],[23,13,8,13,"default"],[23,20,8,20],[23,21,8,21,"initialBackoff"],[23,35,8,35],[23,38,8,38],[23,39,8,39],[23,41,8,41],[23,88,8,88],[23,89,8,89],[24,4,9,4,"assert_1"],[24,12,9,12],[24,13,9,13,"default"],[24,20,9,20],[24,21,9,21,"previousRetryCount"],[24,39,9,39],[24,43,9,43],[24,44,9,44],[24,46,9,46],[24,93,9,93],[24,94,9,94],[25,4,10,4,"assert_1"],[25,12,10,12],[25,13,10,13,"default"],[25,20,10,20],[25,21,10,21,"multiplier"],[25,31,10,31],[25,35,10,35],[25,36,10,36],[25,38,10,38],[25,97,10,97],[25,98,10,98],[26,4,11,4,"assert_1"],[26,12,11,12],[26,13,11,13,"default"],[26,20,11,20],[26,21,11,21],[26,22,11,22],[26,26,11,26,"randomizationFactor"],[26,45,11,45],[26,49,11,49,"randomizationFactor"],[26,68,11,68],[26,72,11,72],[26,73,11,73],[26,75,11,75],[26,136,11,136],[26,137,11,137],[27,4,12,4,"assert_1"],[27,12,12,12],[27,13,12,13,"default"],[27,20,12,20],[27,21,12,21,"minBackoff"],[27,31,12,31],[27,35,12,35],[27,36,12,36],[27,38,12,38],[27,85,12,85],[27,86,12,86],[28,4,13,4],[28,8,13,8,"nextBackoff"],[28,19,13,19],[28,22,13,22,"initialBackoff"],[28,36,13,36],[28,39,13,39,"multiplier"],[28,49,13,49],[28,53,13,53,"previousRetryCount"],[28,71,13,71],[29,4,14,4],[30,4,15,4],[30,8,15,8,"jitterFactor"],[30,20,15,20],[30,23,15,23],[30,24,15,24],[30,27,15,27,"randomizationFactor"],[30,46,15,46],[30,49,15,49],[30,50,15,50],[30,53,15,53,"randomizationFactor"],[30,72,15,72],[30,75,15,75,"Math"],[30,79,15,79],[30,80,15,80,"random"],[30,86,15,86],[30,87,15,87],[30,88,15,88],[31,4,16,4],[31,11,16,11,"Math"],[31,15,16,15],[31,16,16,16,"min"],[31,19,16,19],[31,20,16,20,"Math"],[31,24,16,24],[31,25,16,25,"max"],[31,28,16,28],[31,29,16,29,"nextBackoff"],[31,40,16,40],[31,43,16,43,"jitterFactor"],[31,55,16,55],[31,57,16,57,"minBackoff"],[31,67,16,67],[31,68,16,68],[31,70,16,70,"maxBackoff"],[31,80,16,80],[31,81,16,81],[32,2,17,0],[33,2,18,0,"exports"],[33,9,18,7],[33,10,18,8,"computeNextBackoffInterval"],[33,36,18,34],[33,39,18,37,"computeNextBackoffInterval"],[33,65,18,63],[34,0,18,64],[34,3]],"functionMap":{"names":["<global>","<anonymous>","computeNextBackoffInterval"],"mappings":"AAA;wDCC;CDE;AEG;CFU"}},"type":"js/module"}]}