{"dependencies":[{"name":"call-bound","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":31},"end":{"line":3,"column":37,"index":52}}],"key":"xVV7LLeUILRahu/c6/GJ3JZjpdc=","exportNames":["*"]}},{"name":"has-tostringtag/shams","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":21,"index":75},"end":{"line":4,"column":53,"index":107}}],"key":"izE/uq7FfNanWBh2hZSREj/S0H0=","exportNames":["*"]}},{"name":"hasown","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":13,"index":124},"end":{"line":5,"column":30,"index":141}}],"key":"VT3hiVD+HsWWJ61cDFykFNxCL5Q=","exportNames":["*"]}},{"name":"gopd","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":11,"index":154},"end":{"line":6,"column":26,"index":169}}],"key":"3Ynmg9vud3kIHPLeXNonzO7sQpY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var callBound = require(_dependencyMap[0], \"call-bound\");\n  var hasToStringTag = require(_dependencyMap[1], \"has-tostringtag/shams\")();\n  var hasOwn = require(_dependencyMap[2], \"hasown\");\n  var gOPD = require(_dependencyMap[3], \"gopd\");\n\n  /** @type {import('.')} */\n  var fn;\n  if (hasToStringTag) {\n    /** @type {(receiver: ThisParameterType<typeof RegExp.prototype.exec>, ...args: Parameters<typeof RegExp.prototype.exec>) => ReturnType<typeof RegExp.prototype.exec>} */\n    var $exec = callBound('RegExp.prototype.exec');\n    /** @type {object} */\n    var isRegexMarker = {};\n    var throwRegexMarker = function () {\n      throw isRegexMarker;\n    };\n    /** @type {{ toString(): never, valueOf(): never, [Symbol.toPrimitive]?(): never }} */\n    var badStringifier = {\n      toString: throwRegexMarker,\n      valueOf: throwRegexMarker\n    };\n    if (typeof Symbol.toPrimitive === 'symbol') {\n      badStringifier[Symbol.toPrimitive] = throwRegexMarker;\n    }\n\n    /** @type {import('.')} */\n    // @ts-expect-error TS can't figure out that the $exec call always throws\n    // eslint-disable-next-line consistent-return\n    fn = function isRegex(value) {\n      if (!value || typeof value !== 'object') {\n        return false;\n      }\n\n      // eslint-disable-next-line no-extra-parens\n      var descriptor = /** @type {NonNullable<typeof gOPD>} */gOPD(/** @type {{ lastIndex?: unknown }} */value, 'lastIndex');\n      var hasLastIndexDataProperty = descriptor && hasOwn(descriptor, 'value');\n      if (!hasLastIndexDataProperty) {\n        return false;\n      }\n      try {\n        // eslint-disable-next-line no-extra-parens\n        $exec(value, /** @type {string} */ /** @type {unknown} */badStringifier);\n      } catch (e) {\n        return e === isRegexMarker;\n      }\n    };\n  } else {\n    /** @type {(receiver: ThisParameterType<typeof Object.prototype.toString>, ...args: Parameters<typeof Object.prototype.toString>) => ReturnType<typeof Object.prototype.toString>} */\n    var $toString = callBound('Object.prototype.toString');\n    /** @const @type {'[object RegExp]'} */\n    var regexClass = '[object RegExp]';\n\n    /** @type {import('.')} */\n    fn = function isRegex(value) {\n      // In older browsers, typeof regex incorrectly returns 'function'\n      if (!value || typeof value !== 'object' && typeof value !== 'function') {\n        return false;\n      }\n      return $toString(value) === regexClass;\n    };\n  }\n  module.exports = fn;\n});","lineCount":65,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"callBound"],[4,15,3,13],[4,18,3,16,"require"],[4,25,3,23],[4,26,3,23,"_dependencyMap"],[4,40,3,23],[4,57,3,36],[4,58,3,37],[5,2,4,0],[5,6,4,4,"hasToStringTag"],[5,20,4,18],[5,23,4,21,"require"],[5,30,4,28],[5,31,4,28,"_dependencyMap"],[5,45,4,28],[5,73,4,52],[5,74,4,53],[5,75,4,54],[5,76,4,55],[6,2,5,0],[6,6,5,4,"hasOwn"],[6,12,5,10],[6,15,5,13,"require"],[6,22,5,20],[6,23,5,20,"_dependencyMap"],[6,37,5,20],[6,50,5,29],[6,51,5,30],[7,2,6,0],[7,6,6,4,"gOPD"],[7,10,6,8],[7,13,6,11,"require"],[7,20,6,18],[7,21,6,18,"_dependencyMap"],[7,35,6,18],[7,46,6,25],[7,47,6,26],[9,2,8,0],[10,2,9,0],[10,6,9,4,"fn"],[10,8,9,6],[11,2,11,0],[11,6,11,4,"hasToStringTag"],[11,20,11,18],[11,22,11,20],[12,4,12,1],[13,4,13,1],[13,8,13,5,"$exec"],[13,13,13,10],[13,16,13,13,"callBound"],[13,25,13,22],[13,26,13,23],[13,49,13,46],[13,50,13,47],[14,4,14,1],[15,4,15,1],[15,8,15,5,"isRegexMarker"],[15,21,15,18],[15,24,15,21],[15,25,15,22],[15,26,15,23],[16,4,17,1],[16,8,17,5,"throwRegexMarker"],[16,24,17,21],[16,27,17,24],[16,36,17,24,"throwRegexMarker"],[16,37,17,24],[16,39,17,36],[17,6,18,2],[17,12,18,8,"isRegexMarker"],[17,25,18,21],[18,4,19,1],[18,5,19,2],[19,4,20,1],[20,4,21,1],[20,8,21,5,"badStringifier"],[20,22,21,19],[20,25,21,22],[21,6,22,2,"toString"],[21,14,22,10],[21,16,22,12,"throwRegexMarker"],[21,32,22,28],[22,6,23,2,"valueOf"],[22,13,23,9],[22,15,23,11,"throwRegexMarker"],[23,4,24,1],[23,5,24,2],[24,4,26,1],[24,8,26,5],[24,15,26,12,"Symbol"],[24,21,26,18],[24,22,26,19,"toPrimitive"],[24,33,26,30],[24,38,26,35],[24,46,26,43],[24,48,26,45],[25,6,27,2,"badStringifier"],[25,20,27,16],[25,21,27,17,"Symbol"],[25,27,27,23],[25,28,27,24,"toPrimitive"],[25,39,27,35],[25,40,27,36],[25,43,27,39,"throwRegexMarker"],[25,59,27,55],[26,4,28,1],[28,4,30,1],[29,4,31,1],[30,4,32,1],[31,4,33,1,"fn"],[31,6,33,3],[31,9,33,6],[31,18,33,15,"isRegex"],[31,25,33,22,"isRegex"],[31,26,33,23,"value"],[31,31,33,28],[31,33,33,30],[32,6,34,2],[32,10,34,6],[32,11,34,7,"value"],[32,16,34,12],[32,20,34,16],[32,27,34,23,"value"],[32,32,34,28],[32,37,34,33],[32,45,34,41],[32,47,34,43],[33,8,35,3],[33,15,35,10],[33,20,35,15],[34,6,36,2],[36,6,38,2],[37,6,39,2],[37,10,39,6,"descriptor"],[37,20,39,16],[37,23,39,19],[37,62,39,60,"gOPD"],[37,66,39,64],[37,67,39,66],[37,105,39,106,"value"],[37,110,39,111],[37,112,39,114],[37,123,39,125],[37,124,39,126],[38,6,40,2],[38,10,40,6,"hasLastIndexDataProperty"],[38,34,40,30],[38,37,40,33,"descriptor"],[38,47,40,43],[38,51,40,47,"hasOwn"],[38,57,40,53],[38,58,40,54,"descriptor"],[38,68,40,64],[38,70,40,66],[38,77,40,73],[38,78,40,74],[39,6,41,2],[39,10,41,6],[39,11,41,7,"hasLastIndexDataProperty"],[39,35,41,31],[39,37,41,33],[40,8,42,3],[40,15,42,10],[40,20,42,15],[41,6,43,2],[42,6,45,2],[42,10,45,6],[43,8,46,3],[44,8,47,3,"$exec"],[44,13,47,8],[44,14,47,9,"value"],[44,19,47,14],[44,21,47,16],[44,43,47,39],[44,65,47,63,"badStringifier"],[44,79,47,79],[44,80,47,80],[45,6,48,2],[45,7,48,3],[45,8,48,4],[45,15,48,11,"e"],[45,16,48,12],[45,18,48,14],[46,8,49,3],[46,15,49,10,"e"],[46,16,49,11],[46,21,49,16,"isRegexMarker"],[46,34,49,29],[47,6,50,2],[48,4,51,1],[48,5,51,2],[49,2,52,0],[49,3,52,1],[49,9,52,7],[50,4,53,1],[51,4,54,1],[51,8,54,5,"$toString"],[51,17,54,14],[51,20,54,17,"callBound"],[51,29,54,26],[51,30,54,27],[51,57,54,54],[51,58,54,55],[52,4,55,1],[53,4,56,1],[53,8,56,5,"regexClass"],[53,18,56,15],[53,21,56,18],[53,38,56,35],[55,4,58,1],[56,4,59,1,"fn"],[56,6,59,3],[56,9,59,6],[56,18,59,15,"isRegex"],[56,25,59,22,"isRegex"],[56,26,59,23,"value"],[56,31,59,28],[56,33,59,30],[57,6,60,2],[58,6,61,2],[58,10,61,6],[58,11,61,7,"value"],[58,16,61,12],[58,20,61,17],[58,27,61,24,"value"],[58,32,61,29],[58,37,61,34],[58,45,61,42],[58,49,61,46],[58,56,61,53,"value"],[58,61,61,58],[58,66,61,63],[58,76,61,74],[58,78,61,76],[59,8,62,3],[59,15,62,10],[59,20,62,15],[60,6,63,2],[61,6,65,2],[61,13,65,9,"$toString"],[61,22,65,18],[61,23,65,19,"value"],[61,28,65,24],[61,29,65,25],[61,34,65,30,"regexClass"],[61,44,65,40],[62,4,66,1],[62,5,66,2],[63,2,67,0],[64,2,69,0,"module"],[64,8,69,6],[64,9,69,7,"exports"],[64,16,69,14],[64,19,69,17,"fn"],[64,21,69,19],[65,0,69,20],[65,3]],"functionMap":{"names":["<global>","throwRegexMarker","isRegex"],"mappings":"AAA;wBCgB;EDE;MEc;EFkB;MEQ;EFO"}},"type":"js/module"}]}