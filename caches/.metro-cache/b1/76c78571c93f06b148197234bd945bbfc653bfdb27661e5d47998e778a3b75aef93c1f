{"dependencies":[{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":37,"index":89}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.addMonths = addMonths;\n  exports.default = void 0;\n  var _constructFrom = require(_dependencyMap[0], \"./constructFrom.js\");\n  var _toDate = require(_dependencyMap[1], \"./toDate.js\");\n  /**\n   * The {@link addMonths} function options.\n   */\n\n  /**\n   * @name addMonths\n   * @category Month Helpers\n   * @summary Add the specified number of months to the given date.\n   *\n   * @description\n   * Add the specified number of months to the given date.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to be changed\n   * @param amount - The amount of months to be added.\n   * @param options - The options object\n   *\n   * @returns The new date with the months added\n   *\n   * @example\n   * // Add 5 months to 1 September 2014:\n   * const result = addMonths(new Date(2014, 8, 1), 5)\n   * //=> Sun Feb 01 2015 00:00:00\n   *\n   * // Add one month to 30 January 2023:\n   * const result = addMonths(new Date(2023, 0, 30), 1)\n   * //=> Tue Feb 28 2023 00:00:00\n   */\n  function addMonths(date, amount, options) {\n    var _date = (0, _toDate.toDate)(date, options?.in);\n    if (isNaN(amount)) return (0, _constructFrom.constructFrom)(options?.in || date, NaN);\n    if (!amount) {\n      // If 0 months, no-op to avoid changing times in the hour before end of DST\n      return _date;\n    }\n    var dayOfMonth = _date.getDate();\n\n    // The JS Date object supports date math by accepting out-of-bounds values for\n    // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n    // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n    // want except that dates will wrap around the end of a month, meaning that\n    // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n    // we'll default to the end of the desired month by adding 1 to the desired\n    // month and using a date of 0 to back up one day to the end of the desired\n    // month.\n    var endOfDesiredMonth = (0, _constructFrom.constructFrom)(options?.in || date, _date.getTime());\n    endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n    var daysInMonth = endOfDesiredMonth.getDate();\n    if (dayOfMonth >= daysInMonth) {\n      // If we're already at the end of the month, then this is the correct date\n      // and we're done.\n      return endOfDesiredMonth;\n    } else {\n      // Otherwise, we now know that setting the original day-of-month value won't\n      // cause an overflow, so set the desired day-of-month. Note that we can't\n      // just set the date of `endOfDesiredMonth` because that object may have had\n      // its time changed in the unusual case where where a DST transition was on\n      // the last day of the month and its local time was in the hour skipped or\n      // repeated next to a DST transition.  So we use `date` instead which is\n      // guaranteed to still have the original time.\n      _date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n      return _date;\n    }\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = addMonths;\n});","lineCount":78,"map":[[7,2,1,0],[7,6,1,0,"_constructFrom"],[7,20,1,0],[7,23,1,0,"require"],[7,30,1,0],[7,31,1,0,"_dependencyMap"],[7,45,1,0],[8,2,2,0],[8,6,2,0,"_toDate"],[8,13,2,0],[8,16,2,0,"require"],[8,23,2,0],[8,24,2,0,"_dependencyMap"],[8,38,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,2,34,7],[39,11,34,16,"addMonths"],[39,20,34,25,"addMonths"],[39,21,34,26,"date"],[39,25,34,30],[39,27,34,32,"amount"],[39,33,34,38],[39,35,34,40,"options"],[39,42,34,47],[39,44,34,49],[40,4,35,2],[40,8,35,8,"_date"],[40,13,35,13],[40,16,35,16],[40,20,35,16,"toDate"],[40,34,35,22],[40,36,35,23,"date"],[40,40,35,27],[40,42,35,29,"options"],[40,49,35,36],[40,51,35,38,"in"],[40,53,35,40],[40,54,35,41],[41,4,36,2],[41,8,36,6,"isNaN"],[41,13,36,11],[41,14,36,12,"amount"],[41,20,36,18],[41,21,36,19],[41,23,36,21],[41,30,36,28],[41,34,36,28,"constructFrom"],[41,62,36,41],[41,64,36,42,"options"],[41,71,36,49],[41,73,36,51,"in"],[41,75,36,53],[41,79,36,57,"date"],[41,83,36,61],[41,85,36,63,"NaN"],[41,88,36,66],[41,89,36,67],[42,4,37,2],[42,8,37,6],[42,9,37,7,"amount"],[42,15,37,13],[42,17,37,15],[43,6,38,4],[44,6,39,4],[44,13,39,11,"_date"],[44,18,39,16],[45,4,40,2],[46,4,41,2],[46,8,41,8,"dayOfMonth"],[46,18,41,18],[46,21,41,21,"_date"],[46,26,41,26],[46,27,41,27,"getDate"],[46,34,41,34],[46,35,41,35],[46,36,41,36],[48,4,43,2],[49,4,44,2],[50,4,45,2],[51,4,46,2],[52,4,47,2],[53,4,48,2],[54,4,49,2],[55,4,50,2],[56,4,51,2],[56,8,51,8,"endOfDesiredMonth"],[56,25,51,25],[56,28,51,28],[56,32,51,28,"constructFrom"],[56,60,51,41],[56,62,51,42,"options"],[56,69,51,49],[56,71,51,51,"in"],[56,73,51,53],[56,77,51,57,"date"],[56,81,51,61],[56,83,51,63,"_date"],[56,88,51,68],[56,89,51,69,"getTime"],[56,96,51,76],[56,97,51,77],[56,98,51,78],[56,99,51,79],[57,4,52,2,"endOfDesiredMonth"],[57,21,52,19],[57,22,52,20,"setMonth"],[57,30,52,28],[57,31,52,29,"_date"],[57,36,52,34],[57,37,52,35,"getMonth"],[57,45,52,43],[57,46,52,44],[57,47,52,45],[57,50,52,48,"amount"],[57,56,52,54],[57,59,52,57],[57,60,52,58],[57,62,52,60],[57,63,52,61],[57,64,52,62],[58,4,53,2],[58,8,53,8,"daysInMonth"],[58,19,53,19],[58,22,53,22,"endOfDesiredMonth"],[58,39,53,39],[58,40,53,40,"getDate"],[58,47,53,47],[58,48,53,48],[58,49,53,49],[59,4,54,2],[59,8,54,6,"dayOfMonth"],[59,18,54,16],[59,22,54,20,"daysInMonth"],[59,33,54,31],[59,35,54,33],[60,6,55,4],[61,6,56,4],[62,6,57,4],[62,13,57,11,"endOfDesiredMonth"],[62,30,57,28],[63,4,58,2],[63,5,58,3],[63,11,58,9],[64,6,59,4],[65,6,60,4],[66,6,61,4],[67,6,62,4],[68,6,63,4],[69,6,64,4],[70,6,65,4],[71,6,66,4,"_date"],[71,11,66,9],[71,12,66,10,"setFullYear"],[71,23,66,21],[71,24,67,6,"endOfDesiredMonth"],[71,41,67,23],[71,42,67,24,"getFullYear"],[71,53,67,35],[71,54,67,36],[71,55,67,37],[71,57,68,6,"endOfDesiredMonth"],[71,74,68,23],[71,75,68,24,"getMonth"],[71,83,68,32],[71,84,68,33],[71,85,68,34],[71,87,69,6,"dayOfMonth"],[71,97,70,4],[71,98,70,5],[72,6,71,4],[72,13,71,11,"_date"],[72,18,71,16],[73,4,72,2],[74,2,73,0],[76,2,75,0],[77,2,75,0],[77,6,75,0,"_default"],[77,14,75,0],[77,17,75,0,"exports"],[77,24,75,0],[77,25,75,0,"default"],[77,32,75,0],[77,35,76,15,"addMonths"],[77,44,76,24],[78,0,76,24],[78,3]],"functionMap":{"names":["<global>","addMonths"],"mappings":"AAA;OCiC;CDuC"}},"type":"js/module"}]}