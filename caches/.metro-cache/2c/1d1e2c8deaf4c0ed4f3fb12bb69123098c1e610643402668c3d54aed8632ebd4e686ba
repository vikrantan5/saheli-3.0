{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":74,"index":131}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"]}},{"name":"./ExpoWebBrowser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":132},"end":{"line":3,"column":50,"index":182}}],"key":"OZkL6dn5GThy2fR1W+98Qlxlxh4=","exportNames":["*"]}},{"name":"./WebBrowser.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":183},"end":{"line":4,"column":88,"index":271}}],"key":"29Oh91VcmrXUhNZnDncgfxSU3bQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"WebBrowserPresentationStyle\", {\n    enumerable: true,\n    get: function () {\n      return _WebBrowser.WebBrowserPresentationStyle;\n    }\n  });\n  Object.defineProperty(exports, \"WebBrowserResultType\", {\n    enumerable: true,\n    get: function () {\n      return _WebBrowser.WebBrowserResultType;\n    }\n  });\n  exports.coolDownAsync = coolDownAsync;\n  exports.dismissAuthSession = dismissAuthSession;\n  exports.dismissBrowser = dismissBrowser;\n  exports.getCustomTabsSupportingBrowsersAsync = getCustomTabsSupportingBrowsersAsync;\n  exports.mayInitWithUrlAsync = mayInitWithUrlAsync;\n  exports.maybeCompleteAuthSession = maybeCompleteAuthSession;\n  exports.openAuthSessionAsync = openAuthSessionAsync;\n  exports.openBrowserAsync = openBrowserAsync;\n  exports.warmUpAsync = warmUpAsync;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _reactNative = require(_dependencyMap[3], \"react-native\");\n  var _ExpoWebBrowser = _interopRequireDefault(require(_dependencyMap[4], \"./ExpoWebBrowser\"));\n  var _WebBrowser = require(_dependencyMap[5], \"./WebBrowser.types\");\n  var emptyCustomTabsPackages = {\n    defaultBrowserPackage: undefined,\n    preferredBrowserPackage: undefined,\n    browserPackages: [],\n    servicePackages: []\n  };\n  // @needsAudit\n  /**\n   * Returns a list of applications package names supporting Custom Tabs, Custom Tabs\n   * service, user chosen and preferred one. This may not be fully reliable, since it uses\n   * `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be\n   * present in browserPackages list once another browser is set to default.)\n   *\n   * @return The promise which fulfils with [`WebBrowserCustomTabsResults`](#webbrowsercustomtabsresults) object.\n   * @platform android\n   */\n  function getCustomTabsSupportingBrowsersAsync() {\n    return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * This method calls `warmUp` method on [CustomTabsClient](https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long))\n   * for specified package.\n   *\n   * @param browserPackage Package of browser to be warmed up. If not set, preferred browser will be warmed.\n   *\n   * @return A promise which fulfils with `WebBrowserWarmUpResult` object.\n   * @platform android\n   */\n  function _getCustomTabsSupportingBrowsersAsync() {\n    _getCustomTabsSupportingBrowsersAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n      }\n      if (_reactNative.Platform.OS !== 'android') {\n        return emptyCustomTabsPackages;\n      } else {\n        return yield _ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync();\n      }\n    });\n    return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n  }\n  function warmUpAsync(_x) {\n    return _warmUpAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * This method initiates (if needed) [CustomTabsSession](https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#maylaunchurl)\n   * and calls its `mayLaunchUrl` method for browser specified by the package.\n   *\n   * @param url The url of page that is likely to be loaded first when opening browser.\n   * @param browserPackage Package of browser to be informed. If not set, preferred\n   * browser will be used.\n   *\n   * @return A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.\n   * @platform android\n   */\n  function _warmUpAsync() {\n    _warmUpAsync = (0, _asyncToGenerator2.default)(function* (browserPackage) {\n      if (!_ExpoWebBrowser.default.warmUpAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'warmUpAsync');\n      }\n      if (_reactNative.Platform.OS !== 'android') {\n        return {};\n      } else {\n        return yield _ExpoWebBrowser.default.warmUpAsync(browserPackage);\n      }\n    });\n    return _warmUpAsync.apply(this, arguments);\n  }\n  function mayInitWithUrlAsync(_x2, _x3) {\n    return _mayInitWithUrlAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * This methods removes all bindings to services created by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage)\n   * or [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage). You should call\n   * this method once you don't need them to avoid potential memory leaks. However, those binding\n   * would be cleared once your application is destroyed, which might be sufficient in most cases.\n   *\n   * @param browserPackage Package of browser to be cooled. If not set, preferred browser will be used.\n   *\n   * @return The promise which fulfils with ` WebBrowserCoolDownResult` when cooling is performed, or\n   * an empty object when there was no connection to be dismissed.\n   * @platform android\n   */\n  function _mayInitWithUrlAsync() {\n    _mayInitWithUrlAsync = (0, _asyncToGenerator2.default)(function* (url, browserPackage) {\n      if (!_ExpoWebBrowser.default.mayInitWithUrlAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n      }\n      if (_reactNative.Platform.OS !== 'android') {\n        return {};\n      } else {\n        return yield _ExpoWebBrowser.default.mayInitWithUrlAsync(url, browserPackage);\n      }\n    });\n    return _mayInitWithUrlAsync.apply(this, arguments);\n  }\n  function coolDownAsync(_x4) {\n    return _coolDownAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Opens the url with Safari in a modal on iOS using [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller),\n   * and Chrome in a new [custom tab](https://developer.chrome.com/multidevice/android/customtabs)\n   * on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need\n   * this, use [`openAuthSessionAsync`](#webbrowseropenauthsessionasyncurl-redirecturl-options).\n   *\n   * @param url The url to open in the web browser.\n   * @param browserParams A dictionary of key-value pairs.\n   *\n   * @return The promise behaves differently based on the platform.\n   * On Android promise resolves with `{ type: 'opened' }` if we were able to open browser.\n   * On iOS:\n   * - If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.\n   * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise resolves with `{ type: 'dismiss' }`.\n   */\n  function _coolDownAsync() {\n    _coolDownAsync = (0, _asyncToGenerator2.default)(function* (browserPackage) {\n      if (!_ExpoWebBrowser.default.coolDownAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'coolDownAsync');\n      }\n      if (_reactNative.Platform.OS !== 'android') {\n        return {};\n      } else {\n        return yield _ExpoWebBrowser.default.coolDownAsync(browserPackage);\n      }\n    });\n    return _coolDownAsync.apply(this, arguments);\n  }\n  function openBrowserAsync(_x5) {\n    return _openBrowserAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Dismisses the presented web browser.\n   *\n   * @return The promise that resolves with `{ type: 'dismiss' }` on the successful attempt or throws an error if dismiss functionality is not available.\n   * @platform ios\n   */\n  function _openBrowserAsync() {\n    _openBrowserAsync = (0, _asyncToGenerator2.default)(function* (url) {\n      var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!_ExpoWebBrowser.default.openBrowserAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'openBrowserAsync');\n      }\n      return yield _ExpoWebBrowser.default.openBrowserAsync(url, _processOptions(browserParams));\n    });\n    return _openBrowserAsync.apply(this, arguments);\n  }\n  function dismissBrowser() {\n    return _ExpoWebBrowser.default.dismissBrowser?.();\n  }\n  // @needsAudit\n  /**\n   * # On Android:\n   * This will be done using a \"custom Chrome tabs\" browser, [AppState](https://reactnative.dev/docs/appstate),\n   * and [Linking](./linking/) APIs.\n   *\n   * # On iOS:\n   * Opens the url with Safari in a modal using `ASWebAuthenticationSession`. The user will be asked\n   * whether to allow the app to authenticate using the given url.\n   * To handle redirection back to the mobile application, the redirect URI set in the authentication server\n   * has to use the protocol provided as the scheme in **app.json** [`expo.scheme`](./../config/app/#scheme).\n   * For example, `demo://` not `https://` protocol.\n   * Using `Linking.addEventListener` is not needed and can have side effects.\n   *\n   * # On web:\n   * > This API can only be used in a secure environment (localhost/https).\n   * to test this. Otherwise, an error with code [`ERR_WEB_BROWSER_CRYPTO`](#err_web_browser_crypto) will be thrown.\n   * This will use the browser's [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) API.\n   * - _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.\n   * - _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.\n   *\n   * How this works on web:\n   * - A crypto state will be created for verifying the redirect.\n   *   - This means you need to run with `npx expo start --https`\n   * - The state will be added to the window's `localstorage`. This ensures that auth cannot complete\n   *   unless it's done from a page running with the same origin as it was started.\n   *   Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession`\n   *   must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different\n   *   website, or even a different host like `https://128.0.0.*:19006` for example will not work.\n   * - A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window\n   *   has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.\n   *\n   * > On mobile web, Chrome and Safari will block any call to [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n   * which takes too long to fire after a user interaction. This method must be invoked immediately\n   * after a user interaction. If the event is blocked, an error with code [`ERR_WEB_BROWSER_BLOCKED`](#err_web_browser_blocked) will be thrown.\n   *\n   * @param url The url to open in the web browser. This should be a login page.\n   * @param redirectUrl _Optional_ - The url to deep link back into your app.\n   * On web, this defaults to the output of [`Linking.createURL(\"\")`](./linking/#linkingcreateurlpath-namedparameters).\n   * @param options _Optional_ - An object extending the [`WebBrowserOpenOptions`](#webbrowseropenoptions).\n   * If there is no native AuthSession implementation available (which is the case on Android)\n   * these params will be used in the browser polyfill. If there is a native AuthSession implementation,\n   * these params will be ignored.\n   *\n   * @return\n   * - If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.\n   * - If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.\n   * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser),\n   * the Promise fulfills with `{ type: 'dismiss' }` object.\n   */\n  function openAuthSessionAsync(_x6, _x7) {\n    return _openAuthSessionAsync.apply(this, arguments);\n  }\n  /**\n   * Dismisses the current authentication session. On web, it will close the popup window associated with auth process.\n   *\n   * @return The `void` on the successful attempt or throws an error if dismiss functionality is not available.\n   *\n   * @platform ios\n   * @platform web\n   */\n  function _openAuthSessionAsync() {\n    _openAuthSessionAsync = (0, _asyncToGenerator2.default)(function* (url, redirectUrl) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (_authSessionIsNativelySupported()) {\n        if (!_ExpoWebBrowser.default.openAuthSessionAsync) {\n          throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n        }\n        if (['ios', 'web'].includes(_reactNative.Platform.OS)) {\n          return _ExpoWebBrowser.default.openAuthSessionAsync(url, redirectUrl, _processOptions(options));\n        }\n        return _ExpoWebBrowser.default.openAuthSessionAsync(url, redirectUrl);\n      } else {\n        return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n      }\n    });\n    return _openAuthSessionAsync.apply(this, arguments);\n  }\n  function dismissAuthSession() {\n    if (_authSessionIsNativelySupported()) {\n      if (!_ExpoWebBrowser.default.dismissAuthSession) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissAuthSession');\n      }\n      _ExpoWebBrowser.default.dismissAuthSession();\n    } else {\n      if (!_ExpoWebBrowser.default.dismissBrowser) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissBrowser');\n      }\n      _ExpoWebBrowser.default.dismissBrowser();\n    }\n  }\n  // @needsAudit\n  /**\n   * Possibly completes an authentication session on web in a window popup. The method\n   * should be invoked on the page that the window redirects to.\n   *\n   * @param options\n   *\n   * @return Returns an object with message about why the redirect failed or succeeded:\n   *\n   * If `type` is set to `failed`, the reason depends on the message:\n   * - `Not supported on this platform`: If the platform doesn't support this method (Android, iOS).\n   * - `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR\n   *   or node environment.\n   * - `No auth session is currently in progress`: (the cached state wasn't found in local storage).\n   *   This can happen if the window redirects to an origin (website) that is different to the initial\n   *   website origin. If this happens in development, it may be because the auth started on localhost\n   *   and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl`\n   *   and `returnUrl`.\n   * - `Current URL \"<URL>\" and original redirect URL \"<URL>\" do not match`: This can occur when the\n   *   redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test\n   *   in development by passing `{ skipRedirectCheck: true }` to the function.\n   *\n   * If `type` is set to `success`, the parent window will attempt to close the child window immediately.\n   *\n   * If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was\n   * reloaded before the auth was completed. In this case you'll need to close the child window manually.\n   *\n   * @platform web\n   */\n  function maybeCompleteAuthSession() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (_ExpoWebBrowser.default.maybeCompleteAuthSession) {\n      return _ExpoWebBrowser.default.maybeCompleteAuthSession(options);\n    }\n    return {\n      type: 'failed',\n      message: 'Not supported on this platform'\n    };\n  }\n  function _processOptions(options) {\n    return {\n      ...options,\n      controlsColor: (0, _reactNative.processColor)(options.controlsColor),\n      toolbarColor: (0, _reactNative.processColor)(options.toolbarColor),\n      secondaryToolbarColor: (0, _reactNative.processColor)(options.secondaryToolbarColor)\n    };\n  }\n  /* Android polyfill for ASWebAuthenticationSession flow */\n  function _authSessionIsNativelySupported() {\n    return _reactNative.Platform.OS !== 'android';\n  }\n  var _redirectSubscription = null;\n  /*\n   * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n   * it with AppState\n   */\n  // Store the `resolve` function from a Promise to fire when the AppState\n  // returns to active\n  var _onWebBrowserCloseAndroid = null;\n  // If the initial AppState.currentState is null, we assume that the first call to\n  // AppState#change event is not actually triggered by a real change,\n  // is triggered instead by the bridge capturing the current state\n  // (https://reactnative.dev/docs/appstate#basic-usage)\n  var _isAppStateAvailable = _reactNative.AppState.currentState !== null;\n  function _onAppStateChangeAndroid(state) {\n    if (!_isAppStateAvailable) {\n      _isAppStateAvailable = true;\n      return;\n    }\n    if (state === 'active' && _onWebBrowserCloseAndroid) {\n      _onWebBrowserCloseAndroid();\n    }\n  }\n  function _openBrowserAndWaitAndroidAsync(_x8) {\n    return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n  }\n  function _openBrowserAndWaitAndroidAsync2() {\n    _openBrowserAndWaitAndroidAsync2 = (0, _asyncToGenerator2.default)(function* (startUrl) {\n      var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var appStateChangedToActive = new Promise(resolve => {\n        _onWebBrowserCloseAndroid = resolve;\n      });\n      var stateChangeSubscription = _reactNative.AppState.addEventListener('change', _onAppStateChangeAndroid);\n      var result = {\n        type: _WebBrowser.WebBrowserResultType.CANCEL\n      };\n      var type = null;\n      try {\n        var _yield$openBrowserAsy = yield openBrowserAsync(startUrl, browserParams);\n        type = _yield$openBrowserAsy.type;\n      } catch (e) {\n        stateChangeSubscription.remove();\n        _onWebBrowserCloseAndroid = null;\n        throw e;\n      }\n      if (type === 'opened') {\n        yield appStateChangedToActive;\n        result = {\n          type: _WebBrowser.WebBrowserResultType.DISMISS\n        };\n      }\n      stateChangeSubscription.remove();\n      _onWebBrowserCloseAndroid = null;\n      return result;\n    });\n    return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n  }\n  function _openAuthSessionPolyfillAsync(_x9, _x0) {\n    return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n  }\n  function _openAuthSessionPolyfillAsync2() {\n    _openAuthSessionPolyfillAsync2 = (0, _asyncToGenerator2.default)(function* (startUrl, returnUrl) {\n      var browserParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (_redirectSubscription) {\n        throw new Error(`The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`);\n      }\n      if (_onWebBrowserCloseAndroid) {\n        throw new Error(`WebBrowser is already open, only one can be open at a time`);\n      }\n      try {\n        if (_reactNative.Platform.OS === 'android') {\n          return yield Promise.race([_openBrowserAndWaitAndroidAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n        } else {\n          return yield Promise.race([openBrowserAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n        }\n      } finally {\n        // We can't dismiss the browser on Android, only call this when it's available.\n        // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n        if (_ExpoWebBrowser.default.dismissBrowser) {\n          _ExpoWebBrowser.default.dismissBrowser();\n        }\n        _stopWaitingForRedirect();\n      }\n    });\n    return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n  }\n  function _stopWaitingForRedirect() {\n    if (!_redirectSubscription) {\n      throw new Error(`The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`);\n    }\n    _redirectSubscription.remove();\n    _redirectSubscription = null;\n  }\n  function _waitForRedirectAsync(returnUrl) {\n    // Note that this Promise never resolves when `returnUrl` is nullish\n    return new Promise(resolve => {\n      var redirectHandler = event => {\n        if (returnUrl && event.url.startsWith(returnUrl)) {\n          resolve({\n            url: event.url,\n            type: 'success'\n          });\n        }\n      };\n      _redirectSubscription = _reactNative.Linking.addEventListener('url', redirectHandler);\n    });\n  }\n});","lineCount":429,"map":[[28,2,1,0],[28,6,1,0,"_expoModulesCore"],[28,22,1,0],[28,25,1,0,"require"],[28,32,1,0],[28,33,1,0,"_dependencyMap"],[28,47,1,0],[29,2,2,0],[29,6,2,0,"_reactNative"],[29,18,2,0],[29,21,2,0,"require"],[29,28,2,0],[29,29,2,0,"_dependencyMap"],[29,43,2,0],[30,2,3,0],[30,6,3,0,"_ExpoWebBrowser"],[30,21,3,0],[30,24,3,0,"_interopRequireDefault"],[30,46,3,0],[30,47,3,0,"require"],[30,54,3,0],[30,55,3,0,"_dependencyMap"],[30,69,3,0],[31,2,4,0],[31,6,4,0,"_WebBrowser"],[31,17,4,0],[31,20,4,0,"require"],[31,27,4,0],[31,28,4,0,"_dependencyMap"],[31,42,4,0],[32,2,6,0],[32,6,6,6,"emptyCustomTabsPackages"],[32,29,6,29],[32,32,6,32],[33,4,7,4,"defaultBrowserPackage"],[33,25,7,25],[33,27,7,27,"undefined"],[33,36,7,36],[34,4,8,4,"preferredBrowserPackage"],[34,27,8,27],[34,29,8,29,"undefined"],[34,38,8,38],[35,4,9,4,"browserPackages"],[35,19,9,19],[35,21,9,21],[35,23,9,23],[36,4,10,4,"servicePackages"],[36,19,10,19],[36,21,10,21],[37,2,11,0],[37,3,11,1],[38,2,12,0],[39,2,13,0],[40,0,14,0],[41,0,15,0],[42,0,16,0],[43,0,17,0],[44,0,18,0],[45,0,19,0],[46,0,20,0],[47,0,21,0],[48,2,13,0],[48,11,22,22,"getCustomTabsSupportingBrowsersAsync"],[48,47,22,58,"getCustomTabsSupportingBrowsersAsync"],[48,48,22,58],[49,4,22,58],[49,11,22,58,"_getCustomTabsSupportingBrowsersAsync"],[49,48,22,58],[49,49,22,58,"apply"],[49,54,22,58],[49,61,22,58,"arguments"],[49,70,22,58],[50,2,22,58],[50,4,33,0],[51,2,34,0],[52,0,35,0],[53,0,36,0],[54,0,37,0],[55,0,38,0],[56,0,39,0],[57,0,40,0],[58,0,41,0],[59,0,42,0],[60,2,34,0],[60,11,34,0,"_getCustomTabsSupportingBrowsersAsync"],[60,49,34,0],[61,4,34,0,"_getCustomTabsSupportingBrowsersAsync"],[61,41,34,0],[61,48,34,0,"_asyncToGenerator2"],[61,66,34,0],[61,67,34,0,"default"],[61,74,34,0],[61,76,22,7],[61,89,22,61],[62,6,23,4],[62,10,23,8],[62,11,23,9,"ExponentWebBrowser"],[62,34,23,27],[62,35,23,28,"getCustomTabsSupportingBrowsersAsync"],[62,71,23,64],[62,73,23,66],[63,8,24,8],[63,14,24,14],[63,18,24,18,"UnavailabilityError"],[63,54,24,37],[63,55,24,38],[63,67,24,50],[63,69,24,52],[63,107,24,90],[63,108,24,91],[64,6,25,4],[65,6,26,4],[65,10,26,8,"Platform"],[65,31,26,16],[65,32,26,17,"OS"],[65,34,26,19],[65,39,26,24],[65,48,26,33],[65,50,26,35],[66,8,27,8],[66,15,27,15,"emptyCustomTabsPackages"],[66,38,27,38],[67,6,28,4],[67,7,28,5],[67,13,29,9],[68,8,30,8],[68,21,30,21,"ExponentWebBrowser"],[68,44,30,39],[68,45,30,40,"getCustomTabsSupportingBrowsersAsync"],[68,81,30,76],[68,82,30,77],[68,83,30,78],[69,6,31,4],[70,4,32,0],[70,5,32,1],[71,4,32,1],[71,11,32,1,"_getCustomTabsSupportingBrowsersAsync"],[71,48,32,1],[71,49,32,1,"apply"],[71,54,32,1],[71,61,32,1,"arguments"],[71,70,32,1],[72,2,32,1],[73,2,32,1],[73,11,43,22,"warmUpAsync"],[73,22,43,33,"warmUpAsync"],[73,23,43,33,"_x"],[73,25,43,33],[74,4,43,33],[74,11,43,33,"_warmUpAsync"],[74,23,43,33],[74,24,43,33,"apply"],[74,29,43,33],[74,36,43,33,"arguments"],[74,45,43,33],[75,2,43,33],[75,4,54,0],[76,2,55,0],[77,0,56,0],[78,0,57,0],[79,0,58,0],[80,0,59,0],[81,0,60,0],[82,0,61,0],[83,0,62,0],[84,0,63,0],[85,0,64,0],[86,0,65,0],[87,2,55,0],[87,11,55,0,"_warmUpAsync"],[87,24,55,0],[88,4,55,0,"_warmUpAsync"],[88,16,55,0],[88,23,55,0,"_asyncToGenerator2"],[88,41,55,0],[88,42,55,0,"default"],[88,49,55,0],[88,51,43,7],[88,62,43,34,"browserPackage"],[88,76,43,48],[88,78,43,50],[89,6,44,4],[89,10,44,8],[89,11,44,9,"ExponentWebBrowser"],[89,34,44,27],[89,35,44,28,"warmUpAsync"],[89,46,44,39],[89,48,44,41],[90,8,45,8],[90,14,45,14],[90,18,45,18,"UnavailabilityError"],[90,54,45,37],[90,55,45,38],[90,67,45,50],[90,69,45,52],[90,82,45,65],[90,83,45,66],[91,6,46,4],[92,6,47,4],[92,10,47,8,"Platform"],[92,31,47,16],[92,32,47,17,"OS"],[92,34,47,19],[92,39,47,24],[92,48,47,33],[92,50,47,35],[93,8,48,8],[93,15,48,15],[93,16,48,16],[93,17,48,17],[94,6,49,4],[94,7,49,5],[94,13,50,9],[95,8,51,8],[95,21,51,21,"ExponentWebBrowser"],[95,44,51,39],[95,45,51,40,"warmUpAsync"],[95,56,51,51],[95,57,51,52,"browserPackage"],[95,71,51,66],[95,72,51,67],[96,6,52,4],[97,4,53,0],[97,5,53,1],[98,4,53,1],[98,11,53,1,"_warmUpAsync"],[98,23,53,1],[98,24,53,1,"apply"],[98,29,53,1],[98,36,53,1,"arguments"],[98,45,53,1],[99,2,53,1],[100,2,53,1],[100,11,66,22,"mayInitWithUrlAsync"],[100,30,66,41,"mayInitWithUrlAsync"],[100,31,66,41,"_x2"],[100,34,66,41],[100,36,66,41,"_x3"],[100,39,66,41],[101,4,66,41],[101,11,66,41,"_mayInitWithUrlAsync"],[101,31,66,41],[101,32,66,41,"apply"],[101,37,66,41],[101,44,66,41,"arguments"],[101,53,66,41],[102,2,66,41],[102,4,77,0],[103,2,78,0],[104,0,79,0],[105,0,80,0],[106,0,81,0],[107,0,82,0],[108,0,83,0],[109,0,84,0],[110,0,85,0],[111,0,86,0],[112,0,87,0],[113,0,88,0],[114,0,89,0],[115,2,78,0],[115,11,78,0,"_mayInitWithUrlAsync"],[115,32,78,0],[116,4,78,0,"_mayInitWithUrlAsync"],[116,24,78,0],[116,31,78,0,"_asyncToGenerator2"],[116,49,78,0],[116,50,78,0,"default"],[116,57,78,0],[116,59,66,7],[116,70,66,42,"url"],[116,73,66,45],[116,75,66,47,"browserPackage"],[116,89,66,61],[116,91,66,63],[117,6,67,4],[117,10,67,8],[117,11,67,9,"ExponentWebBrowser"],[117,34,67,27],[117,35,67,28,"mayInitWithUrlAsync"],[117,54,67,47],[117,56,67,49],[118,8,68,8],[118,14,68,14],[118,18,68,18,"UnavailabilityError"],[118,54,68,37],[118,55,68,38],[118,67,68,50],[118,69,68,52],[118,90,68,73],[118,91,68,74],[119,6,69,4],[120,6,70,4],[120,10,70,8,"Platform"],[120,31,70,16],[120,32,70,17,"OS"],[120,34,70,19],[120,39,70,24],[120,48,70,33],[120,50,70,35],[121,8,71,8],[121,15,71,15],[121,16,71,16],[121,17,71,17],[122,6,72,4],[122,7,72,5],[122,13,73,9],[123,8,74,8],[123,21,74,21,"ExponentWebBrowser"],[123,44,74,39],[123,45,74,40,"mayInitWithUrlAsync"],[123,64,74,59],[123,65,74,60,"url"],[123,68,74,63],[123,70,74,65,"browserPackage"],[123,84,74,79],[123,85,74,80],[124,6,75,4],[125,4,76,0],[125,5,76,1],[126,4,76,1],[126,11,76,1,"_mayInitWithUrlAsync"],[126,31,76,1],[126,32,76,1,"apply"],[126,37,76,1],[126,44,76,1,"arguments"],[126,53,76,1],[127,2,76,1],[128,2,76,1],[128,11,90,22,"coolDownAsync"],[128,24,90,35,"coolDownAsync"],[128,25,90,35,"_x4"],[128,28,90,35],[129,4,90,35],[129,11,90,35,"_coolDownAsync"],[129,25,90,35],[129,26,90,35,"apply"],[129,31,90,35],[129,38,90,35,"arguments"],[129,47,90,35],[130,2,90,35],[130,4,101,0],[131,2,102,0],[132,0,103,0],[133,0,104,0],[134,0,105,0],[135,0,106,0],[136,0,107,0],[137,0,108,0],[138,0,109,0],[139,0,110,0],[140,0,111,0],[141,0,112,0],[142,0,113,0],[143,0,114,0],[144,0,115,0],[145,0,116,0],[146,2,102,0],[146,11,102,0,"_coolDownAsync"],[146,26,102,0],[147,4,102,0,"_coolDownAsync"],[147,18,102,0],[147,25,102,0,"_asyncToGenerator2"],[147,43,102,0],[147,44,102,0,"default"],[147,51,102,0],[147,53,90,7],[147,64,90,36,"browserPackage"],[147,78,90,50],[147,80,90,52],[148,6,91,4],[148,10,91,8],[148,11,91,9,"ExponentWebBrowser"],[148,34,91,27],[148,35,91,28,"coolDownAsync"],[148,48,91,41],[148,50,91,43],[149,8,92,8],[149,14,92,14],[149,18,92,18,"UnavailabilityError"],[149,54,92,37],[149,55,92,38],[149,67,92,50],[149,69,92,52],[149,84,92,67],[149,85,92,68],[150,6,93,4],[151,6,94,4],[151,10,94,8,"Platform"],[151,31,94,16],[151,32,94,17,"OS"],[151,34,94,19],[151,39,94,24],[151,48,94,33],[151,50,94,35],[152,8,95,8],[152,15,95,15],[152,16,95,16],[152,17,95,17],[153,6,96,4],[153,7,96,5],[153,13,97,9],[154,8,98,8],[154,21,98,21,"ExponentWebBrowser"],[154,44,98,39],[154,45,98,40,"coolDownAsync"],[154,58,98,53],[154,59,98,54,"browserPackage"],[154,73,98,68],[154,74,98,69],[155,6,99,4],[156,4,100,0],[156,5,100,1],[157,4,100,1],[157,11,100,1,"_coolDownAsync"],[157,25,100,1],[157,26,100,1,"apply"],[157,31,100,1],[157,38,100,1,"arguments"],[157,47,100,1],[158,2,100,1],[159,2,100,1],[159,11,117,22,"openBrowserAsync"],[159,27,117,38,"openBrowserAsync"],[159,28,117,38,"_x5"],[159,31,117,38],[160,4,117,38],[160,11,117,38,"_openBrowserAsync"],[160,28,117,38],[160,29,117,38,"apply"],[160,34,117,38],[160,41,117,38,"arguments"],[160,50,117,38],[161,2,117,38],[161,4,123,0],[162,2,124,0],[163,0,125,0],[164,0,126,0],[165,0,127,0],[166,0,128,0],[167,0,129,0],[168,2,124,0],[168,11,124,0,"_openBrowserAsync"],[168,29,124,0],[169,4,124,0,"_openBrowserAsync"],[169,21,124,0],[169,28,124,0,"_asyncToGenerator2"],[169,46,124,0],[169,47,124,0,"default"],[169,54,124,0],[169,56,117,7],[169,67,117,39,"url"],[169,70,117,42],[169,72,117,64],[170,6,117,64],[170,10,117,44,"browserParams"],[170,23,117,57],[170,26,117,57,"arguments"],[170,35,117,57],[170,36,117,57,"length"],[170,42,117,57],[170,50,117,57,"arguments"],[170,59,117,57],[170,67,117,57,"undefined"],[170,76,117,57],[170,79,117,57,"arguments"],[170,88,117,57],[170,94,117,60],[170,95,117,61],[170,96,117,62],[171,6,118,4],[171,10,118,8],[171,11,118,9,"ExponentWebBrowser"],[171,34,118,27],[171,35,118,28,"openBrowserAsync"],[171,51,118,44],[171,53,118,46],[172,8,119,8],[172,14,119,14],[172,18,119,18,"UnavailabilityError"],[172,54,119,37],[172,55,119,38],[172,67,119,50],[172,69,119,52],[172,87,119,70],[172,88,119,71],[173,6,120,4],[174,6,121,4],[174,19,121,17,"ExponentWebBrowser"],[174,42,121,35],[174,43,121,36,"openBrowserAsync"],[174,59,121,52],[174,60,121,53,"url"],[174,63,121,56],[174,65,121,58,"_processOptions"],[174,80,121,73],[174,81,121,74,"browserParams"],[174,94,121,87],[174,95,121,88],[174,96,121,89],[175,4,122,0],[175,5,122,1],[176,4,122,1],[176,11,122,1,"_openBrowserAsync"],[176,28,122,1],[176,29,122,1,"apply"],[176,34,122,1],[176,41,122,1,"arguments"],[176,50,122,1],[177,2,122,1],[178,2,130,7],[178,11,130,16,"dismissBrowser"],[178,25,130,30,"dismissBrowser"],[178,26,130,30],[178,28,130,33],[179,4,131,4],[179,11,131,11,"ExponentWebBrowser"],[179,34,131,29],[179,35,131,30,"dismissBrowser"],[179,49,131,44],[179,52,131,47],[179,53,131,48],[180,2,132,0],[181,2,133,0],[182,2,134,0],[183,0,135,0],[184,0,136,0],[185,0,137,0],[186,0,138,0],[187,0,139,0],[188,0,140,0],[189,0,141,0],[190,0,142,0],[191,0,143,0],[192,0,144,0],[193,0,145,0],[194,0,146,0],[195,0,147,0],[196,0,148,0],[197,0,149,0],[198,0,150,0],[199,0,151,0],[200,0,152,0],[201,0,153,0],[202,0,154,0],[203,0,155,0],[204,0,156,0],[205,0,157,0],[206,0,158,0],[207,0,159,0],[208,0,160,0],[209,0,161,0],[210,0,162,0],[211,0,163,0],[212,0,164,0],[213,0,165,0],[214,0,166,0],[215,0,167,0],[216,0,168,0],[217,0,169,0],[218,0,170,0],[219,0,171,0],[220,0,172,0],[221,0,173,0],[222,0,174,0],[223,0,175,0],[224,0,176,0],[225,0,177,0],[226,0,178,0],[227,0,179,0],[228,0,180,0],[229,0,181,0],[230,0,182,0],[231,2,134,0],[231,11,183,22,"openAuthSessionAsync"],[231,31,183,42,"openAuthSessionAsync"],[231,32,183,42,"_x6"],[231,35,183,42],[231,37,183,42,"_x7"],[231,40,183,42],[232,4,183,42],[232,11,183,42,"_openAuthSessionAsync"],[232,32,183,42],[232,33,183,42,"apply"],[232,38,183,42],[232,45,183,42,"arguments"],[232,54,183,42],[233,2,183,42],[234,2,197,0],[235,0,198,0],[236,0,199,0],[237,0,200,0],[238,0,201,0],[239,0,202,0],[240,0,203,0],[241,0,204,0],[242,2,197,0],[242,11,197,0,"_openAuthSessionAsync"],[242,33,197,0],[243,4,197,0,"_openAuthSessionAsync"],[243,25,197,0],[243,32,197,0,"_asyncToGenerator2"],[243,50,197,0],[243,51,197,0,"default"],[243,58,197,0],[243,60,183,7],[243,71,183,43,"url"],[243,74,183,46],[243,76,183,48,"redirectUrl"],[243,87,183,59],[243,89,183,75],[244,6,183,75],[244,10,183,61,"options"],[244,17,183,68],[244,20,183,68,"arguments"],[244,29,183,68],[244,30,183,68,"length"],[244,36,183,68],[244,44,183,68,"arguments"],[244,53,183,68],[244,61,183,68,"undefined"],[244,70,183,68],[244,73,183,68,"arguments"],[244,82,183,68],[244,88,183,71],[244,89,183,72],[244,90,183,73],[245,6,184,4],[245,10,184,8,"_authSessionIsNativelySupported"],[245,41,184,39],[245,42,184,40],[245,43,184,41],[245,45,184,43],[246,8,185,8],[246,12,185,12],[246,13,185,13,"ExponentWebBrowser"],[246,36,185,31],[246,37,185,32,"openAuthSessionAsync"],[246,57,185,52],[246,59,185,54],[247,10,186,12],[247,16,186,18],[247,20,186,22,"UnavailabilityError"],[247,56,186,41],[247,57,186,42],[247,69,186,54],[247,71,186,56],[247,93,186,78],[247,94,186,79],[248,8,187,8],[249,8,188,8],[249,12,188,12],[249,13,188,13],[249,18,188,18],[249,20,188,20],[249,25,188,25],[249,26,188,26],[249,27,188,27,"includes"],[249,35,188,35],[249,36,188,36,"Platform"],[249,57,188,44],[249,58,188,45,"OS"],[249,60,188,47],[249,61,188,48],[249,63,188,50],[250,10,189,12],[250,17,189,19,"ExponentWebBrowser"],[250,40,189,37],[250,41,189,38,"openAuthSessionAsync"],[250,61,189,58],[250,62,189,59,"url"],[250,65,189,62],[250,67,189,64,"redirectUrl"],[250,78,189,75],[250,80,189,77,"_processOptions"],[250,95,189,92],[250,96,189,93,"options"],[250,103,189,100],[250,104,189,101],[250,105,189,102],[251,8,190,8],[252,8,191,8],[252,15,191,15,"ExponentWebBrowser"],[252,38,191,33],[252,39,191,34,"openAuthSessionAsync"],[252,59,191,54],[252,60,191,55,"url"],[252,63,191,58],[252,65,191,60,"redirectUrl"],[252,76,191,71],[252,77,191,72],[253,6,192,4],[253,7,192,5],[253,13,193,9],[254,8,194,8],[254,15,194,15,"_openAuthSessionPolyfillAsync"],[254,44,194,44],[254,45,194,45,"url"],[254,48,194,48],[254,50,194,50,"redirectUrl"],[254,61,194,61],[254,63,194,63,"options"],[254,70,194,70],[254,71,194,71],[255,6,195,4],[256,4,196,0],[256,5,196,1],[257,4,196,1],[257,11,196,1,"_openAuthSessionAsync"],[257,32,196,1],[257,33,196,1,"apply"],[257,38,196,1],[257,45,196,1,"arguments"],[257,54,196,1],[258,2,196,1],[259,2,205,7],[259,11,205,16,"dismissAuthSession"],[259,29,205,34,"dismissAuthSession"],[259,30,205,34],[259,32,205,37],[260,4,206,4],[260,8,206,8,"_authSessionIsNativelySupported"],[260,39,206,39],[260,40,206,40],[260,41,206,41],[260,43,206,43],[261,6,207,8],[261,10,207,12],[261,11,207,13,"ExponentWebBrowser"],[261,34,207,31],[261,35,207,32,"dismissAuthSession"],[261,53,207,50],[261,55,207,52],[262,8,208,12],[262,14,208,18],[262,18,208,22,"UnavailabilityError"],[262,54,208,41],[262,55,208,42],[262,67,208,54],[262,69,208,56],[262,89,208,76],[262,90,208,77],[263,6,209,8],[264,6,210,8,"ExponentWebBrowser"],[264,29,210,26],[264,30,210,27,"dismissAuthSession"],[264,48,210,45],[264,49,210,46],[264,50,210,47],[265,4,211,4],[265,5,211,5],[265,11,212,9],[266,6,213,8],[266,10,213,12],[266,11,213,13,"ExponentWebBrowser"],[266,34,213,31],[266,35,213,32,"dismissBrowser"],[266,49,213,46],[266,51,213,48],[267,8,214,12],[267,14,214,18],[267,18,214,22,"UnavailabilityError"],[267,54,214,41],[267,55,214,42],[267,67,214,54],[267,69,214,56],[267,85,214,72],[267,86,214,73],[268,6,215,8],[269,6,216,8,"ExponentWebBrowser"],[269,29,216,26],[269,30,216,27,"dismissBrowser"],[269,44,216,41],[269,45,216,42],[269,46,216,43],[270,4,217,4],[271,2,218,0],[272,2,219,0],[273,2,220,0],[274,0,221,0],[275,0,222,0],[276,0,223,0],[277,0,224,0],[278,0,225,0],[279,0,226,0],[280,0,227,0],[281,0,228,0],[282,0,229,0],[283,0,230,0],[284,0,231,0],[285,0,232,0],[286,0,233,0],[287,0,234,0],[288,0,235,0],[289,0,236,0],[290,0,237,0],[291,0,238,0],[292,0,239,0],[293,0,240,0],[294,0,241,0],[295,0,242,0],[296,0,243,0],[297,0,244,0],[298,0,245,0],[299,0,246,0],[300,0,247,0],[301,2,248,7],[301,11,248,16,"maybeCompleteAuthSession"],[301,35,248,40,"maybeCompleteAuthSession"],[301,36,248,40],[301,38,248,55],[302,4,248,55],[302,8,248,41,"options"],[302,15,248,48],[302,18,248,48,"arguments"],[302,27,248,48],[302,28,248,48,"length"],[302,34,248,48],[302,42,248,48,"arguments"],[302,51,248,48],[302,59,248,48,"undefined"],[302,68,248,48],[302,71,248,48,"arguments"],[302,80,248,48],[302,86,248,51],[302,87,248,52],[302,88,248,53],[303,4,249,4],[303,8,249,8,"ExponentWebBrowser"],[303,31,249,26],[303,32,249,27,"maybeCompleteAuthSession"],[303,56,249,51],[303,58,249,53],[304,6,250,8],[304,13,250,15,"ExponentWebBrowser"],[304,36,250,33],[304,37,250,34,"maybeCompleteAuthSession"],[304,61,250,58],[304,62,250,59,"options"],[304,69,250,66],[304,70,250,67],[305,4,251,4],[306,4,252,4],[306,11,252,11],[307,6,252,13,"type"],[307,10,252,17],[307,12,252,19],[307,20,252,27],[308,6,252,29,"message"],[308,13,252,36],[308,15,252,38],[309,4,252,71],[309,5,252,72],[310,2,253,0],[311,2,254,0],[311,11,254,9,"_processOptions"],[311,26,254,24,"_processOptions"],[311,27,254,25,"options"],[311,34,254,32],[311,36,254,34],[312,4,255,4],[312,11,255,11],[313,6,256,8],[313,9,256,11,"options"],[313,16,256,18],[314,6,257,8,"controlsColor"],[314,19,257,21],[314,21,257,23],[314,25,257,23,"processColor"],[314,50,257,35],[314,52,257,36,"options"],[314,59,257,43],[314,60,257,44,"controlsColor"],[314,73,257,57],[314,74,257,58],[315,6,258,8,"toolbarColor"],[315,18,258,20],[315,20,258,22],[315,24,258,22,"processColor"],[315,49,258,34],[315,51,258,35,"options"],[315,58,258,42],[315,59,258,43,"toolbarColor"],[315,71,258,55],[315,72,258,56],[316,6,259,8,"secondaryToolbarColor"],[316,27,259,29],[316,29,259,31],[316,33,259,31,"processColor"],[316,58,259,43],[316,60,259,44,"options"],[316,67,259,51],[316,68,259,52,"secondaryToolbarColor"],[316,89,259,73],[317,4,260,4],[317,5,260,5],[318,2,261,0],[319,2,262,0],[320,2,263,0],[320,11,263,9,"_authSessionIsNativelySupported"],[320,42,263,40,"_authSessionIsNativelySupported"],[320,43,263,40],[320,45,263,43],[321,4,264,4],[321,11,264,11,"Platform"],[321,32,264,19],[321,33,264,20,"OS"],[321,35,264,22],[321,40,264,27],[321,49,264,36],[322,2,265,0],[323,2,266,0],[323,6,266,4,"_redirectSubscription"],[323,27,266,25],[323,30,266,28],[323,34,266,32],[324,2,267,0],[325,0,268,0],[326,0,269,0],[327,0,270,0],[328,2,271,0],[329,2,272,0],[330,2,273,0],[330,6,273,4,"_onWebBrowserCloseAndroid"],[330,31,273,29],[330,34,273,32],[330,38,273,36],[331,2,274,0],[332,2,275,0],[333,2,276,0],[334,2,277,0],[335,2,278,0],[335,6,278,4,"_isAppStateAvailable"],[335,26,278,24],[335,29,278,27,"AppState"],[335,50,278,35],[335,51,278,36,"currentState"],[335,63,278,48],[335,68,278,53],[335,72,278,57],[336,2,279,0],[336,11,279,9,"_onAppStateChangeAndroid"],[336,35,279,33,"_onAppStateChangeAndroid"],[336,36,279,34,"state"],[336,41,279,39],[336,43,279,41],[337,4,280,4],[337,8,280,8],[337,9,280,9,"_isAppStateAvailable"],[337,29,280,29],[337,31,280,31],[338,6,281,8,"_isAppStateAvailable"],[338,26,281,28],[338,29,281,31],[338,33,281,35],[339,6,282,8],[340,4,283,4],[341,4,284,4],[341,8,284,8,"state"],[341,13,284,13],[341,18,284,18],[341,26,284,26],[341,30,284,30,"_onWebBrowserCloseAndroid"],[341,55,284,55],[341,57,284,57],[342,6,285,8,"_onWebBrowserCloseAndroid"],[342,31,285,33],[342,32,285,34],[342,33,285,35],[343,4,286,4],[344,2,287,0],[345,2,287,1],[345,11,288,15,"_openBrowserAndWaitAndroidAsync"],[345,42,288,46,"_openBrowserAndWaitAndroidAsync"],[345,43,288,46,"_x8"],[345,46,288,46],[346,4,288,46],[346,11,288,46,"_openBrowserAndWaitAndroidAsync2"],[346,43,288,46],[346,44,288,46,"apply"],[346,49,288,46],[346,56,288,46,"arguments"],[346,65,288,46],[347,2,288,46],[348,2,288,46],[348,11,288,46,"_openBrowserAndWaitAndroidAsync2"],[348,44,288,46],[349,4,288,46,"_openBrowserAndWaitAndroidAsync2"],[349,36,288,46],[349,43,288,46,"_asyncToGenerator2"],[349,61,288,46],[349,62,288,46,"default"],[349,69,288,46],[349,71,288,0],[349,82,288,47,"startUrl"],[349,90,288,55],[349,92,288,77],[350,6,288,77],[350,10,288,57,"browserParams"],[350,23,288,70],[350,26,288,70,"arguments"],[350,35,288,70],[350,36,288,70,"length"],[350,42,288,70],[350,50,288,70,"arguments"],[350,59,288,70],[350,67,288,70,"undefined"],[350,76,288,70],[350,79,288,70,"arguments"],[350,88,288,70],[350,94,288,73],[350,95,288,74],[350,96,288,75],[351,6,289,4],[351,10,289,10,"appStateChangedToActive"],[351,33,289,33],[351,36,289,36],[351,40,289,40,"Promise"],[351,47,289,47],[351,48,289,49,"resolve"],[351,55,289,56],[351,59,289,61],[352,8,290,8,"_onWebBrowserCloseAndroid"],[352,33,290,33],[352,36,290,36,"resolve"],[352,43,290,43],[353,6,291,4],[353,7,291,5],[353,8,291,6],[354,6,292,4],[354,10,292,10,"stateChangeSubscription"],[354,33,292,33],[354,36,292,36,"AppState"],[354,57,292,44],[354,58,292,45,"addEventListener"],[354,74,292,61],[354,75,292,62],[354,83,292,70],[354,85,292,72,"_onAppStateChangeAndroid"],[354,109,292,96],[354,110,292,97],[355,6,293,4],[355,10,293,8,"result"],[355,16,293,14],[355,19,293,17],[356,8,293,19,"type"],[356,12,293,23],[356,14,293,25,"WebBrowserResultType"],[356,46,293,45],[356,47,293,46,"CANCEL"],[357,6,293,53],[357,7,293,54],[358,6,294,4],[358,10,294,8,"type"],[358,14,294,12],[358,17,294,15],[358,21,294,19],[359,6,295,4],[359,10,295,8],[360,8,295,8],[360,12,295,8,"_yield$openBrowserAsy"],[360,33,295,8],[360,42,296,26,"openBrowserAsync"],[360,58,296,42],[360,59,296,43,"startUrl"],[360,67,296,51],[360,69,296,53,"browserParams"],[360,82,296,66],[360,83,296,67],[361,8,296,11,"type"],[361,12,296,15],[361,15,296,15,"_yield$openBrowserAsy"],[361,36,296,15],[361,37,296,11,"type"],[361,41,296,15],[362,6,297,4],[362,7,297,5],[362,8,298,4],[362,15,298,11,"e"],[362,16,298,12],[362,18,298,14],[363,8,299,8,"stateChangeSubscription"],[363,31,299,31],[363,32,299,32,"remove"],[363,38,299,38],[363,39,299,39],[363,40,299,40],[364,8,300,8,"_onWebBrowserCloseAndroid"],[364,33,300,33],[364,36,300,36],[364,40,300,40],[365,8,301,8],[365,14,301,14,"e"],[365,15,301,15],[366,6,302,4],[367,6,303,4],[367,10,303,8,"type"],[367,14,303,12],[367,19,303,17],[367,27,303,25],[367,29,303,27],[368,8,304,8],[368,14,304,14,"appStateChangedToActive"],[368,37,304,37],[369,8,305,8,"result"],[369,14,305,14],[369,17,305,17],[370,10,305,19,"type"],[370,14,305,23],[370,16,305,25,"WebBrowserResultType"],[370,48,305,45],[370,49,305,46,"DISMISS"],[371,8,305,54],[371,9,305,55],[372,6,306,4],[373,6,307,4,"stateChangeSubscription"],[373,29,307,27],[373,30,307,28,"remove"],[373,36,307,34],[373,37,307,35],[373,38,307,36],[374,6,308,4,"_onWebBrowserCloseAndroid"],[374,31,308,29],[374,34,308,32],[374,38,308,36],[375,6,309,4],[375,13,309,11,"result"],[375,19,309,17],[376,4,310,0],[376,5,310,1],[377,4,310,1],[377,11,310,1,"_openBrowserAndWaitAndroidAsync2"],[377,43,310,1],[377,44,310,1,"apply"],[377,49,310,1],[377,56,310,1,"arguments"],[377,65,310,1],[378,2,310,1],[379,2,310,1],[379,11,311,15,"_openAuthSessionPolyfillAsync"],[379,40,311,44,"_openAuthSessionPolyfillAsync"],[379,41,311,44,"_x9"],[379,44,311,44],[379,46,311,44,"_x0"],[379,49,311,44],[380,4,311,44],[380,11,311,44,"_openAuthSessionPolyfillAsync2"],[380,41,311,44],[380,42,311,44,"apply"],[380,47,311,44],[380,54,311,44,"arguments"],[380,63,311,44],[381,2,311,44],[382,2,311,44],[382,11,311,44,"_openAuthSessionPolyfillAsync2"],[382,42,311,44],[383,4,311,44,"_openAuthSessionPolyfillAsync2"],[383,34,311,44],[383,41,311,44,"_asyncToGenerator2"],[383,59,311,44],[383,60,311,44,"default"],[383,67,311,44],[383,69,311,0],[383,80,311,45,"startUrl"],[383,88,311,53],[383,90,311,55,"returnUrl"],[383,99,311,64],[383,101,311,86],[384,6,311,86],[384,10,311,66,"browserParams"],[384,23,311,79],[384,26,311,79,"arguments"],[384,35,311,79],[384,36,311,79,"length"],[384,42,311,79],[384,50,311,79,"arguments"],[384,59,311,79],[384,67,311,79,"undefined"],[384,76,311,79],[384,79,311,79,"arguments"],[384,88,311,79],[384,94,311,82],[384,95,311,83],[384,96,311,84],[385,6,312,4],[385,10,312,8,"_redirectSubscription"],[385,31,312,29],[385,33,312,31],[386,8,313,8],[386,14,313,14],[386,18,313,18,"Error"],[386,23,313,23],[386,24,313,24],[386,128,313,128],[386,129,313,129],[387,6,314,4],[388,6,315,4],[388,10,315,8,"_onWebBrowserCloseAndroid"],[388,35,315,33],[388,37,315,35],[389,8,316,8],[389,14,316,14],[389,18,316,18,"Error"],[389,23,316,23],[389,24,316,24],[389,84,316,84],[389,85,316,85],[390,6,317,4],[391,6,318,4],[391,10,318,8],[392,8,319,8],[392,12,319,12,"Platform"],[392,33,319,20],[392,34,319,21,"OS"],[392,36,319,23],[392,41,319,28],[392,50,319,37],[392,52,319,39],[393,10,320,12],[393,23,320,25,"Promise"],[393,30,320,32],[393,31,320,33,"race"],[393,35,320,37],[393,36,320,38],[393,37,321,16,"_openBrowserAndWaitAndroidAsync"],[393,68,321,47],[393,69,321,48,"startUrl"],[393,77,321,56],[393,79,321,58,"browserParams"],[393,92,321,71],[393,93,321,72],[393,95,322,16,"_waitForRedirectAsync"],[393,116,322,37],[393,117,322,38,"returnUrl"],[393,126,322,47],[393,127,322,48],[393,128,323,13],[393,129,323,14],[394,8,324,8],[394,9,324,9],[394,15,325,13],[395,10,326,12],[395,23,326,25,"Promise"],[395,30,326,32],[395,31,326,33,"race"],[395,35,326,37],[395,36,326,38],[395,37,327,16,"openBrowserAsync"],[395,53,327,32],[395,54,327,33,"startUrl"],[395,62,327,41],[395,64,327,43,"browserParams"],[395,77,327,56],[395,78,327,57],[395,80,328,16,"_waitForRedirectAsync"],[395,101,328,37],[395,102,328,38,"returnUrl"],[395,111,328,47],[395,112,328,48],[395,113,329,13],[395,114,329,14],[396,8,330,8],[397,6,331,4],[397,7,331,5],[397,16,332,12],[398,8,333,8],[399,8,334,8],[400,8,335,8],[400,12,335,12,"ExponentWebBrowser"],[400,35,335,30],[400,36,335,31,"dismissBrowser"],[400,50,335,45],[400,52,335,47],[401,10,336,12,"ExponentWebBrowser"],[401,33,336,30],[401,34,336,31,"dismissBrowser"],[401,48,336,45],[401,49,336,46],[401,50,336,47],[402,8,337,8],[403,8,338,8,"_stopWaitingForRedirect"],[403,31,338,31],[403,32,338,32],[403,33,338,33],[404,6,339,4],[405,4,340,0],[405,5,340,1],[406,4,340,1],[406,11,340,1,"_openAuthSessionPolyfillAsync2"],[406,41,340,1],[406,42,340,1,"apply"],[406,47,340,1],[406,54,340,1,"arguments"],[406,63,340,1],[407,2,340,1],[408,2,341,0],[408,11,341,9,"_stopWaitingForRedirect"],[408,34,341,32,"_stopWaitingForRedirect"],[408,35,341,32],[408,37,341,35],[409,4,342,4],[409,8,342,8],[409,9,342,9,"_redirectSubscription"],[409,30,342,30],[409,32,342,32],[410,6,343,8],[410,12,343,14],[410,16,343,18,"Error"],[410,21,343,23],[410,22,343,24],[410,122,343,124],[410,123,343,125],[411,4,344,4],[412,4,345,4,"_redirectSubscription"],[412,25,345,25],[412,26,345,26,"remove"],[412,32,345,32],[412,33,345,33],[412,34,345,34],[413,4,346,4,"_redirectSubscription"],[413,25,346,25],[413,28,346,28],[413,32,346,32],[414,2,347,0],[415,2,348,0],[415,11,348,9,"_waitForRedirectAsync"],[415,32,348,30,"_waitForRedirectAsync"],[415,33,348,31,"returnUrl"],[415,42,348,40],[415,44,348,42],[416,4,349,4],[417,4,350,4],[417,11,350,11],[417,15,350,15,"Promise"],[417,22,350,22],[417,23,350,24,"resolve"],[417,30,350,31],[417,34,350,36],[418,6,351,8],[418,10,351,14,"redirectHandler"],[418,25,351,29],[418,28,351,33,"event"],[418,33,351,38],[418,37,351,43],[419,8,352,12],[419,12,352,16,"returnUrl"],[419,21,352,25],[419,25,352,29,"event"],[419,30,352,34],[419,31,352,35,"url"],[419,34,352,38],[419,35,352,39,"startsWith"],[419,45,352,49],[419,46,352,50,"returnUrl"],[419,55,352,59],[419,56,352,60],[419,58,352,62],[420,10,353,16,"resolve"],[420,17,353,23],[420,18,353,24],[421,12,353,26,"url"],[421,15,353,29],[421,17,353,31,"event"],[421,22,353,36],[421,23,353,37,"url"],[421,26,353,40],[422,12,353,42,"type"],[422,16,353,46],[422,18,353,48],[423,10,353,58],[423,11,353,59],[423,12,353,60],[424,8,354,12],[425,6,355,8],[425,7,355,9],[426,6,356,8,"_redirectSubscription"],[426,27,356,29],[426,30,356,32,"Linking"],[426,50,356,39],[426,51,356,40,"addEventListener"],[426,67,356,56],[426,68,356,57],[426,73,356,62],[426,75,356,64,"redirectHandler"],[426,90,356,79],[426,91,356,80],[427,4,357,4],[427,5,357,5],[427,6,357,6],[428,2,358,0],[429,0,358,1],[429,3]],"functionMap":{"names":["<global>","getCustomTabsSupportingBrowsersAsync","warmUpAsync","mayInitWithUrlAsync","coolDownAsync","openBrowserAsync","dismissBrowser","openAuthSessionAsync","dismissAuthSession","maybeCompleteAuthSession","_processOptions","_authSessionIsNativelySupported","_onAppStateChangeAndroid","_openBrowserAndWaitAndroidAsync","Promise$argument_0","_openAuthSessionPolyfillAsync","_stopWaitingForRedirect","_waitForRedirectAsync","redirectHandler"],"mappings":"AAA;OCqB;CDU;OEW;CFU;OGa;CHU;OIc;CJU;OKiB;CLK;OMQ;CNE;OOmD;CPa;OQS;CRa;OS8B;CTK;AUC;CVO;AWE;CXE;AYc;CZQ;AaC;gDCC;KDE;CbmB;AeC;Cf6B;AgBC;ChBM;AiBC;uBHE;gCIC;SJI;KGE;CjBC"}},"type":"js/module"}]}