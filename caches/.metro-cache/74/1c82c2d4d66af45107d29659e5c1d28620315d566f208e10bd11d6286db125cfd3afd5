{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./Device.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":44,"index":101}}],"key":"x8dA+Oqh1iivvx03WEHujA7b658=","exportNames":["*"]}},{"name":"./ExpoDevice","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":102},"end":{"line":3,"column":38,"index":140}}],"key":"0fzk2E6Nr6o2GHNufKcTmV29N+Y=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"DeviceType\", {\n    enumerable: true,\n    get: function () {\n      return _Device.DeviceType;\n    }\n  });\n  exports.deviceYearClass = exports.deviceType = exports.deviceName = exports.designName = exports.brand = void 0;\n  exports.getDeviceTypeAsync = getDeviceTypeAsync;\n  exports.getMaxMemoryAsync = getMaxMemoryAsync;\n  exports.getPlatformFeaturesAsync = getPlatformFeaturesAsync;\n  exports.getUptimeAsync = getUptimeAsync;\n  exports.hasPlatformFeatureAsync = hasPlatformFeatureAsync;\n  exports.isDevice = void 0;\n  exports.isRootedExperimentalAsync = isRootedExperimentalAsync;\n  exports.isSideLoadingEnabledAsync = isSideLoadingEnabledAsync;\n  exports.totalMemory = exports.supportedCpuArchitectures = exports.productName = exports.platformApiLevel = exports.osVersion = exports.osName = exports.osInternalBuildId = exports.osBuildId = exports.osBuildFingerprint = exports.modelName = exports.modelId = exports.manufacturer = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _Device = require(_dependencyMap[3], \"./Device.types\");\n  var _ExpoDevice = _interopRequireDefault(require(_dependencyMap[4], \"./ExpoDevice\"));\n  /**\n   * `true` if the app is running on a real device and `false` if running in a simulator or emulator.\n   * On web, this is always set to `true`.\n   */\n  var isDevice = exports.isDevice = _ExpoDevice.default ? _ExpoDevice.default.isDevice : true;\n  /**\n   * The device brand. The consumer-visible brand of the product/hardware. On web, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.brand; // Android: \"google\", \"xiaomi\"; iOS: \"Apple\"; web: null\n   * ```\n   * @platform android\n   * @platform ios\n   */\n  var brand = exports.brand = _ExpoDevice.default ? _ExpoDevice.default.brand : null;\n  /**\n   * The actual device manufacturer of the product or hardware. This value of this field may be `null` if it cannot be determined.\n   *\n   * To view difference between `brand` and `manufacturer` on Android see [official documentation](https://developer.android.com/reference/android/os/Build).\n   *\n   * @example\n   * ```js\n   * Device.manufacturer; // Android: \"Google\", \"xiaomi\"; iOS: \"Apple\"; web: \"Google\", null\n   * ```\n   */\n  var manufacturer = exports.manufacturer = _ExpoDevice.default ? _ExpoDevice.default.manufacturer : null;\n  /**\n   * The internal model ID of the device. This is useful for programmatically identifying the type of device and is not a human-friendly string.\n   * On web and Android, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.modelId; // iOS: \"iPhone7,2\"; Android: null; web: null\n   * ```\n   * @platform ios\n   */\n  var modelId = exports.modelId = _ExpoDevice.default ? _ExpoDevice.default.modelId || null : null;\n  /**\n   * The human-friendly name of the device model. This is the name that people would typically use to refer to the device rather than a programmatic model identifier.\n   * This value of this field may be `null` if it cannot be determined.\n   *\n   * @example\n   * ```js\n   * Device.modelName; // Android: \"Pixel 2\"; iOS: \"iPhone XS Max\"; web: \"iPhone\", null\n   * ```\n   */\n  var modelName = exports.modelName = _ExpoDevice.default ? _ExpoDevice.default.modelName : null;\n  /**\n   * The specific configuration or name of the industrial design. It represents the device's name when it was designed during manufacturing into mass production.\n   * On Android, it corresponds to [`Build.DEVICE`](https://developer.android.com/reference/android/os/Build#DEVICE). On web and iOS, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.designName; // Android: \"kminilte\"; iOS: null; web: null\n   * ```\n   * @platform android\n   */\n  var designName = exports.designName = _ExpoDevice.default ? _ExpoDevice.default.designName || null : null;\n  /**\n   * The device's overall product name chosen by the device implementer containing the development name or code name of the device.\n   * Corresponds to [`Build.PRODUCT`](https://developer.android.com/reference/android/os/Build#PRODUCT). On web and iOS, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.productName; // Android: \"kminiltexx\"; iOS: null; web: null\n   * ```\n   * @platform android\n   */\n  var productName = exports.productName = _ExpoDevice.default ? _ExpoDevice.default.productName || null : null;\n  /**\n   * The type of the device as a [`DeviceType`](#devicetype) enum value.\n   *\n   * On Android, for devices other than TVs, the device type is determined by the screen resolution (screen diagonal size), so the result may not be completely accurate.\n   * If the screen diagonal length is between 3\" and 6.9\", the method returns `DeviceType.PHONE`. For lengths between 7\" and 18\", the method returns `DeviceType.TABLET`.\n   * Otherwise, the method returns `DeviceType.UNKNOWN`.\n   *\n   * @example\n   * ```js\n   * Device.deviceType; // UNKNOWN, PHONE, TABLET, TV, DESKTOP\n   * ```\n   */\n  var deviceType = exports.deviceType = _ExpoDevice.default ? _ExpoDevice.default.deviceType : null;\n  /**\n   * The [device year class](https://github.com/facebook/device-year-class) of this device. On web, this value is always `null`.\n   */\n  var deviceYearClass = exports.deviceYearClass = _ExpoDevice.default ? _ExpoDevice.default.deviceYearClass : null;\n  /**\n   * The device's total memory, in bytes. This is the total memory accessible to the kernel, but not necessarily to a single app.\n   * This is basically the amount of RAM the device has, not including below-kernel fixed allocations like DMA buffers, RAM for the baseband CPU, etcâ€¦\n   * On web, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.totalMemory; // 17179869184\n   * ```\n   */\n  var totalMemory = exports.totalMemory = _ExpoDevice.default ? _ExpoDevice.default.totalMemory : null;\n  /**\n   * A list of supported processor architecture versions. The device expects the binaries it runs to be compiled for one of these architectures.\n   * This value is `null` if the supported architectures could not be determined, particularly on web.\n   *\n   * @example\n   * ```js\n   * Device.supportedCpuArchitectures; // ['arm64 v8', 'Intel x86-64h Haswell', 'arm64-v8a', 'armeabi-v7a\", 'armeabi']\n   * ```\n   */\n  var supportedCpuArchitectures = exports.supportedCpuArchitectures = _ExpoDevice.default ? _ExpoDevice.default.supportedCpuArchitectures : null;\n  /**\n   * The name of the OS running on the device.\n   *\n   * @example\n   * ```js\n   * Device.osName; // Android: \"Android\"; iOS: \"iOS\" or \"iPadOS\"; web: \"iOS\", \"Android\", \"Windows\"\n   * ```\n   */\n  var osName = exports.osName = _ExpoDevice.default ? _ExpoDevice.default.osName : null;\n  /**\n   * The human-readable OS version string. Note that the version string may not always contain three numbers separated by dots.\n   *\n   * @example\n   * ```js\n   * Device.osVersion; // Android: \"4.0.3\"; iOS: \"12.3.1\"; web: \"11.0\", \"8.1.0\"\n   * ```\n   */\n  var osVersion = exports.osVersion = _ExpoDevice.default ? _ExpoDevice.default.osVersion : null;\n  /**\n   * The build ID of the OS that more precisely identifies the version of the OS. On Android, this corresponds to `Build.DISPLAY` (not `Build.ID`)\n   * and currently is a string as described [here](https://source.android.com/setup/start/build-numbers). On iOS, this corresponds to `kern.osversion`\n   * and is the detailed OS version sometimes displayed next to the more human-readable version. On web, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.osBuildId; // Android: \"PSR1.180720.075\"; iOS: \"16F203\"; web: null\n   * ```\n   */\n  var osBuildId = exports.osBuildId = _ExpoDevice.default ? _ExpoDevice.default.osBuildId : null;\n  /**\n   * The internal build ID of the OS running on the device. On Android, this corresponds to `Build.ID`.\n   * On iOS, this is the same value as [`Device.osBuildId`](#deviceosbuildid). On web, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.osInternalBuildId; // Android: \"MMB29K\"; iOS: \"16F203\"; web: null,\n   * ```\n   */\n  var osInternalBuildId = exports.osInternalBuildId = _ExpoDevice.default ? _ExpoDevice.default.osInternalBuildId : null;\n  /**\n   * A string that uniquely identifies the build of the currently running system OS. On Android, it follows this template:\n   * - `$(BRAND)/$(PRODUCT)/$(DEVICE)/$(BOARD):$(VERSION.RELEASE)/$(ID)/$(VERSION.INCREMENTAL):$(TYPE)/\\$(TAGS)`\n   * On web and iOS, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.osBuildFingerprint;\n   * // Android: \"google/sdk_gphone_x86/generic_x86:9/PSR1.180720.075/5124027:user/release-keys\";\n   * // iOS: null; web: null\n   * ```\n   * @platform android\n   */\n  var osBuildFingerprint = exports.osBuildFingerprint = _ExpoDevice.default ? _ExpoDevice.default.osBuildFingerprint || null : null;\n  /**\n   * The Android SDK version of the software currently running on this hardware device. This value never changes while a device is booted,\n   * but it may increase when the hardware manufacturer provides an OS update. See [here](https://developer.android.com/reference/android/os/Build.VERSION_CODES.html)\n   * to see all possible version codes and corresponding versions. On iOS and web, this value is always `null`.\n   *\n   * @example\n   * ```js\n   * Device.platformApiLevel; // Android: 19; iOS: null; web: null\n   * ```\n   * @platform android\n   */\n  var platformApiLevel = exports.platformApiLevel = _ExpoDevice.default ? _ExpoDevice.default.platformApiLevel || null : null;\n  /**\n   * The human-readable name of the device, which may be set by the device's user. If the device name is unavailable, particularly on web, this value is `null`.\n   *\n   * > On iOS 16 and newer, this value will be set to generic \"iPhone\" until you add the correct entitlement, see [iOS Capabilities page](/build-reference/ios-capabilities)\n   * > to learn how to add one and check out [Apple documentation](https://developer.apple.com/documentation/uikit/uidevice/1620015-name#discussion)\n   * > for more details on this change.\n   *\n   * @example\n   * ```js\n   * Device.deviceName; // \"Vivian's iPhone XS\"\n   * ```\n   */\n  var deviceName = exports.deviceName = _ExpoDevice.default ? _ExpoDevice.default.deviceName : null;\n  /**\n   * Checks the type of the device as a [`DeviceType`](#devicetype) enum value.\n   *\n   * On Android, for devices other than TVs, the device type is determined by the screen resolution (screen diagonal size), so the result may not be completely accurate.\n   * If the screen diagonal length is between 3\" and 6.9\", the method returns `DeviceType.PHONE`. For lengths between 7\" and 18\", the method returns `DeviceType.TABLET`.\n   * Otherwise, the method returns `DeviceType.UNKNOWN`.\n   *\n   * @return Returns a promise that resolves to a [`DeviceType`](#devicetype) enum value.\n   * @example\n   * ```js\n   * await Device.getDeviceTypeAsync();\n   * // DeviceType.PHONE\n   * ```\n   */\n  function getDeviceTypeAsync() {\n    return _getDeviceTypeAsync.apply(this, arguments);\n  }\n  /**\n   * Gets the uptime since the last reboot of the device, in milliseconds. Android devices do not count time spent in deep sleep.\n   * @return Returns a promise that resolves to a `number` that represents the milliseconds since last reboot.\n   * @example\n   * ```js\n   * await Device.getUptimeAsync();\n   * // 4371054\n   * ```\n   * @platform android\n   * @platform ios\n   */\n  function _getDeviceTypeAsync() {\n    _getDeviceTypeAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoDevice.default.getDeviceTypeAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-device', 'getDeviceTypeAsync');\n      }\n      return yield _ExpoDevice.default.getDeviceTypeAsync();\n    });\n    return _getDeviceTypeAsync.apply(this, arguments);\n  }\n  function getUptimeAsync() {\n    return _getUptimeAsync.apply(this, arguments);\n  }\n  /**\n   * Returns the maximum amount of memory that the Java VM will attempt to use. If there is no inherent limit then `Number.MAX_SAFE_INTEGER` is returned.\n   * @return Returns a promise that resolves to the maximum available memory that the Java VM will use, in bytes.\n   * @example\n   * ```js\n   * await Device.getMaxMemoryAsync();\n   * // 402653184\n   * ```\n   * @platform android\n   */\n  function _getUptimeAsync() {\n    _getUptimeAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoDevice.default.getUptimeAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-device', 'getUptimeAsync');\n      }\n      return yield _ExpoDevice.default.getUptimeAsync();\n    });\n    return _getUptimeAsync.apply(this, arguments);\n  }\n  function getMaxMemoryAsync() {\n    return _getMaxMemoryAsync.apply(this, arguments);\n  }\n  /**\n   * > **warning** This method is experimental and is not completely reliable. See description below.\n   *\n   * Checks whether the device has been rooted (Android) or jailbroken (iOS). This is not completely reliable because there exist solutions to bypass root-detection\n   * on both [iOS](https://www.theiphonewiki.com/wiki/XCon) and [Android](https://tweakerlinks.com/how-to-bypass-apps-root-detection-in-android-device/).\n   * Further, many root-detection checks can be bypassed via reverse engineering.\n   * - On Android, it's implemented in a way to find all possible files paths that contain the `\"su\"` executable but some devices that are not rooted may also have this executable. Therefore, there's no guarantee that this method will always return correctly.\n   * - On iOS, [these jailbreak checks](https://www.theiphonewiki.com/wiki/Bypassing_Jailbreak_Detection) are used to detect if a device is rooted/jailbroken. However, since there are closed-sourced solutions such as [xCon](https://www.theiphonewiki.com/wiki/XCon) that aim to hook every known method and function responsible for informing an application of a jailbroken device, this method may not reliably detect devices that have xCon or similar packages installed.\n   * - On web, this always resolves to `false` even if the device is rooted.\n   * @return Returns a promise that resolves to a `boolean` that specifies whether this device is rooted.\n   * @example\n   * ```js\n   * await Device.isRootedExperimentalAsync();\n   * // true or false\n   * ```\n   */\n  function _getMaxMemoryAsync() {\n    _getMaxMemoryAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoDevice.default.getMaxMemoryAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-device', 'getMaxMemoryAsync');\n      }\n      var maxMemory = yield _ExpoDevice.default.getMaxMemoryAsync();\n      if (maxMemory === -1) {\n        maxMemory = Number.MAX_SAFE_INTEGER;\n      }\n      return maxMemory;\n    });\n    return _getMaxMemoryAsync.apply(this, arguments);\n  }\n  function isRootedExperimentalAsync() {\n    return _isRootedExperimentalAsync.apply(this, arguments);\n  }\n  /**\n   * **Using this method requires you to [add the `REQUEST_INSTALL_PACKAGES` permission](./../config/app/#permissions).**\n   * Returns whether applications can be installed for this user via the system's [`ACTION_INSTALL_PACKAGE`](https://developer.android.com/reference/android/content/Intent.html#ACTION_INSTALL_PACKAGE)\n   * mechanism rather than through the OS's default app store, like Google Play.\n   * @return Returns a promise that resolves to a `boolean` that represents whether the calling package is allowed to request package installation.\n   * @example\n   * ```js\n   * await Device.isSideLoadingEnabledAsync();\n   * // true or false\n   * ```\n   * @platform android\n   */\n  function _isRootedExperimentalAsync() {\n    _isRootedExperimentalAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoDevice.default.isRootedExperimentalAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-device', 'isRootedExperimentalAsync');\n      }\n      return yield _ExpoDevice.default.isRootedExperimentalAsync();\n    });\n    return _isRootedExperimentalAsync.apply(this, arguments);\n  }\n  function isSideLoadingEnabledAsync() {\n    return _isSideLoadingEnabledAsync.apply(this, arguments);\n  }\n  /**\n   * Gets a list of features that are available on the system. The feature names are platform-specific.\n   * See [Android documentation](<https://developer.android.com/reference/android/content/pm/PackageManager#getSystemAvailableFeatures()>)\n   * to learn more about this implementation.\n   * @return Returns a promise that resolves to an array of strings, each of which is a platform-specific name of a feature available on the current device.\n   * On iOS and web, the promise always resolves to an empty array.\n   * @example\n   * ```js\n   * await Device.getPlatformFeaturesAsync();\n   * // [\n   * //   'android.software.adoptable_storage',\n   * //   'android.software.backup',\n   * //   'android.hardware.sensor.accelerometer',\n   * //   'android.hardware.touchscreen',\n   * // ]\n   * ```\n   * @platform android\n   */\n  function _isSideLoadingEnabledAsync() {\n    _isSideLoadingEnabledAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoDevice.default.isSideLoadingEnabledAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-device', 'isSideLoadingEnabledAsync');\n      }\n      return yield _ExpoDevice.default.isSideLoadingEnabledAsync();\n    });\n    return _isSideLoadingEnabledAsync.apply(this, arguments);\n  }\n  function getPlatformFeaturesAsync() {\n    return _getPlatformFeaturesAsync.apply(this, arguments);\n  }\n  /**\n   * Tells if the device has a specific system feature.\n   * @param feature The platform-specific name of the feature to check for on the device. You can get all available system features with `Device.getSystemFeatureAsync()`.\n   * See [Android documentation](<https://developer.android.com/reference/android/content/pm/PackageManager#hasSystemFeature(java.lang.String)>) to view acceptable feature strings.\n   * @return Returns a promise that resolves to a boolean value indicating whether the device has the specified system feature.\n   * On iOS and web, the promise always resolves to `false`.\n   * @example\n   * ```js\n   * await Device.hasPlatformFeatureAsync('amazon.hardware.fire_tv');\n   * // true or false\n   * ```\n   * @platform android\n   */\n  function _getPlatformFeaturesAsync() {\n    _getPlatformFeaturesAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoDevice.default.getPlatformFeaturesAsync) {\n        return [];\n      }\n      return yield _ExpoDevice.default.getPlatformFeaturesAsync();\n    });\n    return _getPlatformFeaturesAsync.apply(this, arguments);\n  }\n  function hasPlatformFeatureAsync(_x) {\n    return _hasPlatformFeatureAsync.apply(this, arguments);\n  }\n  function _hasPlatformFeatureAsync() {\n    _hasPlatformFeatureAsync = (0, _asyncToGenerator2.default)(function* (feature) {\n      if (!_ExpoDevice.default.hasPlatformFeatureAsync) {\n        return false;\n      }\n      return yield _ExpoDevice.default.hasPlatformFeatureAsync(feature);\n    });\n    return _hasPlatformFeatureAsync.apply(this, arguments);\n  }\n});","lineCount":394,"map":[[23,2,1,0],[23,6,1,0,"_expoModulesCore"],[23,22,1,0],[23,25,1,0,"require"],[23,32,1,0],[23,33,1,0,"_dependencyMap"],[23,47,1,0],[24,2,2,0],[24,6,2,0,"_Device"],[24,13,2,0],[24,16,2,0,"require"],[24,23,2,0],[24,24,2,0,"_dependencyMap"],[24,38,2,0],[25,2,3,0],[25,6,3,0,"_ExpoDevice"],[25,17,3,0],[25,20,3,0,"_interopRequireDefault"],[25,42,3,0],[25,43,3,0,"require"],[25,50,3,0],[25,51,3,0,"_dependencyMap"],[25,65,3,0],[26,2,5,0],[27,0,6,0],[28,0,7,0],[29,0,8,0],[30,2,9,7],[30,6,9,13,"isDevice"],[30,14,9,21],[30,17,9,21,"exports"],[30,24,9,21],[30,25,9,21,"isDevice"],[30,33,9,21],[30,36,9,24,"ExpoDevice"],[30,55,9,34],[30,58,9,37,"ExpoDevice"],[30,77,9,47],[30,78,9,48,"isDevice"],[30,86,9,56],[30,89,9,59],[30,93,9,63],[31,2,10,0],[32,0,11,0],[33,0,12,0],[34,0,13,0],[35,0,14,0],[36,0,15,0],[37,0,16,0],[38,0,17,0],[39,0,18,0],[40,0,19,0],[41,2,20,7],[41,6,20,13,"brand"],[41,11,20,18],[41,14,20,18,"exports"],[41,21,20,18],[41,22,20,18,"brand"],[41,27,20,18],[41,30,20,21,"ExpoDevice"],[41,49,20,31],[41,52,20,34,"ExpoDevice"],[41,71,20,44],[41,72,20,45,"brand"],[41,77,20,50],[41,80,20,53],[41,84,20,57],[42,2,21,0],[43,0,22,0],[44,0,23,0],[45,0,24,0],[46,0,25,0],[47,0,26,0],[48,0,27,0],[49,0,28,0],[50,0,29,0],[51,0,30,0],[52,2,31,7],[52,6,31,13,"manufacturer"],[52,18,31,25],[52,21,31,25,"exports"],[52,28,31,25],[52,29,31,25,"manufacturer"],[52,41,31,25],[52,44,31,28,"ExpoDevice"],[52,63,31,38],[52,66,31,41,"ExpoDevice"],[52,85,31,51],[52,86,31,52,"manufacturer"],[52,98,31,64],[52,101,31,67],[52,105,31,71],[53,2,32,0],[54,0,33,0],[55,0,34,0],[56,0,35,0],[57,0,36,0],[58,0,37,0],[59,0,38,0],[60,0,39,0],[61,0,40,0],[62,0,41,0],[63,2,42,7],[63,6,42,13,"modelId"],[63,13,42,20],[63,16,42,20,"exports"],[63,23,42,20],[63,24,42,20,"modelId"],[63,31,42,20],[63,34,42,23,"ExpoDevice"],[63,53,42,33],[63,56,42,36,"ExpoDevice"],[63,75,42,46],[63,76,42,47,"modelId"],[63,83,42,54],[63,87,42,58],[63,91,42,62],[63,94,42,65],[63,98,42,69],[64,2,43,0],[65,0,44,0],[66,0,45,0],[67,0,46,0],[68,0,47,0],[69,0,48,0],[70,0,49,0],[71,0,50,0],[72,0,51,0],[73,2,52,7],[73,6,52,13,"modelName"],[73,15,52,22],[73,18,52,22,"exports"],[73,25,52,22],[73,26,52,22,"modelName"],[73,35,52,22],[73,38,52,25,"ExpoDevice"],[73,57,52,35],[73,60,52,38,"ExpoDevice"],[73,79,52,48],[73,80,52,49,"modelName"],[73,89,52,58],[73,92,52,61],[73,96,52,65],[74,2,53,0],[75,0,54,0],[76,0,55,0],[77,0,56,0],[78,0,57,0],[79,0,58,0],[80,0,59,0],[81,0,60,0],[82,0,61,0],[83,0,62,0],[84,2,63,7],[84,6,63,13,"designName"],[84,16,63,23],[84,19,63,23,"exports"],[84,26,63,23],[84,27,63,23,"designName"],[84,37,63,23],[84,40,63,26,"ExpoDevice"],[84,59,63,36],[84,62,63,39,"ExpoDevice"],[84,81,63,49],[84,82,63,50,"designName"],[84,92,63,60],[84,96,63,64],[84,100,63,68],[84,103,63,71],[84,107,63,75],[85,2,64,0],[86,0,65,0],[87,0,66,0],[88,0,67,0],[89,0,68,0],[90,0,69,0],[91,0,70,0],[92,0,71,0],[93,0,72,0],[94,0,73,0],[95,2,74,7],[95,6,74,13,"productName"],[95,17,74,24],[95,20,74,24,"exports"],[95,27,74,24],[95,28,74,24,"productName"],[95,39,74,24],[95,42,74,27,"ExpoDevice"],[95,61,74,37],[95,64,74,40,"ExpoDevice"],[95,83,74,50],[95,84,74,51,"productName"],[95,95,74,62],[95,99,74,66],[95,103,74,70],[95,106,74,73],[95,110,74,77],[96,2,75,0],[97,0,76,0],[98,0,77,0],[99,0,78,0],[100,0,79,0],[101,0,80,0],[102,0,81,0],[103,0,82,0],[104,0,83,0],[105,0,84,0],[106,0,85,0],[107,0,86,0],[108,2,87,7],[108,6,87,13,"deviceType"],[108,16,87,23],[108,19,87,23,"exports"],[108,26,87,23],[108,27,87,23,"deviceType"],[108,37,87,23],[108,40,87,26,"ExpoDevice"],[108,59,87,36],[108,62,87,39,"ExpoDevice"],[108,81,87,49],[108,82,87,50,"deviceType"],[108,92,87,60],[108,95,87,63],[108,99,87,67],[109,2,88,0],[110,0,89,0],[111,0,90,0],[112,2,91,7],[112,6,91,13,"deviceYearClass"],[112,21,91,28],[112,24,91,28,"exports"],[112,31,91,28],[112,32,91,28,"deviceYearClass"],[112,47,91,28],[112,50,91,31,"ExpoDevice"],[112,69,91,41],[112,72,91,44,"ExpoDevice"],[112,91,91,54],[112,92,91,55,"deviceYearClass"],[112,107,91,70],[112,110,91,73],[112,114,91,77],[113,2,92,0],[114,0,93,0],[115,0,94,0],[116,0,95,0],[117,0,96,0],[118,0,97,0],[119,0,98,0],[120,0,99,0],[121,0,100,0],[122,0,101,0],[123,2,102,7],[123,6,102,13,"totalMemory"],[123,17,102,24],[123,20,102,24,"exports"],[123,27,102,24],[123,28,102,24,"totalMemory"],[123,39,102,24],[123,42,102,27,"ExpoDevice"],[123,61,102,37],[123,64,102,40,"ExpoDevice"],[123,83,102,50],[123,84,102,51,"totalMemory"],[123,95,102,62],[123,98,102,65],[123,102,102,69],[124,2,103,0],[125,0,104,0],[126,0,105,0],[127,0,106,0],[128,0,107,0],[129,0,108,0],[130,0,109,0],[131,0,110,0],[132,0,111,0],[133,2,112,7],[133,6,112,13,"supportedCpuArchitectures"],[133,31,112,38],[133,34,112,38,"exports"],[133,41,112,38],[133,42,112,38,"supportedCpuArchitectures"],[133,67,112,38],[133,70,112,41,"ExpoDevice"],[133,89,112,51],[133,92,113,6,"ExpoDevice"],[133,111,113,16],[133,112,113,17,"supportedCpuArchitectures"],[133,137,113,42],[133,140,114,6],[133,144,114,10],[134,2,115,0],[135,0,116,0],[136,0,117,0],[137,0,118,0],[138,0,119,0],[139,0,120,0],[140,0,121,0],[141,0,122,0],[142,2,123,7],[142,6,123,13,"osName"],[142,12,123,19],[142,15,123,19,"exports"],[142,22,123,19],[142,23,123,19,"osName"],[142,29,123,19],[142,32,123,22,"ExpoDevice"],[142,51,123,32],[142,54,123,35,"ExpoDevice"],[142,73,123,45],[142,74,123,46,"osName"],[142,80,123,52],[142,83,123,55],[142,87,123,59],[143,2,124,0],[144,0,125,0],[145,0,126,0],[146,0,127,0],[147,0,128,0],[148,0,129,0],[149,0,130,0],[150,0,131,0],[151,2,132,7],[151,6,132,13,"osVersion"],[151,15,132,22],[151,18,132,22,"exports"],[151,25,132,22],[151,26,132,22,"osVersion"],[151,35,132,22],[151,38,132,25,"ExpoDevice"],[151,57,132,35],[151,60,132,38,"ExpoDevice"],[151,79,132,48],[151,80,132,49,"osVersion"],[151,89,132,58],[151,92,132,61],[151,96,132,65],[152,2,133,0],[153,0,134,0],[154,0,135,0],[155,0,136,0],[156,0,137,0],[157,0,138,0],[158,0,139,0],[159,0,140,0],[160,0,141,0],[161,0,142,0],[162,2,143,7],[162,6,143,13,"osBuildId"],[162,15,143,22],[162,18,143,22,"exports"],[162,25,143,22],[162,26,143,22,"osBuildId"],[162,35,143,22],[162,38,143,25,"ExpoDevice"],[162,57,143,35],[162,60,143,38,"ExpoDevice"],[162,79,143,48],[162,80,143,49,"osBuildId"],[162,89,143,58],[162,92,143,61],[162,96,143,65],[163,2,144,0],[164,0,145,0],[165,0,146,0],[166,0,147,0],[167,0,148,0],[168,0,149,0],[169,0,150,0],[170,0,151,0],[171,0,152,0],[172,2,153,7],[172,6,153,13,"osInternalBuildId"],[172,23,153,30],[172,26,153,30,"exports"],[172,33,153,30],[172,34,153,30,"osInternalBuildId"],[172,51,153,30],[172,54,153,33,"ExpoDevice"],[172,73,153,43],[172,76,153,46,"ExpoDevice"],[172,95,153,56],[172,96,153,57,"osInternalBuildId"],[172,113,153,74],[172,116,153,77],[172,120,153,81],[173,2,154,0],[174,0,155,0],[175,0,156,0],[176,0,157,0],[177,0,158,0],[178,0,159,0],[179,0,160,0],[180,0,161,0],[181,0,162,0],[182,0,163,0],[183,0,164,0],[184,0,165,0],[185,0,166,0],[186,2,167,7],[186,6,167,13,"osBuildFingerprint"],[186,24,167,31],[186,27,167,31,"exports"],[186,34,167,31],[186,35,167,31,"osBuildFingerprint"],[186,53,167,31],[186,56,167,34,"ExpoDevice"],[186,75,167,44],[186,78,168,6,"ExpoDevice"],[186,97,168,16],[186,98,168,17,"osBuildFingerprint"],[186,116,168,35],[186,120,168,39],[186,124,168,43],[186,127,169,6],[186,131,169,10],[187,2,170,0],[188,0,171,0],[189,0,172,0],[190,0,173,0],[191,0,174,0],[192,0,175,0],[193,0,176,0],[194,0,177,0],[195,0,178,0],[196,0,179,0],[197,0,180,0],[198,2,181,7],[198,6,181,13,"platformApiLevel"],[198,22,181,29],[198,25,181,29,"exports"],[198,32,181,29],[198,33,181,29,"platformApiLevel"],[198,49,181,29],[198,52,181,32,"ExpoDevice"],[198,71,181,42],[198,74,182,6,"ExpoDevice"],[198,93,182,16],[198,94,182,17,"platformApiLevel"],[198,110,182,33],[198,114,182,37],[198,118,182,41],[198,121,183,6],[198,125,183,10],[199,2,184,0],[200,0,185,0],[201,0,186,0],[202,0,187,0],[203,0,188,0],[204,0,189,0],[205,0,190,0],[206,0,191,0],[207,0,192,0],[208,0,193,0],[209,0,194,0],[210,0,195,0],[211,2,196,7],[211,6,196,13,"deviceName"],[211,16,196,23],[211,19,196,23,"exports"],[211,26,196,23],[211,27,196,23,"deviceName"],[211,37,196,23],[211,40,196,26,"ExpoDevice"],[211,59,196,36],[211,62,196,39,"ExpoDevice"],[211,81,196,49],[211,82,196,50,"deviceName"],[211,92,196,60],[211,95,196,63],[211,99,196,67],[212,2,197,0],[213,0,198,0],[214,0,199,0],[215,0,200,0],[216,0,201,0],[217,0,202,0],[218,0,203,0],[219,0,204,0],[220,0,205,0],[221,0,206,0],[222,0,207,0],[223,0,208,0],[224,0,209,0],[225,0,210,0],[226,2,197,0],[226,11,211,22,"getDeviceTypeAsync"],[226,29,211,40,"getDeviceTypeAsync"],[226,30,211,40],[227,4,211,40],[227,11,211,40,"_getDeviceTypeAsync"],[227,30,211,40],[227,31,211,40,"apply"],[227,36,211,40],[227,43,211,40,"arguments"],[227,52,211,40],[228,2,211,40],[229,2,217,0],[230,0,218,0],[231,0,219,0],[232,0,220,0],[233,0,221,0],[234,0,222,0],[235,0,223,0],[236,0,224,0],[237,0,225,0],[238,0,226,0],[239,0,227,0],[240,2,217,0],[240,11,217,0,"_getDeviceTypeAsync"],[240,31,217,0],[241,4,217,0,"_getDeviceTypeAsync"],[241,23,217,0],[241,30,217,0,"_asyncToGenerator2"],[241,48,217,0],[241,49,217,0,"default"],[241,56,217,0],[241,58,211,7],[241,71,211,43],[242,6,212,4],[242,10,212,8],[242,11,212,9,"ExpoDevice"],[242,30,212,19],[242,31,212,20,"getDeviceTypeAsync"],[242,49,212,38],[242,51,212,40],[243,8,213,8],[243,14,213,14],[243,18,213,18,"UnavailabilityError"],[243,54,213,37],[243,55,213,38],[243,68,213,51],[243,70,213,53],[243,90,213,73],[243,91,213,74],[244,6,214,4],[245,6,215,4],[245,19,215,17,"ExpoDevice"],[245,38,215,27],[245,39,215,28,"getDeviceTypeAsync"],[245,57,215,46],[245,58,215,47],[245,59,215,48],[246,4,216,0],[246,5,216,1],[247,4,216,1],[247,11,216,1,"_getDeviceTypeAsync"],[247,30,216,1],[247,31,216,1,"apply"],[247,36,216,1],[247,43,216,1,"arguments"],[247,52,216,1],[248,2,216,1],[249,2,216,1],[249,11,228,22,"getUptimeAsync"],[249,25,228,36,"getUptimeAsync"],[249,26,228,36],[250,4,228,36],[250,11,228,36,"_getUptimeAsync"],[250,26,228,36],[250,27,228,36,"apply"],[250,32,228,36],[250,39,228,36,"arguments"],[250,48,228,36],[251,2,228,36],[252,2,234,0],[253,0,235,0],[254,0,236,0],[255,0,237,0],[256,0,238,0],[257,0,239,0],[258,0,240,0],[259,0,241,0],[260,0,242,0],[261,0,243,0],[262,2,234,0],[262,11,234,0,"_getUptimeAsync"],[262,27,234,0],[263,4,234,0,"_getUptimeAsync"],[263,19,234,0],[263,26,234,0,"_asyncToGenerator2"],[263,44,234,0],[263,45,234,0,"default"],[263,52,234,0],[263,54,228,7],[263,67,228,39],[264,6,229,4],[264,10,229,8],[264,11,229,9,"ExpoDevice"],[264,30,229,19],[264,31,229,20,"getUptimeAsync"],[264,45,229,34],[264,47,229,36],[265,8,230,8],[265,14,230,14],[265,18,230,18,"UnavailabilityError"],[265,54,230,37],[265,55,230,38],[265,68,230,51],[265,70,230,53],[265,86,230,69],[265,87,230,70],[266,6,231,4],[267,6,232,4],[267,19,232,17,"ExpoDevice"],[267,38,232,27],[267,39,232,28,"getUptimeAsync"],[267,53,232,42],[267,54,232,43],[267,55,232,44],[268,4,233,0],[268,5,233,1],[269,4,233,1],[269,11,233,1,"_getUptimeAsync"],[269,26,233,1],[269,27,233,1,"apply"],[269,32,233,1],[269,39,233,1,"arguments"],[269,48,233,1],[270,2,233,1],[271,2,233,1],[271,11,244,22,"getMaxMemoryAsync"],[271,28,244,39,"getMaxMemoryAsync"],[271,29,244,39],[272,4,244,39],[272,11,244,39,"_getMaxMemoryAsync"],[272,29,244,39],[272,30,244,39,"apply"],[272,35,244,39],[272,42,244,39,"arguments"],[272,51,244,39],[273,2,244,39],[274,2,254,0],[275,0,255,0],[276,0,256,0],[277,0,257,0],[278,0,258,0],[279,0,259,0],[280,0,260,0],[281,0,261,0],[282,0,262,0],[283,0,263,0],[284,0,264,0],[285,0,265,0],[286,0,266,0],[287,0,267,0],[288,0,268,0],[289,0,269,0],[290,2,254,0],[290,11,254,0,"_getMaxMemoryAsync"],[290,30,254,0],[291,4,254,0,"_getMaxMemoryAsync"],[291,22,254,0],[291,29,254,0,"_asyncToGenerator2"],[291,47,254,0],[291,48,254,0,"default"],[291,55,254,0],[291,57,244,7],[291,70,244,42],[292,6,245,4],[292,10,245,8],[292,11,245,9,"ExpoDevice"],[292,30,245,19],[292,31,245,20,"getMaxMemoryAsync"],[292,48,245,37],[292,50,245,39],[293,8,246,8],[293,14,246,14],[293,18,246,18,"UnavailabilityError"],[293,54,246,37],[293,55,246,38],[293,68,246,51],[293,70,246,53],[293,89,246,72],[293,90,246,73],[294,6,247,4],[295,6,248,4],[295,10,248,8,"maxMemory"],[295,19,248,17],[295,28,248,26,"ExpoDevice"],[295,47,248,36],[295,48,248,37,"getMaxMemoryAsync"],[295,65,248,54],[295,66,248,55],[295,67,248,56],[296,6,249,4],[296,10,249,8,"maxMemory"],[296,19,249,17],[296,24,249,22],[296,25,249,23],[296,26,249,24],[296,28,249,26],[297,8,250,8,"maxMemory"],[297,17,250,17],[297,20,250,20,"Number"],[297,26,250,26],[297,27,250,27,"MAX_SAFE_INTEGER"],[297,43,250,43],[298,6,251,4],[299,6,252,4],[299,13,252,11,"maxMemory"],[299,22,252,20],[300,4,253,0],[300,5,253,1],[301,4,253,1],[301,11,253,1,"_getMaxMemoryAsync"],[301,29,253,1],[301,30,253,1,"apply"],[301,35,253,1],[301,42,253,1,"arguments"],[301,51,253,1],[302,2,253,1],[303,2,253,1],[303,11,270,22,"isRootedExperimentalAsync"],[303,36,270,47,"isRootedExperimentalAsync"],[303,37,270,47],[304,4,270,47],[304,11,270,47,"_isRootedExperimentalAsync"],[304,37,270,47],[304,38,270,47,"apply"],[304,43,270,47],[304,50,270,47,"arguments"],[304,59,270,47],[305,2,270,47],[306,2,276,0],[307,0,277,0],[308,0,278,0],[309,0,279,0],[310,0,280,0],[311,0,281,0],[312,0,282,0],[313,0,283,0],[314,0,284,0],[315,0,285,0],[316,0,286,0],[317,0,287,0],[318,2,276,0],[318,11,276,0,"_isRootedExperimentalAsync"],[318,38,276,0],[319,4,276,0,"_isRootedExperimentalAsync"],[319,30,276,0],[319,37,276,0,"_asyncToGenerator2"],[319,55,276,0],[319,56,276,0,"default"],[319,63,276,0],[319,65,270,7],[319,78,270,50],[320,6,271,4],[320,10,271,8],[320,11,271,9,"ExpoDevice"],[320,30,271,19],[320,31,271,20,"isRootedExperimentalAsync"],[320,56,271,45],[320,58,271,47],[321,8,272,8],[321,14,272,14],[321,18,272,18,"UnavailabilityError"],[321,54,272,37],[321,55,272,38],[321,68,272,51],[321,70,272,53],[321,97,272,80],[321,98,272,81],[322,6,273,4],[323,6,274,4],[323,19,274,17,"ExpoDevice"],[323,38,274,27],[323,39,274,28,"isRootedExperimentalAsync"],[323,64,274,53],[323,65,274,54],[323,66,274,55],[324,4,275,0],[324,5,275,1],[325,4,275,1],[325,11,275,1,"_isRootedExperimentalAsync"],[325,37,275,1],[325,38,275,1,"apply"],[325,43,275,1],[325,50,275,1,"arguments"],[325,59,275,1],[326,2,275,1],[327,2,275,1],[327,11,288,22,"isSideLoadingEnabledAsync"],[327,36,288,47,"isSideLoadingEnabledAsync"],[327,37,288,47],[328,4,288,47],[328,11,288,47,"_isSideLoadingEnabledAsync"],[328,37,288,47],[328,38,288,47,"apply"],[328,43,288,47],[328,50,288,47,"arguments"],[328,59,288,47],[329,2,288,47],[330,2,294,0],[331,0,295,0],[332,0,296,0],[333,0,297,0],[334,0,298,0],[335,0,299,0],[336,0,300,0],[337,0,301,0],[338,0,302,0],[339,0,303,0],[340,0,304,0],[341,0,305,0],[342,0,306,0],[343,0,307,0],[344,0,308,0],[345,0,309,0],[346,0,310,0],[347,0,311,0],[348,2,294,0],[348,11,294,0,"_isSideLoadingEnabledAsync"],[348,38,294,0],[349,4,294,0,"_isSideLoadingEnabledAsync"],[349,30,294,0],[349,37,294,0,"_asyncToGenerator2"],[349,55,294,0],[349,56,294,0,"default"],[349,63,294,0],[349,65,288,7],[349,78,288,50],[350,6,289,4],[350,10,289,8],[350,11,289,9,"ExpoDevice"],[350,30,289,19],[350,31,289,20,"isSideLoadingEnabledAsync"],[350,56,289,45],[350,58,289,47],[351,8,290,8],[351,14,290,14],[351,18,290,18,"UnavailabilityError"],[351,54,290,37],[351,55,290,38],[351,68,290,51],[351,70,290,53],[351,97,290,80],[351,98,290,81],[352,6,291,4],[353,6,292,4],[353,19,292,17,"ExpoDevice"],[353,38,292,27],[353,39,292,28,"isSideLoadingEnabledAsync"],[353,64,292,53],[353,65,292,54],[353,66,292,55],[354,4,293,0],[354,5,293,1],[355,4,293,1],[355,11,293,1,"_isSideLoadingEnabledAsync"],[355,37,293,1],[355,38,293,1,"apply"],[355,43,293,1],[355,50,293,1,"arguments"],[355,59,293,1],[356,2,293,1],[357,2,293,1],[357,11,312,22,"getPlatformFeaturesAsync"],[357,35,312,46,"getPlatformFeaturesAsync"],[357,36,312,46],[358,4,312,46],[358,11,312,46,"_getPlatformFeaturesAsync"],[358,36,312,46],[358,37,312,46,"apply"],[358,42,312,46],[358,49,312,46,"arguments"],[358,58,312,46],[359,2,312,46],[360,2,318,0],[361,0,319,0],[362,0,320,0],[363,0,321,0],[364,0,322,0],[365,0,323,0],[366,0,324,0],[367,0,325,0],[368,0,326,0],[369,0,327,0],[370,0,328,0],[371,0,329,0],[372,0,330,0],[373,2,318,0],[373,11,318,0,"_getPlatformFeaturesAsync"],[373,37,318,0],[374,4,318,0,"_getPlatformFeaturesAsync"],[374,29,318,0],[374,36,318,0,"_asyncToGenerator2"],[374,54,318,0],[374,55,318,0,"default"],[374,62,318,0],[374,64,312,7],[374,77,312,49],[375,6,313,4],[375,10,313,8],[375,11,313,9,"ExpoDevice"],[375,30,313,19],[375,31,313,20,"getPlatformFeaturesAsync"],[375,55,313,44],[375,57,313,46],[376,8,314,8],[376,15,314,15],[376,17,314,17],[377,6,315,4],[378,6,316,4],[378,19,316,17,"ExpoDevice"],[378,38,316,27],[378,39,316,28,"getPlatformFeaturesAsync"],[378,63,316,52],[378,64,316,53],[378,65,316,54],[379,4,317,0],[379,5,317,1],[380,4,317,1],[380,11,317,1,"_getPlatformFeaturesAsync"],[380,36,317,1],[380,37,317,1,"apply"],[380,42,317,1],[380,49,317,1,"arguments"],[380,58,317,1],[381,2,317,1],[382,2,317,1],[382,11,331,22,"hasPlatformFeatureAsync"],[382,34,331,45,"hasPlatformFeatureAsync"],[382,35,331,45,"_x"],[382,37,331,45],[383,4,331,45],[383,11,331,45,"_hasPlatformFeatureAsync"],[383,35,331,45],[383,36,331,45,"apply"],[383,41,331,45],[383,48,331,45,"arguments"],[383,57,331,45],[384,2,331,45],[385,2,331,45],[385,11,331,45,"_hasPlatformFeatureAsync"],[385,36,331,45],[386,4,331,45,"_hasPlatformFeatureAsync"],[386,28,331,45],[386,35,331,45,"_asyncToGenerator2"],[386,53,331,45],[386,54,331,45,"default"],[386,61,331,45],[386,63,331,7],[386,74,331,46,"feature"],[386,81,331,53],[386,83,331,55],[387,6,332,4],[387,10,332,8],[387,11,332,9,"ExpoDevice"],[387,30,332,19],[387,31,332,20,"hasPlatformFeatureAsync"],[387,54,332,43],[387,56,332,45],[388,8,333,8],[388,15,333,15],[388,20,333,20],[389,6,334,4],[390,6,335,4],[390,19,335,17,"ExpoDevice"],[390,38,335,27],[390,39,335,28,"hasPlatformFeatureAsync"],[390,62,335,51],[390,63,335,52,"feature"],[390,70,335,59],[390,71,335,60],[391,4,336,0],[391,5,336,1],[392,4,336,1],[392,11,336,1,"_hasPlatformFeatureAsync"],[392,35,336,1],[392,36,336,1,"apply"],[392,41,336,1],[392,48,336,1,"arguments"],[392,57,336,1],[393,2,336,1],[394,0,336,1],[394,3]],"functionMap":{"names":["<global>","getDeviceTypeAsync","getUptimeAsync","getMaxMemoryAsync","isRootedExperimentalAsync","isSideLoadingEnabledAsync","getPlatformFeaturesAsync","hasPlatformFeatureAsync"],"mappings":"AAA;OCkN;CDK;OEY;CFK;OGW;CHS;OIiB;CJK;OKa;CLK;OMmB;CNK;OOc;CPK"}},"type":"js/module"}]}