{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.parseJSON = parseJSON;\n  var _toDate = require(_dependencyMap[0], \"./toDate.js\");\n  /**\n   * The {@link parseJSON} function options.\n   */\n\n  /**\n   * Converts a complete ISO date string in UTC time, the typical format for transmitting\n   * a date in JSON, to a JavaScript `Date` instance.\n   *\n   * This is a minimal implementation for converting dates retrieved from a JSON API to\n   * a `Date` instance which can be used with other functions in the `date-fns` library.\n   * The following formats are supported:\n   *\n   * - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`\n   * - `2000-03-15T05:20:10Z`: Without milliseconds\n   * - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages\n   * - `2000-03-15T05:20:10+05:45`: With a positive or negative offset, the default JSON encoded format in some other languages\n   * - `2000-03-15T05:20:10+0000`: With a zero offset without a colon\n   * - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol\n   * - `2000-03-15T05:20:10.1234567`: Up to 7 digits in milliseconds field. Only first 3 are taken into account since JS does not allow fractional milliseconds\n   * - `2000-03-15 05:20:10`: With a space instead of a 'T' separator for APIs returning a SQL date without reformatting\n   *\n   * For convenience and ease of use these other input types are also supported\n   * via [toDate](https://date-fns.org/docs/toDate):\n   *\n   * - A `Date` instance will be cloned\n   * - A `number` will be treated as a timestamp\n   *\n   * Any other input type or invalid date strings will return an `Invalid Date`.\n   *\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param dateStr - A fully formed ISO8601 date string to convert\n   * @param options - An object with options\n   *\n   * @returns The parsed date in the local time zone\n   */\n  function parseJSON(dateStr, options) {\n    var parts = dateStr.match(/(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{0,7}))?(?:Z|(.)(\\d{2}):?(\\d{2})?)?/);\n    if (!parts) return (0, _toDate.toDate)(NaN, options?.in);\n    return (0, _toDate.toDate)(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4] - (+parts[9] || 0) * (parts[8] == \"-\" ? -1 : 1), +parts[5] - (+parts[10] || 0) * (parts[8] == \"-\" ? -1 : 1), +parts[6], +((parts[7] || \"0\") + \"00\").substring(0, 3)), options?.in);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = parseJSON;\n});","lineCount":52,"map":[[7,2,1,0],[7,6,1,0,"_toDate"],[7,13,1,0],[7,16,1,0,"require"],[7,23,1,0],[7,24,1,0,"_dependencyMap"],[7,38,1,0],[8,2,3,0],[9,0,4,0],[10,0,5,0],[12,2,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,2,39,7],[44,11,39,16,"parseJSON"],[44,20,39,25,"parseJSON"],[44,21,39,26,"dateStr"],[44,28,39,33],[44,30,39,35,"options"],[44,37,39,42],[44,39,39,44],[45,4,40,2],[45,8,40,8,"parts"],[45,13,40,13],[45,16,40,16,"dateStr"],[45,23,40,23],[45,24,40,24,"match"],[45,29,40,29],[45,30,41,4],[45,125,42,2],[45,126,42,3],[46,4,44,2],[46,8,44,6],[46,9,44,7,"parts"],[46,14,44,12],[46,16,44,14],[46,23,44,21],[46,27,44,21,"toDate"],[46,41,44,27],[46,43,44,28,"NaN"],[46,46,44,31],[46,48,44,33,"options"],[46,55,44,40],[46,57,44,42,"in"],[46,59,44,44],[46,60,44,45],[47,4,46,2],[47,11,46,9],[47,15,46,9,"toDate"],[47,29,46,15],[47,31,47,4,"Date"],[47,35,47,8],[47,36,47,9,"UTC"],[47,39,47,12],[47,40,48,6],[47,41,48,7,"parts"],[47,46,48,12],[47,47,48,13],[47,48,48,14],[47,49,48,15],[47,51,49,6],[47,52,49,7,"parts"],[47,57,49,12],[47,58,49,13],[47,59,49,14],[47,60,49,15],[47,63,49,18],[47,64,49,19],[47,66,50,6],[47,67,50,7,"parts"],[47,72,50,12],[47,73,50,13],[47,74,50,14],[47,75,50,15],[47,77,51,6],[47,78,51,7,"parts"],[47,83,51,12],[47,84,51,13],[47,85,51,14],[47,86,51,15],[47,89,51,18],[47,90,51,19],[47,91,51,20,"parts"],[47,96,51,25],[47,97,51,26],[47,98,51,27],[47,99,51,28],[47,103,51,32],[47,104,51,33],[47,109,51,38,"parts"],[47,114,51,43],[47,115,51,44],[47,116,51,45],[47,117,51,46],[47,121,51,50],[47,124,51,53],[47,127,51,56],[47,128,51,57],[47,129,51,58],[47,132,51,61],[47,133,51,62],[47,134,51,63],[47,136,52,6],[47,137,52,7,"parts"],[47,142,52,12],[47,143,52,13],[47,144,52,14],[47,145,52,15],[47,148,52,18],[47,149,52,19],[47,150,52,20,"parts"],[47,155,52,25],[47,156,52,26],[47,158,52,28],[47,159,52,29],[47,163,52,33],[47,164,52,34],[47,169,52,39,"parts"],[47,174,52,44],[47,175,52,45],[47,176,52,46],[47,177,52,47],[47,181,52,51],[47,184,52,54],[47,187,52,57],[47,188,52,58],[47,189,52,59],[47,192,52,62],[47,193,52,63],[47,194,52,64],[47,196,53,6],[47,197,53,7,"parts"],[47,202,53,12],[47,203,53,13],[47,204,53,14],[47,205,53,15],[47,207,54,6],[47,208,54,7],[47,209,54,8],[47,210,54,9,"parts"],[47,215,54,14],[47,216,54,15],[47,217,54,16],[47,218,54,17],[47,222,54,21],[47,225,54,24],[47,229,54,28],[47,233,54,32],[47,235,54,34,"substring"],[47,244,54,43],[47,245,54,44],[47,246,54,45],[47,248,54,47],[47,249,54,48],[47,250,55,4],[47,251,55,5],[47,253,56,4,"options"],[47,260,56,11],[47,262,56,13,"in"],[47,264,57,2],[47,265,57,3],[48,2,58,0],[50,2,60,0],[51,2,60,0],[51,6,60,0,"_default"],[51,14,60,0],[51,17,60,0,"exports"],[51,24,60,0],[51,25,60,0,"default"],[51,32,60,0],[51,35,61,15,"parseJSON"],[51,44,61,24],[52,0,61,24],[52,3]],"functionMap":{"names":["<global>","parseJSON"],"mappings":"AAA;OCsC;CDmB"}},"type":"js/module"}]}