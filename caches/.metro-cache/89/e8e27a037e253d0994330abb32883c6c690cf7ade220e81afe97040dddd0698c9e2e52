{"dependencies":[{"name":"./_lib/getRoundingMethod.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"LkiOAV1LQTQ7MnwpzKKtm1nDXGQ=","exportNames":["*"]}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}},{"name":"./toDate.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":117},"end":{"line":3,"column":37,"index":154}}],"key":"RegFU1ZGEd4LY/vrIDYZdnoZzIk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.roundToNearestMinutes = roundToNearestMinutes;\n  var _getRoundingMethod = require(_dependencyMap[0], \"./_lib/getRoundingMethod.js\");\n  var _constructFrom = require(_dependencyMap[1], \"./constructFrom.js\");\n  var _toDate = require(_dependencyMap[2], \"./toDate.js\");\n  /**\n   * The {@link roundToNearestMinutes} function options.\n   */\n\n  /**\n   * @name roundToNearestMinutes\n   * @category Minute Helpers\n   * @summary Rounds the given date to the nearest minute\n   *\n   * @description\n   * Rounds the given date to the nearest minute (or number of minutes).\n   * Rounds up when the given date is exactly between the nearest round minutes.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to round\n   * @param options - An object with options.\n   *\n   * @returns The new date rounded to the closest minute\n   *\n   * @example\n   * // Round 10 July 2014 12:12:34 to nearest minute:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n   * //=> Thu Jul 10 2014 12:13:00\n   *\n   * @example\n   * // Round 10 July 2014 12:12:34 to nearest quarter hour:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n   * //=> Thu Jul 10 2014 12:15:00\n   *\n   * @example\n   * // Floor (rounds down) 10 July 2014 12:12:34 to nearest minute:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'floor' })\n   * //=> Thu Jul 10 2014 12:12:00\n   *\n   * @example\n   * // Ceil (rounds up) 10 July 2014 12:12:34 to nearest half hour:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'ceil', nearestTo: 30 })\n   * //=> Thu Jul 10 2014 12:30:00\n   */\n  function roundToNearestMinutes(date, options) {\n    var nearestTo = options?.nearestTo ?? 1;\n    if (nearestTo < 1 || nearestTo > 30) return (0, _constructFrom.constructFrom)(date, NaN);\n    var date_ = (0, _toDate.toDate)(date, options?.in);\n    var fractionalSeconds = date_.getSeconds() / 60;\n    var fractionalMilliseconds = date_.getMilliseconds() / 1000 / 60;\n    var minutes = date_.getMinutes() + fractionalSeconds + fractionalMilliseconds;\n    var method = options?.roundingMethod ?? \"round\";\n    var roundingMethod = (0, _getRoundingMethod.getRoundingMethod)(method);\n    var roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n    date_.setMinutes(roundedMinutes, 0, 0);\n    return date_;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = roundToNearestMinutes;\n});","lineCount":67,"map":[[7,2,1,0],[7,6,1,0,"_getRoundingMethod"],[7,24,1,0],[7,27,1,0,"require"],[7,34,1,0],[7,35,1,0,"_dependencyMap"],[7,49,1,0],[8,2,2,0],[8,6,2,0,"_constructFrom"],[8,20,2,0],[8,23,2,0,"require"],[8,30,2,0],[8,31,2,0,"_dependencyMap"],[8,45,2,0],[9,2,3,0],[9,6,3,0,"_toDate"],[9,13,3,0],[9,16,3,0,"require"],[9,23,3,0],[9,24,3,0,"_dependencyMap"],[9,38,3,0],[10,2,5,0],[11,0,6,0],[12,0,7,0],[14,2,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,2,46,7],[51,11,46,16,"roundToNearestMinutes"],[51,32,46,37,"roundToNearestMinutes"],[51,33,46,38,"date"],[51,37,46,42],[51,39,46,44,"options"],[51,46,46,51],[51,48,46,53],[52,4,47,2],[52,8,47,8,"nearestTo"],[52,17,47,17],[52,20,47,20,"options"],[52,27,47,27],[52,29,47,29,"nearestTo"],[52,38,47,38],[52,42,47,42],[52,43,47,43],[53,4,49,2],[53,8,49,6,"nearestTo"],[53,17,49,15],[53,20,49,18],[53,21,49,19],[53,25,49,23,"nearestTo"],[53,34,49,32],[53,37,49,35],[53,39,49,37],[53,41,49,39],[53,48,49,46],[53,52,49,46,"constructFrom"],[53,80,49,59],[53,82,49,60,"date"],[53,86,49,64],[53,88,49,66,"NaN"],[53,91,49,69],[53,92,49,70],[54,4,51,2],[54,8,51,8,"date_"],[54,13,51,13],[54,16,51,16],[54,20,51,16,"toDate"],[54,34,51,22],[54,36,51,23,"date"],[54,40,51,27],[54,42,51,29,"options"],[54,49,51,36],[54,51,51,38,"in"],[54,53,51,40],[54,54,51,41],[55,4,52,2],[55,8,52,8,"fractionalSeconds"],[55,25,52,25],[55,28,52,28,"date_"],[55,33,52,33],[55,34,52,34,"getSeconds"],[55,44,52,44],[55,45,52,45],[55,46,52,46],[55,49,52,49],[55,51,52,51],[56,4,53,2],[56,8,53,8,"fractionalMilliseconds"],[56,30,53,30],[56,33,53,33,"date_"],[56,38,53,38],[56,39,53,39,"getMilliseconds"],[56,54,53,54],[56,55,53,55],[56,56,53,56],[56,59,53,59],[56,63,53,63],[56,66,53,66],[56,68,53,68],[57,4,54,2],[57,8,54,8,"minutes"],[57,15,54,15],[57,18,55,4,"date_"],[57,23,55,9],[57,24,55,10,"getMinutes"],[57,34,55,20],[57,35,55,21],[57,36,55,22],[57,39,55,25,"fractionalSeconds"],[57,56,55,42],[57,59,55,45,"fractionalMilliseconds"],[57,81,55,67],[58,4,57,2],[58,8,57,8,"method"],[58,14,57,14],[58,17,57,17,"options"],[58,24,57,24],[58,26,57,26,"roundingMethod"],[58,40,57,40],[58,44,57,44],[58,51,57,51],[59,4,58,2],[59,8,58,8,"roundingMethod"],[59,22,58,22],[59,25,58,25],[59,29,58,25,"getRoundingMethod"],[59,65,58,42],[59,67,58,43,"method"],[59,73,58,49],[59,74,58,50],[60,4,60,2],[60,8,60,8,"roundedMinutes"],[60,22,60,22],[60,25,60,25,"roundingMethod"],[60,39,60,39],[60,40,60,40,"minutes"],[60,47,60,47],[60,50,60,50,"nearestTo"],[60,59,60,59],[60,60,60,60],[60,63,60,63,"nearestTo"],[60,72,60,72],[61,4,62,2,"date_"],[61,9,62,7],[61,10,62,8,"setMinutes"],[61,20,62,18],[61,21,62,19,"roundedMinutes"],[61,35,62,33],[61,37,62,35],[61,38,62,36],[61,40,62,38],[61,41,62,39],[61,42,62,40],[62,4,63,2],[62,11,63,9,"date_"],[62,16,63,14],[63,2,64,0],[65,2,66,0],[66,2,66,0],[66,6,66,0,"_default"],[66,14,66,0],[66,17,66,0,"exports"],[66,24,66,0],[66,25,66,0,"default"],[66,32,66,0],[66,35,67,15,"roundToNearestMinutes"],[66,56,67,36],[67,0,67,36],[67,3]],"functionMap":{"names":["<global>","roundToNearestMinutes"],"mappings":"AAA;OC6C;CDkB"}},"type":"js/module"}]}