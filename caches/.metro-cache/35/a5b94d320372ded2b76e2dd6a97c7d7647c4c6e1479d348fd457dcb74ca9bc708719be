{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"./safetyMapService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"DrTBf6AwaPYmvXRrqU0biJaTooc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getSafestRoute = exports.getRoutesFromGoogle = exports.getFastestRoute = exports.decodePolyline = exports.calculateSafetyScore = exports.calculateRouteSafetyScore = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _safetyMapService = require(_dependencyMap[2], \"./safetyMapService\");\n  var GOOGLE_MAPS_API_KEY = 'AIzaSyDKz4KM0oHphvPQtM7DhG9QfpaHp4ql4bM';\n\n  /**\r\n   * Calculate weighted safety score for a route segment\r\n   * @param {Object} point - {latitude, longitude}\r\n   * @param {Array} safetyMarkers - Array of all safety markers\r\n   * @param {number} influenceRadius - Radius in km where markers affect score\r\n   * @returns {number} - Safety score (0-100, higher is safer)\r\n   */\n  var calculateSafetyScore = function (point, safetyMarkers) {\n    var influenceRadius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;\n    var score = 50; // Neutral starting score\n\n    safetyMarkers.forEach(marker => {\n      var distance = (0, _safetyMapService.calculateDistance)(point.latitude, point.longitude, marker.coordinates.latitude, marker.coordinates.longitude);\n\n      // Only consider markers within influence radius\n      if (distance <= influenceRadius) {\n        // Calculate influence strength (closer = stronger influence)\n        var influence = 1 - distance / influenceRadius;\n\n        // Apply marker influence based on status and upvotes\n        var upvoteMultiplier = 1 + marker.upvotes * 0.1; // Each upvote adds 10% weight\n\n        if (marker.status === 'safe') {\n          score += 30 * influence * upvoteMultiplier;\n        } else if (marker.status === 'caution') {\n          score -= 15 * influence * upvoteMultiplier;\n        } else if (marker.status === 'unsafe') {\n          score -= 40 * influence * upvoteMultiplier;\n        }\n      }\n    });\n\n    // Clamp score between 0 and 100\n    return Math.max(0, Math.min(100, score));\n  };\n\n  /**\r\n   * Get route from Google Directions API\r\n   * @param {Object} origin - {latitude, longitude}\r\n   * @param {Object} destination - {latitude, longitude}\r\n   * @param {boolean} alternatives - Whether to request alternative routes\r\n   * @returns {Promise<Array>} - Array of route objects\r\n   */\n  exports.calculateSafetyScore = calculateSafetyScore;\n  var getRoutesFromGoogle = exports.getRoutesFromGoogle = /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* (origin, destination) {\n      var alternatives = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      try {\n        var url = `https://maps.googleapis.com/maps/api/directions/json?origin=${origin.latitude},${origin.longitude}&destination=${destination.latitude},${destination.longitude}&alternatives=${alternatives}&mode=walking&key=${GOOGLE_MAPS_API_KEY}`;\n        var response = yield fetch(url);\n        var data = yield response.json();\n        if (data.status !== 'OK') {\n          console.error('Google Directions API error:', data.status, data.error_message);\n          throw new Error(data.error_message || 'Failed to get routes');\n        }\n        return data.routes.map(route => ({\n          polyline: route.overview_polyline.points,\n          distance: route.legs[0].distance.value,\n          // in meters\n          duration: route.legs[0].duration.value,\n          // in seconds\n          steps: route.legs[0].steps,\n          bounds: route.bounds\n        }));\n      } catch (error) {\n        console.error('Error fetching routes from Google:', error);\n        throw error;\n      }\n    });\n    return function getRoutesFromGoogle(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  /**\r\n   * Decode Google polyline to coordinates\r\n   * @param {string} encoded - Encoded polyline string\r\n   * @returns {Array} - Array of {latitude, longitude}\r\n   */\n  var decodePolyline = encoded => {\n    var points = [];\n    var index = 0;\n    var len = encoded.length;\n    var lat = 0;\n    var lng = 0;\n    while (index < len) {\n      var b = void 0;\n      var shift = 0;\n      var result = 0;\n      do {\n        b = encoded.charCodeAt(index++) - 63;\n        result |= (b & 0x1f) << shift;\n        shift += 5;\n      } while (b >= 0x20);\n      var dlat = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n      lat += dlat;\n      shift = 0;\n      result = 0;\n      do {\n        b = encoded.charCodeAt(index++) - 63;\n        result |= (b & 0x1f) << shift;\n        shift += 5;\n      } while (b >= 0x20);\n      var dlng = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n      lng += dlng;\n      points.push({\n        latitude: lat / 1e5,\n        longitude: lng / 1e5\n      });\n    }\n    return points;\n  };\n\n  /**\r\n   * Calculate safety score for entire route\r\n   * @param {Array} routePoints - Array of {latitude, longitude}\r\n   * @param {Array} safetyMarkers - Array of safety markers\r\n   * @returns {number} - Average safety score for route\r\n   */\n  exports.decodePolyline = decodePolyline;\n  var calculateRouteSafetyScore = (routePoints, safetyMarkers) => {\n    if (!routePoints || routePoints.length === 0) return 50;\n\n    // Sample points along route (every ~50 meters worth of points)\n    var samplingInterval = Math.max(1, Math.floor(routePoints.length / 20));\n    var sampledPoints = routePoints.filter((_, index) => index % samplingInterval === 0);\n\n    // Calculate safety score for each sampled point\n    var scores = sampledPoints.map(point => calculateSafetyScore(point, safetyMarkers));\n\n    // Return average score\n    var averageScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n    return Math.round(averageScore);\n  };\n\n  /**\r\n   * Get safest route considering safety markers\r\n   * @param {Object} origin - {latitude, longitude}\r\n   * @param {Object} destination - {latitude, longitude}\r\n   * @param {Array} safetyMarkers - Array of safety markers\r\n   * @returns {Promise<Object>} - Best route with safety information\r\n   */\n  exports.calculateRouteSafetyScore = calculateRouteSafetyScore;\n  var getSafestRoute = exports.getSafestRoute = /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2.default)(function* (origin, destination, safetyMarkers) {\n      try {\n        console.log('Calculating safest route...');\n\n        // Get alternative routes from Google\n        var routes = yield getRoutesFromGoogle(origin, destination, true);\n        if (!routes || routes.length === 0) {\n          throw new Error('No routes found');\n        }\n\n        // Analyze each route\n        var analyzedRoutes = routes.map(route => {\n          var points = decodePolyline(route.polyline);\n          var safetyScore = calculateRouteSafetyScore(points, safetyMarkers);\n          return {\n            ...route,\n            points,\n            safetyScore,\n            // Calculate weighted score combining safety and distance\n            // Prioritize safety but also consider distance\n            weightedScore: safetyScore * 0.7 + (1 - route.distance / 10000) * 30\n          };\n        });\n\n        // Sort by weighted score (highest = best)\n        analyzedRoutes.sort((a, b) => b.weightedScore - a.weightedScore);\n        var bestRoute = analyzedRoutes[0];\n        console.log(`Found ${analyzedRoutes.length} routes:`);\n        analyzedRoutes.forEach((route, index) => {\n          console.log(`  Route ${index + 1}: Safety ${route.safetyScore}/100, Distance ${(route.distance / 1000).toFixed(2)}km, Weighted ${route.weightedScore.toFixed(1)}`);\n        });\n        return {\n          route: bestRoute,\n          alternatives: analyzedRoutes.slice(1)\n        };\n      } catch (error) {\n        console.error('Error calculating safest route:', error);\n        throw error;\n      }\n    });\n    return function getSafestRoute(_x3, _x4, _x5) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  /**\r\n   * Get fastest route (standard Google route)\r\n   * @param {Object} origin - {latitude, longitude}\r\n   * @param {Object} destination - {latitude, longitude}\r\n   * @returns {Promise<Object>} - Fastest route\r\n   */\n  var getFastestRoute = exports.getFastestRoute = /*#__PURE__*/function () {\n    var _ref3 = (0, _asyncToGenerator2.default)(function* (origin, destination) {\n      try {\n        var routes = yield getRoutesFromGoogle(origin, destination, false);\n        if (!routes || routes.length === 0) {\n          throw new Error('No routes found');\n        }\n        var route = routes[0];\n        return {\n          ...route,\n          points: decodePolyline(route.polyline)\n        };\n      } catch (error) {\n        console.error('Error getting fastest route:', error);\n        throw error;\n      }\n    });\n    return function getFastestRoute(_x6, _x7) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n});","lineCount":227,"map":[[8,2,1,0],[8,6,1,0,"_safetyMapService"],[8,23,1,0],[8,26,1,0,"require"],[8,33,1,0],[8,34,1,0,"_dependencyMap"],[8,48,1,0],[9,2,3,0],[9,6,3,6,"GOOGLE_MAPS_API_KEY"],[9,25,3,25],[9,28,3,28],[9,69,3,69],[11,2,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,2,12,7],[18,6,12,13,"calculateSafetyScore"],[18,26,12,33],[18,29,12,36],[18,38,12,36,"calculateSafetyScore"],[18,39,12,37,"point"],[18,44,12,42],[18,46,12,44,"safetyMarkers"],[18,59,12,57],[18,61,12,85],[19,4,12,85],[19,8,12,59,"influenceRadius"],[19,23,12,74],[19,26,12,74,"arguments"],[19,35,12,74],[19,36,12,74,"length"],[19,42,12,74],[19,50,12,74,"arguments"],[19,59,12,74],[19,67,12,74,"undefined"],[19,76,12,74],[19,79,12,74,"arguments"],[19,88,12,74],[19,94,12,77],[19,97,12,80],[20,4,13,2],[20,8,13,6,"score"],[20,13,13,11],[20,16,13,14],[20,18,13,16],[20,19,13,17],[20,20,13,18],[22,4,15,2,"safetyMarkers"],[22,17,15,15],[22,18,15,16,"forEach"],[22,25,15,23],[22,26,15,24,"marker"],[22,32,15,30],[22,36,15,34],[23,6,16,4],[23,10,16,10,"distance"],[23,18,16,18],[23,21,16,21],[23,25,16,21,"calculateDistance"],[23,60,16,38],[23,62,17,6,"point"],[23,67,17,11],[23,68,17,12,"latitude"],[23,76,17,20],[23,78,18,6,"point"],[23,83,18,11],[23,84,18,12,"longitude"],[23,93,18,21],[23,95,19,6,"marker"],[23,101,19,12],[23,102,19,13,"coordinates"],[23,113,19,24],[23,114,19,25,"latitude"],[23,122,19,33],[23,124,20,6,"marker"],[23,130,20,12],[23,131,20,13,"coordinates"],[23,142,20,24],[23,143,20,25,"longitude"],[23,152,21,4],[23,153,21,5],[25,6,23,4],[26,6,24,4],[26,10,24,8,"distance"],[26,18,24,16],[26,22,24,20,"influenceRadius"],[26,37,24,35],[26,39,24,37],[27,8,25,6],[28,8,26,6],[28,12,26,12,"influence"],[28,21,26,21],[28,24,26,24],[28,25,26,25],[28,28,26,29,"distance"],[28,36,26,37],[28,39,26,40,"influenceRadius"],[28,54,26,56],[30,8,28,6],[31,8,29,6],[31,12,29,12,"upvoteMultiplier"],[31,28,29,28],[31,31,29,31],[31,32,29,32],[31,35,29,36,"marker"],[31,41,29,42],[31,42,29,43,"upvotes"],[31,49,29,50],[31,52,29,53],[31,55,29,57],[31,56,29,58],[31,57,29,59],[33,8,31,6],[33,12,31,10,"marker"],[33,18,31,16],[33,19,31,17,"status"],[33,25,31,23],[33,30,31,28],[33,36,31,34],[33,38,31,36],[34,10,32,8,"score"],[34,15,32,13],[34,19,32,17],[34,21,32,19],[34,24,32,22,"influence"],[34,33,32,31],[34,36,32,34,"upvoteMultiplier"],[34,52,32,50],[35,8,33,6],[35,9,33,7],[35,15,33,13],[35,19,33,17,"marker"],[35,25,33,23],[35,26,33,24,"status"],[35,32,33,30],[35,37,33,35],[35,46,33,44],[35,48,33,46],[36,10,34,8,"score"],[36,15,34,13],[36,19,34,17],[36,21,34,19],[36,24,34,22,"influence"],[36,33,34,31],[36,36,34,34,"upvoteMultiplier"],[36,52,34,50],[37,8,35,6],[37,9,35,7],[37,15,35,13],[37,19,35,17,"marker"],[37,25,35,23],[37,26,35,24,"status"],[37,32,35,30],[37,37,35,35],[37,45,35,43],[37,47,35,45],[38,10,36,8,"score"],[38,15,36,13],[38,19,36,17],[38,21,36,19],[38,24,36,22,"influence"],[38,33,36,31],[38,36,36,34,"upvoteMultiplier"],[38,52,36,50],[39,8,37,6],[40,6,38,4],[41,4,39,2],[41,5,39,3],[41,6,39,4],[43,4,41,2],[44,4,42,2],[44,11,42,9,"Math"],[44,15,42,13],[44,16,42,14,"max"],[44,19,42,17],[44,20,42,18],[44,21,42,19],[44,23,42,21,"Math"],[44,27,42,25],[44,28,42,26,"min"],[44,31,42,29],[44,32,42,30],[44,35,42,33],[44,37,42,35,"score"],[44,42,42,40],[44,43,42,41],[44,44,42,42],[45,2,43,0],[45,3,43,1],[47,2,45,0],[48,0,46,0],[49,0,47,0],[50,0,48,0],[51,0,49,0],[52,0,50,0],[53,0,51,0],[54,2,45,0,"exports"],[54,9,45,0],[54,10,45,0,"calculateSafetyScore"],[54,30,45,0],[54,33,45,0,"calculateSafetyScore"],[54,53,45,0],[55,2,52,7],[55,6,52,13,"getRoutesFromGoogle"],[55,25,52,32],[55,28,52,32,"exports"],[55,35,52,32],[55,36,52,32,"getRoutesFromGoogle"],[55,55,52,32],[56,4,52,32],[56,8,52,32,"_ref"],[56,12,52,32],[56,19,52,32,"_asyncToGenerator2"],[56,37,52,32],[56,38,52,32,"default"],[56,45,52,32],[56,47,52,35],[56,58,52,42,"origin"],[56,64,52,48],[56,66,52,50,"destination"],[56,77,52,61],[56,79,52,87],[57,6,52,87],[57,10,52,63,"alternatives"],[57,22,52,75],[57,25,52,75,"arguments"],[57,34,52,75],[57,35,52,75,"length"],[57,41,52,75],[57,49,52,75,"arguments"],[57,58,52,75],[57,66,52,75,"undefined"],[57,75,52,75],[57,78,52,75,"arguments"],[57,87,52,75],[57,93,52,78],[57,97,52,82],[58,6,53,2],[58,10,53,6],[59,8,54,4],[59,12,54,10,"url"],[59,15,54,13],[59,18,54,16],[59,81,54,79,"origin"],[59,87,54,85],[59,88,54,86,"latitude"],[59,96,54,94],[59,100,54,98,"origin"],[59,106,54,104],[59,107,54,105,"longitude"],[59,116,54,114],[59,132,54,130,"destination"],[59,143,54,141],[59,144,54,142,"latitude"],[59,152,54,150],[59,156,54,154,"destination"],[59,167,54,165],[59,168,54,166,"longitude"],[59,177,54,175],[59,194,54,192,"alternatives"],[59,206,54,204],[59,227,54,225,"GOOGLE_MAPS_API_KEY"],[59,246,54,244],[59,248,54,246],[60,8,56,4],[60,12,56,10,"response"],[60,20,56,18],[60,29,56,27,"fetch"],[60,34,56,32],[60,35,56,33,"url"],[60,38,56,36],[60,39,56,37],[61,8,57,4],[61,12,57,10,"data"],[61,16,57,14],[61,25,57,23,"response"],[61,33,57,31],[61,34,57,32,"json"],[61,38,57,36],[61,39,57,37],[61,40,57,38],[62,8,59,4],[62,12,59,8,"data"],[62,16,59,12],[62,17,59,13,"status"],[62,23,59,19],[62,28,59,24],[62,32,59,28],[62,34,59,30],[63,10,60,6,"console"],[63,17,60,13],[63,18,60,14,"error"],[63,23,60,19],[63,24,60,20],[63,54,60,50],[63,56,60,52,"data"],[63,60,60,56],[63,61,60,57,"status"],[63,67,60,63],[63,69,60,65,"data"],[63,73,60,69],[63,74,60,70,"error_message"],[63,87,60,83],[63,88,60,84],[64,10,61,6],[64,16,61,12],[64,20,61,16,"Error"],[64,25,61,21],[64,26,61,22,"data"],[64,30,61,26],[64,31,61,27,"error_message"],[64,44,61,40],[64,48,61,44],[64,70,61,66],[64,71,61,67],[65,8,62,4],[66,8,64,4],[66,15,64,11,"data"],[66,19,64,15],[66,20,64,16,"routes"],[66,26,64,22],[66,27,64,23,"map"],[66,30,64,26],[66,31,64,27,"route"],[66,36,64,32],[66,41,64,37],[67,10,65,6,"polyline"],[67,18,65,14],[67,20,65,16,"route"],[67,25,65,21],[67,26,65,22,"overview_polyline"],[67,43,65,39],[67,44,65,40,"points"],[67,50,65,46],[68,10,66,6,"distance"],[68,18,66,14],[68,20,66,16,"route"],[68,25,66,21],[68,26,66,22,"legs"],[68,30,66,26],[68,31,66,27],[68,32,66,28],[68,33,66,29],[68,34,66,30,"distance"],[68,42,66,38],[68,43,66,39,"value"],[68,48,66,44],[69,10,66,46],[70,10,67,6,"duration"],[70,18,67,14],[70,20,67,16,"route"],[70,25,67,21],[70,26,67,22,"legs"],[70,30,67,26],[70,31,67,27],[70,32,67,28],[70,33,67,29],[70,34,67,30,"duration"],[70,42,67,38],[70,43,67,39,"value"],[70,48,67,44],[71,10,67,46],[72,10,68,6,"steps"],[72,15,68,11],[72,17,68,13,"route"],[72,22,68,18],[72,23,68,19,"legs"],[72,27,68,23],[72,28,68,24],[72,29,68,25],[72,30,68,26],[72,31,68,27,"steps"],[72,36,68,32],[73,10,69,6,"bounds"],[73,16,69,12],[73,18,69,14,"route"],[73,23,69,19],[73,24,69,20,"bounds"],[74,8,70,4],[74,9,70,5],[74,10,70,6],[74,11,70,7],[75,6,71,2],[75,7,71,3],[75,8,71,4],[75,15,71,11,"error"],[75,20,71,16],[75,22,71,18],[76,8,72,4,"console"],[76,15,72,11],[76,16,72,12,"error"],[76,21,72,17],[76,22,72,18],[76,58,72,54],[76,60,72,56,"error"],[76,65,72,61],[76,66,72,62],[77,8,73,4],[77,14,73,10,"error"],[77,19,73,15],[78,6,74,2],[79,4,75,0],[79,5,75,1],[80,4,75,1],[80,20,52,13,"getRoutesFromGoogle"],[80,39,52,32,"getRoutesFromGoogle"],[80,40,52,32,"_x"],[80,42,52,32],[80,44,52,32,"_x2"],[80,47,52,32],[81,6,52,32],[81,13,52,32,"_ref"],[81,17,52,32],[81,18,52,32,"apply"],[81,23,52,32],[81,30,52,32,"arguments"],[81,39,52,32],[82,4,52,32],[83,2,52,32],[83,5,75,1],[85,2,77,0],[86,0,78,0],[87,0,79,0],[88,0,80,0],[89,0,81,0],[90,2,82,7],[90,6,82,13,"decodePolyline"],[90,20,82,27],[90,23,82,31,"encoded"],[90,30,82,38],[90,34,82,43],[91,4,83,2],[91,8,83,8,"points"],[91,14,83,14],[91,17,83,17],[91,19,83,19],[92,4,84,2],[92,8,84,6,"index"],[92,13,84,11],[92,16,84,14],[92,17,84,15],[93,4,85,2],[93,8,85,8,"len"],[93,11,85,11],[93,14,85,14,"encoded"],[93,21,85,21],[93,22,85,22,"length"],[93,28,85,28],[94,4,86,2],[94,8,86,6,"lat"],[94,11,86,9],[94,14,86,12],[94,15,86,13],[95,4,87,2],[95,8,87,6,"lng"],[95,11,87,9],[95,14,87,12],[95,15,87,13],[96,4,89,2],[96,11,89,9,"index"],[96,16,89,14],[96,19,89,17,"len"],[96,22,89,20],[96,24,89,22],[97,6,90,4],[97,10,90,8,"b"],[97,11,90,9],[98,6,91,4],[98,10,91,8,"shift"],[98,15,91,13],[98,18,91,16],[98,19,91,17],[99,6,92,4],[99,10,92,8,"result"],[99,16,92,14],[99,19,92,17],[99,20,92,18],[100,6,93,4],[100,9,93,7],[101,8,94,6,"b"],[101,9,94,7],[101,12,94,10,"encoded"],[101,19,94,17],[101,20,94,18,"charCodeAt"],[101,30,94,28],[101,31,94,29,"index"],[101,36,94,34],[101,38,94,36],[101,39,94,37],[101,42,94,40],[101,44,94,42],[102,8,95,6,"result"],[102,14,95,12],[102,18,95,16],[102,19,95,17,"b"],[102,20,95,18],[102,23,95,21],[102,27,95,25],[102,32,95,30,"shift"],[102,37,95,35],[103,8,96,6,"shift"],[103,13,96,11],[103,17,96,15],[103,18,96,16],[104,6,97,4],[104,7,97,5],[104,15,97,13,"b"],[104,16,97,14],[104,20,97,18],[104,24,97,22],[105,6,98,4],[105,10,98,10,"dlat"],[105,14,98,14],[105,17,98,18],[105,18,98,19,"result"],[105,24,98,25],[105,27,98,28],[105,28,98,29],[105,34,98,35],[105,35,98,36],[105,38,98,39],[105,40,98,41,"result"],[105,46,98,47],[105,50,98,51],[105,51,98,52],[105,52,98,53],[105,55,98,57,"result"],[105,61,98,63],[105,65,98,67],[105,66,98,70],[106,6,99,4,"lat"],[106,9,99,7],[106,13,99,11,"dlat"],[106,17,99,15],[107,6,101,4,"shift"],[107,11,101,9],[107,14,101,12],[107,15,101,13],[108,6,102,4,"result"],[108,12,102,10],[108,15,102,13],[108,16,102,14],[109,6,103,4],[109,9,103,7],[110,8,104,6,"b"],[110,9,104,7],[110,12,104,10,"encoded"],[110,19,104,17],[110,20,104,18,"charCodeAt"],[110,30,104,28],[110,31,104,29,"index"],[110,36,104,34],[110,38,104,36],[110,39,104,37],[110,42,104,40],[110,44,104,42],[111,8,105,6,"result"],[111,14,105,12],[111,18,105,16],[111,19,105,17,"b"],[111,20,105,18],[111,23,105,21],[111,27,105,25],[111,32,105,30,"shift"],[111,37,105,35],[112,8,106,6,"shift"],[112,13,106,11],[112,17,106,15],[112,18,106,16],[113,6,107,4],[113,7,107,5],[113,15,107,13,"b"],[113,16,107,14],[113,20,107,18],[113,24,107,22],[114,6,108,4],[114,10,108,10,"dlng"],[114,14,108,14],[114,17,108,18],[114,18,108,19,"result"],[114,24,108,25],[114,27,108,28],[114,28,108,29],[114,34,108,35],[114,35,108,36],[114,38,108,39],[114,40,108,41,"result"],[114,46,108,47],[114,50,108,51],[114,51,108,52],[114,52,108,53],[114,55,108,57,"result"],[114,61,108,63],[114,65,108,67],[114,66,108,70],[115,6,109,4,"lng"],[115,9,109,7],[115,13,109,11,"dlng"],[115,17,109,15],[116,6,111,4,"points"],[116,12,111,10],[116,13,111,11,"push"],[116,17,111,15],[116,18,111,16],[117,8,112,6,"latitude"],[117,16,112,14],[117,18,112,16,"lat"],[117,21,112,19],[117,24,112,22],[117,27,112,25],[118,8,113,6,"longitude"],[118,17,113,15],[118,19,113,17,"lng"],[118,22,113,20],[118,25,113,23],[119,6,114,4],[119,7,114,5],[119,8,114,6],[120,4,115,2],[121,4,117,2],[121,11,117,9,"points"],[121,17,117,15],[122,2,118,0],[122,3,118,1],[124,2,120,0],[125,0,121,0],[126,0,122,0],[127,0,123,0],[128,0,124,0],[129,0,125,0],[130,2,120,0,"exports"],[130,9,120,0],[130,10,120,0,"decodePolyline"],[130,24,120,0],[130,27,120,0,"decodePolyline"],[130,41,120,0],[131,2,126,7],[131,6,126,13,"calculateRouteSafetyScore"],[131,31,126,38],[131,34,126,41,"calculateRouteSafetyScore"],[131,35,126,42,"routePoints"],[131,46,126,53],[131,48,126,55,"safetyMarkers"],[131,61,126,68],[131,66,126,73],[132,4,127,2],[132,8,127,6],[132,9,127,7,"routePoints"],[132,20,127,18],[132,24,127,22,"routePoints"],[132,35,127,33],[132,36,127,34,"length"],[132,42,127,40],[132,47,127,45],[132,48,127,46],[132,50,127,48],[132,57,127,55],[132,59,127,57],[134,4,129,2],[135,4,130,2],[135,8,130,8,"samplingInterval"],[135,24,130,24],[135,27,130,27,"Math"],[135,31,130,31],[135,32,130,32,"max"],[135,35,130,35],[135,36,130,36],[135,37,130,37],[135,39,130,39,"Math"],[135,43,130,43],[135,44,130,44,"floor"],[135,49,130,49],[135,50,130,50,"routePoints"],[135,61,130,61],[135,62,130,62,"length"],[135,68,130,68],[135,71,130,71],[135,73,130,73],[135,74,130,74],[135,75,130,75],[136,4,131,2],[136,8,131,8,"sampledPoints"],[136,21,131,21],[136,24,131,24,"routePoints"],[136,35,131,35],[136,36,131,36,"filter"],[136,42,131,42],[136,43,131,43],[136,44,131,44,"_"],[136,45,131,45],[136,47,131,47,"index"],[136,52,131,52],[136,57,131,57,"index"],[136,62,131,62],[136,65,131,65,"samplingInterval"],[136,81,131,81],[136,86,131,86],[136,87,131,87],[136,88,131,88],[138,4,133,2],[139,4,134,2],[139,8,134,8,"scores"],[139,14,134,14],[139,17,134,17,"sampledPoints"],[139,30,134,30],[139,31,134,31,"map"],[139,34,134,34],[139,35,134,35,"point"],[139,40,134,40],[139,44,135,4,"calculateSafetyScore"],[139,64,135,24],[139,65,135,25,"point"],[139,70,135,30],[139,72,135,32,"safetyMarkers"],[139,85,135,45],[139,86,136,2],[139,87,136,3],[141,4,138,2],[142,4,139,2],[142,8,139,8,"averageScore"],[142,20,139,20],[142,23,139,23,"scores"],[142,29,139,29],[142,30,139,30,"reduce"],[142,36,139,36],[142,37,139,37],[142,38,139,38,"sum"],[142,41,139,41],[142,43,139,43,"score"],[142,48,139,48],[142,53,139,53,"sum"],[142,56,139,56],[142,59,139,59,"score"],[142,64,139,64],[142,66,139,66],[142,67,139,67],[142,68,139,68],[142,71,139,71,"scores"],[142,77,139,77],[142,78,139,78,"length"],[142,84,139,84],[143,4,140,2],[143,11,140,9,"Math"],[143,15,140,13],[143,16,140,14,"round"],[143,21,140,19],[143,22,140,20,"averageScore"],[143,34,140,32],[143,35,140,33],[144,2,141,0],[144,3,141,1],[146,2,143,0],[147,0,144,0],[148,0,145,0],[149,0,146,0],[150,0,147,0],[151,0,148,0],[152,0,149,0],[153,2,143,0,"exports"],[153,9,143,0],[153,10,143,0,"calculateRouteSafetyScore"],[153,35,143,0],[153,38,143,0,"calculateRouteSafetyScore"],[153,63,143,0],[154,2,150,7],[154,6,150,13,"getSafestRoute"],[154,20,150,27],[154,23,150,27,"exports"],[154,30,150,27],[154,31,150,27,"getSafestRoute"],[154,45,150,27],[155,4,150,27],[155,8,150,27,"_ref2"],[155,13,150,27],[155,20,150,27,"_asyncToGenerator2"],[155,38,150,27],[155,39,150,27,"default"],[155,46,150,27],[155,48,150,30],[155,59,150,37,"origin"],[155,65,150,43],[155,67,150,45,"destination"],[155,78,150,56],[155,80,150,58,"safetyMarkers"],[155,93,150,71],[155,95,150,76],[156,6,151,2],[156,10,151,6],[157,8,152,4,"console"],[157,15,152,11],[157,16,152,12,"log"],[157,19,152,15],[157,20,152,16],[157,49,152,45],[157,50,152,46],[159,8,154,4],[160,8,155,4],[160,12,155,10,"routes"],[160,18,155,16],[160,27,155,25,"getRoutesFromGoogle"],[160,46,155,44],[160,47,155,45,"origin"],[160,53,155,51],[160,55,155,53,"destination"],[160,66,155,64],[160,68,155,66],[160,72,155,70],[160,73,155,71],[161,8,157,4],[161,12,157,8],[161,13,157,9,"routes"],[161,19,157,15],[161,23,157,19,"routes"],[161,29,157,25],[161,30,157,26,"length"],[161,36,157,32],[161,41,157,37],[161,42,157,38],[161,44,157,40],[162,10,158,6],[162,16,158,12],[162,20,158,16,"Error"],[162,25,158,21],[162,26,158,22],[162,43,158,39],[162,44,158,40],[163,8,159,4],[165,8,161,4],[166,8,162,4],[166,12,162,10,"analyzedRoutes"],[166,26,162,24],[166,29,162,27,"routes"],[166,35,162,33],[166,36,162,34,"map"],[166,39,162,37],[166,40,162,38,"route"],[166,45,162,43],[166,49,162,47],[167,10,163,6],[167,14,163,12,"points"],[167,20,163,18],[167,23,163,21,"decodePolyline"],[167,37,163,35],[167,38,163,36,"route"],[167,43,163,41],[167,44,163,42,"polyline"],[167,52,163,50],[167,53,163,51],[168,10,164,6],[168,14,164,12,"safetyScore"],[168,25,164,23],[168,28,164,26,"calculateRouteSafetyScore"],[168,53,164,51],[168,54,164,52,"points"],[168,60,164,58],[168,62,164,60,"safetyMarkers"],[168,75,164,73],[168,76,164,74],[169,10,166,6],[169,17,166,13],[170,12,167,8],[170,15,167,11,"route"],[170,20,167,16],[171,12,168,8,"points"],[171,18,168,14],[172,12,169,8,"safetyScore"],[172,23,169,19],[173,12,170,8],[174,12,171,8],[175,12,172,8,"weightedScore"],[175,25,172,21],[175,27,172,24,"safetyScore"],[175,38,172,35],[175,41,172,38],[175,44,172,41],[175,47,172,46],[175,48,172,47],[175,49,172,48],[175,52,172,52,"route"],[175,57,172,57],[175,58,172,58,"distance"],[175,66,172,66],[175,69,172,69],[175,74,172,75],[175,78,172,79],[176,10,173,6],[176,11,173,7],[177,8,174,4],[177,9,174,5],[177,10,174,6],[179,8,176,4],[180,8,177,4,"analyzedRoutes"],[180,22,177,18],[180,23,177,19,"sort"],[180,27,177,23],[180,28,177,24],[180,29,177,25,"a"],[180,30,177,26],[180,32,177,28,"b"],[180,33,177,29],[180,38,177,34,"b"],[180,39,177,35],[180,40,177,36,"weightedScore"],[180,53,177,49],[180,56,177,52,"a"],[180,57,177,53],[180,58,177,54,"weightedScore"],[180,71,177,67],[180,72,177,68],[181,8,179,4],[181,12,179,10,"bestRoute"],[181,21,179,19],[181,24,179,22,"analyzedRoutes"],[181,38,179,36],[181,39,179,37],[181,40,179,38],[181,41,179,39],[182,8,181,4,"console"],[182,15,181,11],[182,16,181,12,"log"],[182,19,181,15],[182,20,181,16],[182,29,181,25,"analyzedRoutes"],[182,43,181,39],[182,44,181,40,"length"],[182,50,181,46],[182,60,181,56],[182,61,181,57],[183,8,182,4,"analyzedRoutes"],[183,22,182,18],[183,23,182,19,"forEach"],[183,30,182,26],[183,31,182,27],[183,32,182,28,"route"],[183,37,182,33],[183,39,182,35,"index"],[183,44,182,40],[183,49,182,45],[184,10,183,6,"console"],[184,17,183,13],[184,18,183,14,"log"],[184,21,183,17],[184,22,183,18],[184,33,183,29,"index"],[184,38,183,34],[184,41,183,37],[184,42,183,38],[184,54,183,50,"route"],[184,59,183,55],[184,60,183,56,"safetyScore"],[184,71,183,67],[184,89,183,85],[184,90,183,86,"route"],[184,95,183,91],[184,96,183,92,"distance"],[184,104,183,100],[184,107,183,103],[184,111,183,107],[184,113,183,109,"toFixed"],[184,120,183,116],[184,121,183,117],[184,122,183,118],[184,123,183,119],[184,139,183,135,"route"],[184,144,183,140],[184,145,183,141,"weightedScore"],[184,158,183,154],[184,159,183,155,"toFixed"],[184,166,183,162],[184,167,183,163],[184,168,183,164],[184,169,183,165],[184,171,183,167],[184,172,183,168],[185,8,184,4],[185,9,184,5],[185,10,184,6],[186,8,186,4],[186,15,186,11],[187,10,187,6,"route"],[187,15,187,11],[187,17,187,13,"bestRoute"],[187,26,187,22],[188,10,188,6,"alternatives"],[188,22,188,18],[188,24,188,20,"analyzedRoutes"],[188,38,188,34],[188,39,188,35,"slice"],[188,44,188,40],[188,45,188,41],[188,46,188,42],[189,8,189,4],[189,9,189,5],[190,6,190,2],[190,7,190,3],[190,8,190,4],[190,15,190,11,"error"],[190,20,190,16],[190,22,190,18],[191,8,191,4,"console"],[191,15,191,11],[191,16,191,12,"error"],[191,21,191,17],[191,22,191,18],[191,55,191,51],[191,57,191,53,"error"],[191,62,191,58],[191,63,191,59],[192,8,192,4],[192,14,192,10,"error"],[192,19,192,15],[193,6,193,2],[194,4,194,0],[194,5,194,1],[195,4,194,1],[195,20,150,13,"getSafestRoute"],[195,34,150,27,"getSafestRoute"],[195,35,150,27,"_x3"],[195,38,150,27],[195,40,150,27,"_x4"],[195,43,150,27],[195,45,150,27,"_x5"],[195,48,150,27],[196,6,150,27],[196,13,150,27,"_ref2"],[196,18,150,27],[196,19,150,27,"apply"],[196,24,150,27],[196,31,150,27,"arguments"],[196,40,150,27],[197,4,150,27],[198,2,150,27],[198,5,194,1],[200,2,196,0],[201,0,197,0],[202,0,198,0],[203,0,199,0],[204,0,200,0],[205,0,201,0],[206,2,202,7],[206,6,202,13,"getFastestRoute"],[206,21,202,28],[206,24,202,28,"exports"],[206,31,202,28],[206,32,202,28,"getFastestRoute"],[206,47,202,28],[207,4,202,28],[207,8,202,28,"_ref3"],[207,13,202,28],[207,20,202,28,"_asyncToGenerator2"],[207,38,202,28],[207,39,202,28,"default"],[207,46,202,28],[207,48,202,31],[207,59,202,38,"origin"],[207,65,202,44],[207,67,202,46,"destination"],[207,78,202,57],[207,80,202,62],[208,6,203,2],[208,10,203,6],[209,8,204,4],[209,12,204,10,"routes"],[209,18,204,16],[209,27,204,25,"getRoutesFromGoogle"],[209,46,204,44],[209,47,204,45,"origin"],[209,53,204,51],[209,55,204,53,"destination"],[209,66,204,64],[209,68,204,66],[209,73,204,71],[209,74,204,72],[210,8,205,4],[210,12,205,8],[210,13,205,9,"routes"],[210,19,205,15],[210,23,205,19,"routes"],[210,29,205,25],[210,30,205,26,"length"],[210,36,205,32],[210,41,205,37],[210,42,205,38],[210,44,205,40],[211,10,206,6],[211,16,206,12],[211,20,206,16,"Error"],[211,25,206,21],[211,26,206,22],[211,43,206,39],[211,44,206,40],[212,8,207,4],[213,8,209,4],[213,12,209,10,"route"],[213,17,209,15],[213,20,209,18,"routes"],[213,26,209,24],[213,27,209,25],[213,28,209,26],[213,29,209,27],[214,8,210,4],[214,15,210,11],[215,10,211,6],[215,13,211,9,"route"],[215,18,211,14],[216,10,212,6,"points"],[216,16,212,12],[216,18,212,14,"decodePolyline"],[216,32,212,28],[216,33,212,29,"route"],[216,38,212,34],[216,39,212,35,"polyline"],[216,47,212,43],[217,8,213,4],[217,9,213,5],[218,6,214,2],[218,7,214,3],[218,8,214,4],[218,15,214,11,"error"],[218,20,214,16],[218,22,214,18],[219,8,215,4,"console"],[219,15,215,11],[219,16,215,12,"error"],[219,21,215,17],[219,22,215,18],[219,52,215,48],[219,54,215,50,"error"],[219,59,215,55],[219,60,215,56],[220,8,216,4],[220,14,216,10,"error"],[220,19,216,15],[221,6,217,2],[222,4,218,0],[222,5,218,1],[223,4,218,1],[223,20,202,13,"getFastestRoute"],[223,35,202,28,"getFastestRoute"],[223,36,202,28,"_x6"],[223,39,202,28],[223,41,202,28,"_x7"],[223,44,202,28],[224,6,202,28],[224,13,202,28,"_ref3"],[224,18,202,28],[224,19,202,28,"apply"],[224,24,202,28],[224,31,202,28,"arguments"],[224,40,202,28],[225,4,202,28],[226,2,202,28],[226,5,218,1],[227,0,218,2],[227,3]],"functionMap":{"names":["<global>","calculateSafetyScore","safetyMarkers.forEach$argument_0","getRoutesFromGoogle","data.routes.map$argument_0","decodePolyline","calculateRouteSafetyScore","routePoints.filter$argument_0","sampledPoints.map$argument_0","scores.reduce$argument_0","getSafestRoute","routes.map$argument_0","analyzedRoutes.sort$argument_0","analyzedRoutes.forEach$argument_0","getFastestRoute"],"mappings":"AAA;oCCW;wBCG;GDwB;CDI;mCGS;2BCY;MDM;CHK;8BKO;CLoC;yCMQ;2CCK,4CD;mCEG;8CFC;qCGI,2BH;CNE;8BUS;sCCY;KDY;wBEG,2CF;2BGK;KHE;CVU;+BcQ;CdgB"}},"type":"js/module"}]}