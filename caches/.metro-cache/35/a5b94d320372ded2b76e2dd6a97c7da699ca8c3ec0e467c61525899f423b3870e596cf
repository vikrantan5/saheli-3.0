{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"./safetyMapService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"DrTBf6AwaPYmvXRrqU0biJaTooc=","exportNames":["*"]}},{"name":"../config/env","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":32,"index":89}}],"key":"RGB4LNLgNgEtjcVNHbEAgFn5Y3M=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getSafestRoute = exports.getRoutesFromGoogle = exports.getFastestRoute = exports.decodePolyline = exports.calculateSafetyScore = exports.calculateRouteSafetyScore = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _safetyMapService = require(_dependencyMap[2], \"./safetyMapService\");\n  var _env = _interopRequireDefault(require(_dependencyMap[3], \"../config/env\"));\n  var GOOGLE_MAPS_API_KEY = _env.default.GOOGLE_MAPS_API_KEY;\n\n  /**\r\n   * Calculate weighted safety score for a route segment\r\n   * @param {Object} point - {latitude, longitude}\r\n   * @param {Array} safetyMarkers - Array of all safety markers\r\n   * @param {number} influenceRadius - Radius in km where markers affect score\r\n   * @returns {number} - Safety score (0-100, higher is safer)\r\n   */\n  var calculateSafetyScore = function (point, safetyMarkers) {\n    var influenceRadius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;\n    var score = 50; // Neutral starting score\n\n    safetyMarkers.forEach(marker => {\n      var distance = (0, _safetyMapService.calculateDistance)(point.latitude, point.longitude, marker.coordinates.latitude, marker.coordinates.longitude);\n\n      // Only consider markers within influence radius\n      if (distance <= influenceRadius) {\n        // Calculate influence strength (closer = stronger influence)\n        var influence = 1 - distance / influenceRadius;\n\n        // Apply marker influence based on status and upvotes\n        var upvoteMultiplier = 1 + marker.upvotes * 0.1; // Each upvote adds 10% weight\n\n        if (marker.status === 'safe') {\n          score += 30 * influence * upvoteMultiplier;\n        } else if (marker.status === 'caution') {\n          score -= 15 * influence * upvoteMultiplier;\n        } else if (marker.status === 'unsafe') {\n          score -= 40 * influence * upvoteMultiplier;\n        }\n      }\n    });\n\n    // Clamp score between 0 and 100\n    return Math.max(0, Math.min(100, score));\n  };\n\n  /**\r\n   * Get route from Google Directions API\r\n   * @param {Object} origin - {latitude, longitude}\r\n   * @param {Object} destination - {latitude, longitude}\r\n   * @param {boolean} alternatives - Whether to request alternative routes\r\n   * @returns {Promise<Array>} - Array of route objects\r\n   */\n  exports.calculateSafetyScore = calculateSafetyScore;\n  var getRoutesFromGoogle = exports.getRoutesFromGoogle = /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* (origin, destination) {\n      var alternatives = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      try {\n        var url = `https://maps.googleapis.com/maps/api/directions/json?origin=${origin.latitude},${origin.longitude}&destination=${destination.latitude},${destination.longitude}&alternatives=${alternatives}&mode=walking&key=${GOOGLE_MAPS_API_KEY}`;\n        var response = yield fetch(url);\n        var data = yield response.json();\n        if (data.status !== 'OK') {\n          console.error('Google Directions API error:', data.status, data.error_message);\n          throw new Error(data.error_message || 'Failed to get routes');\n        }\n        return data.routes.map(route => ({\n          polyline: route.overview_polyline.points,\n          distance: route.legs[0].distance.value,\n          // in meters\n          duration: route.legs[0].duration.value,\n          // in seconds\n          steps: route.legs[0].steps,\n          bounds: route.bounds\n        }));\n      } catch (error) {\n        console.error('Error fetching routes from Google:', error);\n        throw error;\n      }\n    });\n    return function getRoutesFromGoogle(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  /**\r\n   * Decode Google polyline to coordinates\r\n   * @param {string} encoded - Encoded polyline string\r\n   * @returns {Array} - Array of {latitude, longitude}\r\n   */\n  var decodePolyline = encoded => {\n    var points = [];\n    var index = 0;\n    var len = encoded.length;\n    var lat = 0;\n    var lng = 0;\n    while (index < len) {\n      var b = void 0;\n      var shift = 0;\n      var result = 0;\n      do {\n        b = encoded.charCodeAt(index++) - 63;\n        result |= (b & 0x1f) << shift;\n        shift += 5;\n      } while (b >= 0x20);\n      var dlat = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n      lat += dlat;\n      shift = 0;\n      result = 0;\n      do {\n        b = encoded.charCodeAt(index++) - 63;\n        result |= (b & 0x1f) << shift;\n        shift += 5;\n      } while (b >= 0x20);\n      var dlng = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n      lng += dlng;\n      points.push({\n        latitude: lat / 1e5,\n        longitude: lng / 1e5\n      });\n    }\n    return points;\n  };\n\n  /**\r\n   * Calculate safety score for entire route\r\n   * @param {Array} routePoints - Array of {latitude, longitude}\r\n   * @param {Array} safetyMarkers - Array of safety markers\r\n   * @returns {number} - Average safety score for route\r\n   */\n  exports.decodePolyline = decodePolyline;\n  var calculateRouteSafetyScore = (routePoints, safetyMarkers) => {\n    if (!routePoints || routePoints.length === 0) return 50;\n\n    // Sample points along route (every ~50 meters worth of points)\n    var samplingInterval = Math.max(1, Math.floor(routePoints.length / 20));\n    var sampledPoints = routePoints.filter((_, index) => index % samplingInterval === 0);\n\n    // Calculate safety score for each sampled point\n    var scores = sampledPoints.map(point => calculateSafetyScore(point, safetyMarkers));\n\n    // Return average score\n    var averageScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n    return Math.round(averageScore);\n  };\n\n  /**\r\n   * Get safest route considering safety markers\r\n   * @param {Object} origin - {latitude, longitude}\r\n   * @param {Object} destination - {latitude, longitude}\r\n   * @param {Array} safetyMarkers - Array of safety markers\r\n   * @returns {Promise<Object>} - Best route with safety information\r\n   */\n  exports.calculateRouteSafetyScore = calculateRouteSafetyScore;\n  var getSafestRoute = exports.getSafestRoute = /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2.default)(function* (origin, destination, safetyMarkers) {\n      try {\n        console.log('Calculating safest route...');\n\n        // Get alternative routes from Google\n        var routes = yield getRoutesFromGoogle(origin, destination, true);\n        if (!routes || routes.length === 0) {\n          throw new Error('No routes found');\n        }\n\n        // Analyze each route\n        var analyzedRoutes = routes.map(route => {\n          var points = decodePolyline(route.polyline);\n          var safetyScore = calculateRouteSafetyScore(points, safetyMarkers);\n          return {\n            ...route,\n            points,\n            safetyScore,\n            // Calculate weighted score combining safety and distance\n            // Prioritize safety but also consider distance\n            weightedScore: safetyScore * 0.7 + (1 - route.distance / 10000) * 30\n          };\n        });\n\n        // Sort by weighted score (highest = best)\n        analyzedRoutes.sort((a, b) => b.weightedScore - a.weightedScore);\n        var bestRoute = analyzedRoutes[0];\n        console.log(`Found ${analyzedRoutes.length} routes:`);\n        analyzedRoutes.forEach((route, index) => {\n          console.log(`  Route ${index + 1}: Safety ${route.safetyScore}/100, Distance ${(route.distance / 1000).toFixed(2)}km, Weighted ${route.weightedScore.toFixed(1)}`);\n        });\n        return {\n          route: bestRoute,\n          alternatives: analyzedRoutes.slice(1)\n        };\n      } catch (error) {\n        console.error('Error calculating safest route:', error);\n        throw error;\n      }\n    });\n    return function getSafestRoute(_x3, _x4, _x5) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  /**\r\n   * Get fastest route (standard Google route)\r\n   * @param {Object} origin - {latitude, longitude}\r\n   * @param {Object} destination - {latitude, longitude}\r\n   * @returns {Promise<Object>} - Fastest route\r\n   */\n  var getFastestRoute = exports.getFastestRoute = /*#__PURE__*/function () {\n    var _ref3 = (0, _asyncToGenerator2.default)(function* (origin, destination) {\n      try {\n        var routes = yield getRoutesFromGoogle(origin, destination, false);\n        if (!routes || routes.length === 0) {\n          throw new Error('No routes found');\n        }\n        var route = routes[0];\n        return {\n          ...route,\n          points: decodePolyline(route.polyline)\n        };\n      } catch (error) {\n        console.error('Error getting fastest route:', error);\n        throw error;\n      }\n    });\n    return function getFastestRoute(_x6, _x7) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n});","lineCount":228,"map":[[8,2,1,0],[8,6,1,0,"_safetyMapService"],[8,23,1,0],[8,26,1,0,"require"],[8,33,1,0],[8,34,1,0,"_dependencyMap"],[8,48,1,0],[9,2,2,0],[9,6,2,0,"_env"],[9,10,2,0],[9,13,2,0,"_interopRequireDefault"],[9,35,2,0],[9,36,2,0,"require"],[9,43,2,0],[9,44,2,0,"_dependencyMap"],[9,58,2,0],[10,2,4,0],[10,6,4,6,"GOOGLE_MAPS_API_KEY"],[10,25,4,25],[10,28,4,28,"ENV"],[10,40,4,31],[10,41,4,32,"GOOGLE_MAPS_API_KEY"],[10,60,4,51],[12,2,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,2,13,7],[19,6,13,13,"calculateSafetyScore"],[19,26,13,33],[19,29,13,36],[19,38,13,36,"calculateSafetyScore"],[19,39,13,37,"point"],[19,44,13,42],[19,46,13,44,"safetyMarkers"],[19,59,13,57],[19,61,13,85],[20,4,13,85],[20,8,13,59,"influenceRadius"],[20,23,13,74],[20,26,13,74,"arguments"],[20,35,13,74],[20,36,13,74,"length"],[20,42,13,74],[20,50,13,74,"arguments"],[20,59,13,74],[20,67,13,74,"undefined"],[20,76,13,74],[20,79,13,74,"arguments"],[20,88,13,74],[20,94,13,77],[20,97,13,80],[21,4,14,2],[21,8,14,6,"score"],[21,13,14,11],[21,16,14,14],[21,18,14,16],[21,19,14,17],[21,20,14,18],[23,4,16,2,"safetyMarkers"],[23,17,16,15],[23,18,16,16,"forEach"],[23,25,16,23],[23,26,16,24,"marker"],[23,32,16,30],[23,36,16,34],[24,6,17,4],[24,10,17,10,"distance"],[24,18,17,18],[24,21,17,21],[24,25,17,21,"calculateDistance"],[24,60,17,38],[24,62,18,6,"point"],[24,67,18,11],[24,68,18,12,"latitude"],[24,76,18,20],[24,78,19,6,"point"],[24,83,19,11],[24,84,19,12,"longitude"],[24,93,19,21],[24,95,20,6,"marker"],[24,101,20,12],[24,102,20,13,"coordinates"],[24,113,20,24],[24,114,20,25,"latitude"],[24,122,20,33],[24,124,21,6,"marker"],[24,130,21,12],[24,131,21,13,"coordinates"],[24,142,21,24],[24,143,21,25,"longitude"],[24,152,22,4],[24,153,22,5],[26,6,24,4],[27,6,25,4],[27,10,25,8,"distance"],[27,18,25,16],[27,22,25,20,"influenceRadius"],[27,37,25,35],[27,39,25,37],[28,8,26,6],[29,8,27,6],[29,12,27,12,"influence"],[29,21,27,21],[29,24,27,24],[29,25,27,25],[29,28,27,29,"distance"],[29,36,27,37],[29,39,27,40,"influenceRadius"],[29,54,27,56],[31,8,29,6],[32,8,30,6],[32,12,30,12,"upvoteMultiplier"],[32,28,30,28],[32,31,30,31],[32,32,30,32],[32,35,30,36,"marker"],[32,41,30,42],[32,42,30,43,"upvotes"],[32,49,30,50],[32,52,30,53],[32,55,30,57],[32,56,30,58],[32,57,30,59],[34,8,32,6],[34,12,32,10,"marker"],[34,18,32,16],[34,19,32,17,"status"],[34,25,32,23],[34,30,32,28],[34,36,32,34],[34,38,32,36],[35,10,33,8,"score"],[35,15,33,13],[35,19,33,17],[35,21,33,19],[35,24,33,22,"influence"],[35,33,33,31],[35,36,33,34,"upvoteMultiplier"],[35,52,33,50],[36,8,34,6],[36,9,34,7],[36,15,34,13],[36,19,34,17,"marker"],[36,25,34,23],[36,26,34,24,"status"],[36,32,34,30],[36,37,34,35],[36,46,34,44],[36,48,34,46],[37,10,35,8,"score"],[37,15,35,13],[37,19,35,17],[37,21,35,19],[37,24,35,22,"influence"],[37,33,35,31],[37,36,35,34,"upvoteMultiplier"],[37,52,35,50],[38,8,36,6],[38,9,36,7],[38,15,36,13],[38,19,36,17,"marker"],[38,25,36,23],[38,26,36,24,"status"],[38,32,36,30],[38,37,36,35],[38,45,36,43],[38,47,36,45],[39,10,37,8,"score"],[39,15,37,13],[39,19,37,17],[39,21,37,19],[39,24,37,22,"influence"],[39,33,37,31],[39,36,37,34,"upvoteMultiplier"],[39,52,37,50],[40,8,38,6],[41,6,39,4],[42,4,40,2],[42,5,40,3],[42,6,40,4],[44,4,42,2],[45,4,43,2],[45,11,43,9,"Math"],[45,15,43,13],[45,16,43,14,"max"],[45,19,43,17],[45,20,43,18],[45,21,43,19],[45,23,43,21,"Math"],[45,27,43,25],[45,28,43,26,"min"],[45,31,43,29],[45,32,43,30],[45,35,43,33],[45,37,43,35,"score"],[45,42,43,40],[45,43,43,41],[45,44,43,42],[46,2,44,0],[46,3,44,1],[48,2,46,0],[49,0,47,0],[50,0,48,0],[51,0,49,0],[52,0,50,0],[53,0,51,0],[54,0,52,0],[55,2,46,0,"exports"],[55,9,46,0],[55,10,46,0,"calculateSafetyScore"],[55,30,46,0],[55,33,46,0,"calculateSafetyScore"],[55,53,46,0],[56,2,53,7],[56,6,53,13,"getRoutesFromGoogle"],[56,25,53,32],[56,28,53,32,"exports"],[56,35,53,32],[56,36,53,32,"getRoutesFromGoogle"],[56,55,53,32],[57,4,53,32],[57,8,53,32,"_ref"],[57,12,53,32],[57,19,53,32,"_asyncToGenerator2"],[57,37,53,32],[57,38,53,32,"default"],[57,45,53,32],[57,47,53,35],[57,58,53,42,"origin"],[57,64,53,48],[57,66,53,50,"destination"],[57,77,53,61],[57,79,53,87],[58,6,53,87],[58,10,53,63,"alternatives"],[58,22,53,75],[58,25,53,75,"arguments"],[58,34,53,75],[58,35,53,75,"length"],[58,41,53,75],[58,49,53,75,"arguments"],[58,58,53,75],[58,66,53,75,"undefined"],[58,75,53,75],[58,78,53,75,"arguments"],[58,87,53,75],[58,93,53,78],[58,97,53,82],[59,6,54,2],[59,10,54,6],[60,8,55,4],[60,12,55,10,"url"],[60,15,55,13],[60,18,55,16],[60,81,55,79,"origin"],[60,87,55,85],[60,88,55,86,"latitude"],[60,96,55,94],[60,100,55,98,"origin"],[60,106,55,104],[60,107,55,105,"longitude"],[60,116,55,114],[60,132,55,130,"destination"],[60,143,55,141],[60,144,55,142,"latitude"],[60,152,55,150],[60,156,55,154,"destination"],[60,167,55,165],[60,168,55,166,"longitude"],[60,177,55,175],[60,194,55,192,"alternatives"],[60,206,55,204],[60,227,55,225,"GOOGLE_MAPS_API_KEY"],[60,246,55,244],[60,248,55,246],[61,8,57,4],[61,12,57,10,"response"],[61,20,57,18],[61,29,57,27,"fetch"],[61,34,57,32],[61,35,57,33,"url"],[61,38,57,36],[61,39,57,37],[62,8,58,4],[62,12,58,10,"data"],[62,16,58,14],[62,25,58,23,"response"],[62,33,58,31],[62,34,58,32,"json"],[62,38,58,36],[62,39,58,37],[62,40,58,38],[63,8,60,4],[63,12,60,8,"data"],[63,16,60,12],[63,17,60,13,"status"],[63,23,60,19],[63,28,60,24],[63,32,60,28],[63,34,60,30],[64,10,61,6,"console"],[64,17,61,13],[64,18,61,14,"error"],[64,23,61,19],[64,24,61,20],[64,54,61,50],[64,56,61,52,"data"],[64,60,61,56],[64,61,61,57,"status"],[64,67,61,63],[64,69,61,65,"data"],[64,73,61,69],[64,74,61,70,"error_message"],[64,87,61,83],[64,88,61,84],[65,10,62,6],[65,16,62,12],[65,20,62,16,"Error"],[65,25,62,21],[65,26,62,22,"data"],[65,30,62,26],[65,31,62,27,"error_message"],[65,44,62,40],[65,48,62,44],[65,70,62,66],[65,71,62,67],[66,8,63,4],[67,8,65,4],[67,15,65,11,"data"],[67,19,65,15],[67,20,65,16,"routes"],[67,26,65,22],[67,27,65,23,"map"],[67,30,65,26],[67,31,65,27,"route"],[67,36,65,32],[67,41,65,37],[68,10,66,6,"polyline"],[68,18,66,14],[68,20,66,16,"route"],[68,25,66,21],[68,26,66,22,"overview_polyline"],[68,43,66,39],[68,44,66,40,"points"],[68,50,66,46],[69,10,67,6,"distance"],[69,18,67,14],[69,20,67,16,"route"],[69,25,67,21],[69,26,67,22,"legs"],[69,30,67,26],[69,31,67,27],[69,32,67,28],[69,33,67,29],[69,34,67,30,"distance"],[69,42,67,38],[69,43,67,39,"value"],[69,48,67,44],[70,10,67,46],[71,10,68,6,"duration"],[71,18,68,14],[71,20,68,16,"route"],[71,25,68,21],[71,26,68,22,"legs"],[71,30,68,26],[71,31,68,27],[71,32,68,28],[71,33,68,29],[71,34,68,30,"duration"],[71,42,68,38],[71,43,68,39,"value"],[71,48,68,44],[72,10,68,46],[73,10,69,6,"steps"],[73,15,69,11],[73,17,69,13,"route"],[73,22,69,18],[73,23,69,19,"legs"],[73,27,69,23],[73,28,69,24],[73,29,69,25],[73,30,69,26],[73,31,69,27,"steps"],[73,36,69,32],[74,10,70,6,"bounds"],[74,16,70,12],[74,18,70,14,"route"],[74,23,70,19],[74,24,70,20,"bounds"],[75,8,71,4],[75,9,71,5],[75,10,71,6],[75,11,71,7],[76,6,72,2],[76,7,72,3],[76,8,72,4],[76,15,72,11,"error"],[76,20,72,16],[76,22,72,18],[77,8,73,4,"console"],[77,15,73,11],[77,16,73,12,"error"],[77,21,73,17],[77,22,73,18],[77,58,73,54],[77,60,73,56,"error"],[77,65,73,61],[77,66,73,62],[78,8,74,4],[78,14,74,10,"error"],[78,19,74,15],[79,6,75,2],[80,4,76,0],[80,5,76,1],[81,4,76,1],[81,20,53,13,"getRoutesFromGoogle"],[81,39,53,32,"getRoutesFromGoogle"],[81,40,53,32,"_x"],[81,42,53,32],[81,44,53,32,"_x2"],[81,47,53,32],[82,6,53,32],[82,13,53,32,"_ref"],[82,17,53,32],[82,18,53,32,"apply"],[82,23,53,32],[82,30,53,32,"arguments"],[82,39,53,32],[83,4,53,32],[84,2,53,32],[84,5,76,1],[86,2,78,0],[87,0,79,0],[88,0,80,0],[89,0,81,0],[90,0,82,0],[91,2,83,7],[91,6,83,13,"decodePolyline"],[91,20,83,27],[91,23,83,31,"encoded"],[91,30,83,38],[91,34,83,43],[92,4,84,2],[92,8,84,8,"points"],[92,14,84,14],[92,17,84,17],[92,19,84,19],[93,4,85,2],[93,8,85,6,"index"],[93,13,85,11],[93,16,85,14],[93,17,85,15],[94,4,86,2],[94,8,86,8,"len"],[94,11,86,11],[94,14,86,14,"encoded"],[94,21,86,21],[94,22,86,22,"length"],[94,28,86,28],[95,4,87,2],[95,8,87,6,"lat"],[95,11,87,9],[95,14,87,12],[95,15,87,13],[96,4,88,2],[96,8,88,6,"lng"],[96,11,88,9],[96,14,88,12],[96,15,88,13],[97,4,90,2],[97,11,90,9,"index"],[97,16,90,14],[97,19,90,17,"len"],[97,22,90,20],[97,24,90,22],[98,6,91,4],[98,10,91,8,"b"],[98,11,91,9],[99,6,92,4],[99,10,92,8,"shift"],[99,15,92,13],[99,18,92,16],[99,19,92,17],[100,6,93,4],[100,10,93,8,"result"],[100,16,93,14],[100,19,93,17],[100,20,93,18],[101,6,94,4],[101,9,94,7],[102,8,95,6,"b"],[102,9,95,7],[102,12,95,10,"encoded"],[102,19,95,17],[102,20,95,18,"charCodeAt"],[102,30,95,28],[102,31,95,29,"index"],[102,36,95,34],[102,38,95,36],[102,39,95,37],[102,42,95,40],[102,44,95,42],[103,8,96,6,"result"],[103,14,96,12],[103,18,96,16],[103,19,96,17,"b"],[103,20,96,18],[103,23,96,21],[103,27,96,25],[103,32,96,30,"shift"],[103,37,96,35],[104,8,97,6,"shift"],[104,13,97,11],[104,17,97,15],[104,18,97,16],[105,6,98,4],[105,7,98,5],[105,15,98,13,"b"],[105,16,98,14],[105,20,98,18],[105,24,98,22],[106,6,99,4],[106,10,99,10,"dlat"],[106,14,99,14],[106,17,99,18],[106,18,99,19,"result"],[106,24,99,25],[106,27,99,28],[106,28,99,29],[106,34,99,35],[106,35,99,36],[106,38,99,39],[106,40,99,41,"result"],[106,46,99,47],[106,50,99,51],[106,51,99,52],[106,52,99,53],[106,55,99,57,"result"],[106,61,99,63],[106,65,99,67],[106,66,99,70],[107,6,100,4,"lat"],[107,9,100,7],[107,13,100,11,"dlat"],[107,17,100,15],[108,6,102,4,"shift"],[108,11,102,9],[108,14,102,12],[108,15,102,13],[109,6,103,4,"result"],[109,12,103,10],[109,15,103,13],[109,16,103,14],[110,6,104,4],[110,9,104,7],[111,8,105,6,"b"],[111,9,105,7],[111,12,105,10,"encoded"],[111,19,105,17],[111,20,105,18,"charCodeAt"],[111,30,105,28],[111,31,105,29,"index"],[111,36,105,34],[111,38,105,36],[111,39,105,37],[111,42,105,40],[111,44,105,42],[112,8,106,6,"result"],[112,14,106,12],[112,18,106,16],[112,19,106,17,"b"],[112,20,106,18],[112,23,106,21],[112,27,106,25],[112,32,106,30,"shift"],[112,37,106,35],[113,8,107,6,"shift"],[113,13,107,11],[113,17,107,15],[113,18,107,16],[114,6,108,4],[114,7,108,5],[114,15,108,13,"b"],[114,16,108,14],[114,20,108,18],[114,24,108,22],[115,6,109,4],[115,10,109,10,"dlng"],[115,14,109,14],[115,17,109,18],[115,18,109,19,"result"],[115,24,109,25],[115,27,109,28],[115,28,109,29],[115,34,109,35],[115,35,109,36],[115,38,109,39],[115,40,109,41,"result"],[115,46,109,47],[115,50,109,51],[115,51,109,52],[115,52,109,53],[115,55,109,57,"result"],[115,61,109,63],[115,65,109,67],[115,66,109,70],[116,6,110,4,"lng"],[116,9,110,7],[116,13,110,11,"dlng"],[116,17,110,15],[117,6,112,4,"points"],[117,12,112,10],[117,13,112,11,"push"],[117,17,112,15],[117,18,112,16],[118,8,113,6,"latitude"],[118,16,113,14],[118,18,113,16,"lat"],[118,21,113,19],[118,24,113,22],[118,27,113,25],[119,8,114,6,"longitude"],[119,17,114,15],[119,19,114,17,"lng"],[119,22,114,20],[119,25,114,23],[120,6,115,4],[120,7,115,5],[120,8,115,6],[121,4,116,2],[122,4,118,2],[122,11,118,9,"points"],[122,17,118,15],[123,2,119,0],[123,3,119,1],[125,2,121,0],[126,0,122,0],[127,0,123,0],[128,0,124,0],[129,0,125,0],[130,0,126,0],[131,2,121,0,"exports"],[131,9,121,0],[131,10,121,0,"decodePolyline"],[131,24,121,0],[131,27,121,0,"decodePolyline"],[131,41,121,0],[132,2,127,7],[132,6,127,13,"calculateRouteSafetyScore"],[132,31,127,38],[132,34,127,41,"calculateRouteSafetyScore"],[132,35,127,42,"routePoints"],[132,46,127,53],[132,48,127,55,"safetyMarkers"],[132,61,127,68],[132,66,127,73],[133,4,128,2],[133,8,128,6],[133,9,128,7,"routePoints"],[133,20,128,18],[133,24,128,22,"routePoints"],[133,35,128,33],[133,36,128,34,"length"],[133,42,128,40],[133,47,128,45],[133,48,128,46],[133,50,128,48],[133,57,128,55],[133,59,128,57],[135,4,130,2],[136,4,131,2],[136,8,131,8,"samplingInterval"],[136,24,131,24],[136,27,131,27,"Math"],[136,31,131,31],[136,32,131,32,"max"],[136,35,131,35],[136,36,131,36],[136,37,131,37],[136,39,131,39,"Math"],[136,43,131,43],[136,44,131,44,"floor"],[136,49,131,49],[136,50,131,50,"routePoints"],[136,61,131,61],[136,62,131,62,"length"],[136,68,131,68],[136,71,131,71],[136,73,131,73],[136,74,131,74],[136,75,131,75],[137,4,132,2],[137,8,132,8,"sampledPoints"],[137,21,132,21],[137,24,132,24,"routePoints"],[137,35,132,35],[137,36,132,36,"filter"],[137,42,132,42],[137,43,132,43],[137,44,132,44,"_"],[137,45,132,45],[137,47,132,47,"index"],[137,52,132,52],[137,57,132,57,"index"],[137,62,132,62],[137,65,132,65,"samplingInterval"],[137,81,132,81],[137,86,132,86],[137,87,132,87],[137,88,132,88],[139,4,134,2],[140,4,135,2],[140,8,135,8,"scores"],[140,14,135,14],[140,17,135,17,"sampledPoints"],[140,30,135,30],[140,31,135,31,"map"],[140,34,135,34],[140,35,135,35,"point"],[140,40,135,40],[140,44,136,4,"calculateSafetyScore"],[140,64,136,24],[140,65,136,25,"point"],[140,70,136,30],[140,72,136,32,"safetyMarkers"],[140,85,136,45],[140,86,137,2],[140,87,137,3],[142,4,139,2],[143,4,140,2],[143,8,140,8,"averageScore"],[143,20,140,20],[143,23,140,23,"scores"],[143,29,140,29],[143,30,140,30,"reduce"],[143,36,140,36],[143,37,140,37],[143,38,140,38,"sum"],[143,41,140,41],[143,43,140,43,"score"],[143,48,140,48],[143,53,140,53,"sum"],[143,56,140,56],[143,59,140,59,"score"],[143,64,140,64],[143,66,140,66],[143,67,140,67],[143,68,140,68],[143,71,140,71,"scores"],[143,77,140,77],[143,78,140,78,"length"],[143,84,140,84],[144,4,141,2],[144,11,141,9,"Math"],[144,15,141,13],[144,16,141,14,"round"],[144,21,141,19],[144,22,141,20,"averageScore"],[144,34,141,32],[144,35,141,33],[145,2,142,0],[145,3,142,1],[147,2,144,0],[148,0,145,0],[149,0,146,0],[150,0,147,0],[151,0,148,0],[152,0,149,0],[153,0,150,0],[154,2,144,0,"exports"],[154,9,144,0],[154,10,144,0,"calculateRouteSafetyScore"],[154,35,144,0],[154,38,144,0,"calculateRouteSafetyScore"],[154,63,144,0],[155,2,151,7],[155,6,151,13,"getSafestRoute"],[155,20,151,27],[155,23,151,27,"exports"],[155,30,151,27],[155,31,151,27,"getSafestRoute"],[155,45,151,27],[156,4,151,27],[156,8,151,27,"_ref2"],[156,13,151,27],[156,20,151,27,"_asyncToGenerator2"],[156,38,151,27],[156,39,151,27,"default"],[156,46,151,27],[156,48,151,30],[156,59,151,37,"origin"],[156,65,151,43],[156,67,151,45,"destination"],[156,78,151,56],[156,80,151,58,"safetyMarkers"],[156,93,151,71],[156,95,151,76],[157,6,152,2],[157,10,152,6],[158,8,153,4,"console"],[158,15,153,11],[158,16,153,12,"log"],[158,19,153,15],[158,20,153,16],[158,49,153,45],[158,50,153,46],[160,8,155,4],[161,8,156,4],[161,12,156,10,"routes"],[161,18,156,16],[161,27,156,25,"getRoutesFromGoogle"],[161,46,156,44],[161,47,156,45,"origin"],[161,53,156,51],[161,55,156,53,"destination"],[161,66,156,64],[161,68,156,66],[161,72,156,70],[161,73,156,71],[162,8,158,4],[162,12,158,8],[162,13,158,9,"routes"],[162,19,158,15],[162,23,158,19,"routes"],[162,29,158,25],[162,30,158,26,"length"],[162,36,158,32],[162,41,158,37],[162,42,158,38],[162,44,158,40],[163,10,159,6],[163,16,159,12],[163,20,159,16,"Error"],[163,25,159,21],[163,26,159,22],[163,43,159,39],[163,44,159,40],[164,8,160,4],[166,8,162,4],[167,8,163,4],[167,12,163,10,"analyzedRoutes"],[167,26,163,24],[167,29,163,27,"routes"],[167,35,163,33],[167,36,163,34,"map"],[167,39,163,37],[167,40,163,38,"route"],[167,45,163,43],[167,49,163,47],[168,10,164,6],[168,14,164,12,"points"],[168,20,164,18],[168,23,164,21,"decodePolyline"],[168,37,164,35],[168,38,164,36,"route"],[168,43,164,41],[168,44,164,42,"polyline"],[168,52,164,50],[168,53,164,51],[169,10,165,6],[169,14,165,12,"safetyScore"],[169,25,165,23],[169,28,165,26,"calculateRouteSafetyScore"],[169,53,165,51],[169,54,165,52,"points"],[169,60,165,58],[169,62,165,60,"safetyMarkers"],[169,75,165,73],[169,76,165,74],[170,10,167,6],[170,17,167,13],[171,12,168,8],[171,15,168,11,"route"],[171,20,168,16],[172,12,169,8,"points"],[172,18,169,14],[173,12,170,8,"safetyScore"],[173,23,170,19],[174,12,171,8],[175,12,172,8],[176,12,173,8,"weightedScore"],[176,25,173,21],[176,27,173,24,"safetyScore"],[176,38,173,35],[176,41,173,38],[176,44,173,41],[176,47,173,46],[176,48,173,47],[176,49,173,48],[176,52,173,52,"route"],[176,57,173,57],[176,58,173,58,"distance"],[176,66,173,66],[176,69,173,69],[176,74,173,75],[176,78,173,79],[177,10,174,6],[177,11,174,7],[178,8,175,4],[178,9,175,5],[178,10,175,6],[180,8,177,4],[181,8,178,4,"analyzedRoutes"],[181,22,178,18],[181,23,178,19,"sort"],[181,27,178,23],[181,28,178,24],[181,29,178,25,"a"],[181,30,178,26],[181,32,178,28,"b"],[181,33,178,29],[181,38,178,34,"b"],[181,39,178,35],[181,40,178,36,"weightedScore"],[181,53,178,49],[181,56,178,52,"a"],[181,57,178,53],[181,58,178,54,"weightedScore"],[181,71,178,67],[181,72,178,68],[182,8,180,4],[182,12,180,10,"bestRoute"],[182,21,180,19],[182,24,180,22,"analyzedRoutes"],[182,38,180,36],[182,39,180,37],[182,40,180,38],[182,41,180,39],[183,8,182,4,"console"],[183,15,182,11],[183,16,182,12,"log"],[183,19,182,15],[183,20,182,16],[183,29,182,25,"analyzedRoutes"],[183,43,182,39],[183,44,182,40,"length"],[183,50,182,46],[183,60,182,56],[183,61,182,57],[184,8,183,4,"analyzedRoutes"],[184,22,183,18],[184,23,183,19,"forEach"],[184,30,183,26],[184,31,183,27],[184,32,183,28,"route"],[184,37,183,33],[184,39,183,35,"index"],[184,44,183,40],[184,49,183,45],[185,10,184,6,"console"],[185,17,184,13],[185,18,184,14,"log"],[185,21,184,17],[185,22,184,18],[185,33,184,29,"index"],[185,38,184,34],[185,41,184,37],[185,42,184,38],[185,54,184,50,"route"],[185,59,184,55],[185,60,184,56,"safetyScore"],[185,71,184,67],[185,89,184,85],[185,90,184,86,"route"],[185,95,184,91],[185,96,184,92,"distance"],[185,104,184,100],[185,107,184,103],[185,111,184,107],[185,113,184,109,"toFixed"],[185,120,184,116],[185,121,184,117],[185,122,184,118],[185,123,184,119],[185,139,184,135,"route"],[185,144,184,140],[185,145,184,141,"weightedScore"],[185,158,184,154],[185,159,184,155,"toFixed"],[185,166,184,162],[185,167,184,163],[185,168,184,164],[185,169,184,165],[185,171,184,167],[185,172,184,168],[186,8,185,4],[186,9,185,5],[186,10,185,6],[187,8,187,4],[187,15,187,11],[188,10,188,6,"route"],[188,15,188,11],[188,17,188,13,"bestRoute"],[188,26,188,22],[189,10,189,6,"alternatives"],[189,22,189,18],[189,24,189,20,"analyzedRoutes"],[189,38,189,34],[189,39,189,35,"slice"],[189,44,189,40],[189,45,189,41],[189,46,189,42],[190,8,190,4],[190,9,190,5],[191,6,191,2],[191,7,191,3],[191,8,191,4],[191,15,191,11,"error"],[191,20,191,16],[191,22,191,18],[192,8,192,4,"console"],[192,15,192,11],[192,16,192,12,"error"],[192,21,192,17],[192,22,192,18],[192,55,192,51],[192,57,192,53,"error"],[192,62,192,58],[192,63,192,59],[193,8,193,4],[193,14,193,10,"error"],[193,19,193,15],[194,6,194,2],[195,4,195,0],[195,5,195,1],[196,4,195,1],[196,20,151,13,"getSafestRoute"],[196,34,151,27,"getSafestRoute"],[196,35,151,27,"_x3"],[196,38,151,27],[196,40,151,27,"_x4"],[196,43,151,27],[196,45,151,27,"_x5"],[196,48,151,27],[197,6,151,27],[197,13,151,27,"_ref2"],[197,18,151,27],[197,19,151,27,"apply"],[197,24,151,27],[197,31,151,27,"arguments"],[197,40,151,27],[198,4,151,27],[199,2,151,27],[199,5,195,1],[201,2,197,0],[202,0,198,0],[203,0,199,0],[204,0,200,0],[205,0,201,0],[206,0,202,0],[207,2,203,7],[207,6,203,13,"getFastestRoute"],[207,21,203,28],[207,24,203,28,"exports"],[207,31,203,28],[207,32,203,28,"getFastestRoute"],[207,47,203,28],[208,4,203,28],[208,8,203,28,"_ref3"],[208,13,203,28],[208,20,203,28,"_asyncToGenerator2"],[208,38,203,28],[208,39,203,28,"default"],[208,46,203,28],[208,48,203,31],[208,59,203,38,"origin"],[208,65,203,44],[208,67,203,46,"destination"],[208,78,203,57],[208,80,203,62],[209,6,204,2],[209,10,204,6],[210,8,205,4],[210,12,205,10,"routes"],[210,18,205,16],[210,27,205,25,"getRoutesFromGoogle"],[210,46,205,44],[210,47,205,45,"origin"],[210,53,205,51],[210,55,205,53,"destination"],[210,66,205,64],[210,68,205,66],[210,73,205,71],[210,74,205,72],[211,8,206,4],[211,12,206,8],[211,13,206,9,"routes"],[211,19,206,15],[211,23,206,19,"routes"],[211,29,206,25],[211,30,206,26,"length"],[211,36,206,32],[211,41,206,37],[211,42,206,38],[211,44,206,40],[212,10,207,6],[212,16,207,12],[212,20,207,16,"Error"],[212,25,207,21],[212,26,207,22],[212,43,207,39],[212,44,207,40],[213,8,208,4],[214,8,210,4],[214,12,210,10,"route"],[214,17,210,15],[214,20,210,18,"routes"],[214,26,210,24],[214,27,210,25],[214,28,210,26],[214,29,210,27],[215,8,211,4],[215,15,211,11],[216,10,212,6],[216,13,212,9,"route"],[216,18,212,14],[217,10,213,6,"points"],[217,16,213,12],[217,18,213,14,"decodePolyline"],[217,32,213,28],[217,33,213,29,"route"],[217,38,213,34],[217,39,213,35,"polyline"],[217,47,213,43],[218,8,214,4],[218,9,214,5],[219,6,215,2],[219,7,215,3],[219,8,215,4],[219,15,215,11,"error"],[219,20,215,16],[219,22,215,18],[220,8,216,4,"console"],[220,15,216,11],[220,16,216,12,"error"],[220,21,216,17],[220,22,216,18],[220,52,216,48],[220,54,216,50,"error"],[220,59,216,55],[220,60,216,56],[221,8,217,4],[221,14,217,10,"error"],[221,19,217,15],[222,6,218,2],[223,4,219,0],[223,5,219,1],[224,4,219,1],[224,20,203,13,"getFastestRoute"],[224,35,203,28,"getFastestRoute"],[224,36,203,28,"_x6"],[224,39,203,28],[224,41,203,28,"_x7"],[224,44,203,28],[225,6,203,28],[225,13,203,28,"_ref3"],[225,18,203,28],[225,19,203,28,"apply"],[225,24,203,28],[225,31,203,28,"arguments"],[225,40,203,28],[226,4,203,28],[227,2,203,28],[227,5,219,1],[228,0,219,2],[228,3]],"functionMap":{"names":["<global>","calculateSafetyScore","safetyMarkers.forEach$argument_0","getRoutesFromGoogle","data.routes.map$argument_0","decodePolyline","calculateRouteSafetyScore","routePoints.filter$argument_0","sampledPoints.map$argument_0","scores.reduce$argument_0","getSafestRoute","routes.map$argument_0","analyzedRoutes.sort$argument_0","analyzedRoutes.forEach$argument_0","getFastestRoute"],"mappings":"AAA;oCCY;wBCG;GDwB;CDI;mCGS;2BCY;MDM;CHK;8BKO;CLoC;yCMQ;2CCK,4CD;mCEG;8CFC;qCGI,2BH;CNE;8BUS;sCCY;KDY;wBEG,2CF;2BGK;KHE;CVU;+BcQ;CdgB"}},"type":"js/module"}]}