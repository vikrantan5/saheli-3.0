{"dependencies":[{"name":"./core","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":37,"index":123},"end":{"line":4,"column":54,"index":140}}],"key":"FXN3sf/EjRB4E2rwdgFcvRpWg7U=","exportNames":["*"]}},{"name":"./sha256","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":56,"index":142},"end":{"line":4,"column":75,"index":161}}],"key":"szC2YQtlpKalon91OETq/wSftHg=","exportNames":["*"]}},{"name":"./hmac","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":77,"index":163},"end":{"line":4,"column":94,"index":180}}],"key":"gjPbC+7SPgOAHZIpppjdmTlkXEY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  ;\n  (function (root, factory, undef) {\n    if (typeof exports === \"object\") {\n      // CommonJS\n      module.exports = exports = factory(require(_dependencyMap[0], \"./core\"), require(_dependencyMap[1], \"./sha256\"), require(_dependencyMap[2], \"./hmac\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      // AMD\n      define([\"./core\", \"./sha256\", \"./hmac\"], factory);\n    } else {\n      // Global (browser)\n      factory(root.CryptoJS);\n    }\n  })(this, function (CryptoJS) {\n    (function () {\n      // Shortcuts\n      var C = CryptoJS;\n      var C_lib = C.lib;\n      var Base = C_lib.Base;\n      var WordArray = C_lib.WordArray;\n      var C_algo = C.algo;\n      var SHA256 = C_algo.SHA256;\n      var HMAC = C_algo.HMAC;\n\n      /**\n       * Password-Based Key Derivation Function 2 algorithm.\n       */\n      var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n        /**\n         * Configuration options.\n         *\n         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n         * @property {Hasher} hasher The hasher to use. Default: SHA256\n         * @property {number} iterations The number of iterations to perform. Default: 250000\n         */\n        cfg: Base.extend({\n          keySize: 128 / 32,\n          hasher: SHA256,\n          iterations: 250000\n        }),\n        /**\n         * Initializes a newly created key derivation function.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n         *\n         * @example\n         *\n         *     var kdf = CryptoJS.algo.PBKDF2.create();\n         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n         */\n        init: function (cfg) {\n          this.cfg = this.cfg.extend(cfg);\n        },\n        /**\n         * Computes the Password-Based Key Derivation Function 2.\n         *\n         * @param {WordArray|string} password The password.\n         * @param {WordArray|string} salt A salt.\n         *\n         * @return {WordArray} The derived key.\n         *\n         * @example\n         *\n         *     var key = kdf.compute(password, salt);\n         */\n        compute: function (password, salt) {\n          // Shortcut\n          var cfg = this.cfg;\n\n          // Init HMAC\n          var hmac = HMAC.create(cfg.hasher, password);\n\n          // Initial values\n          var derivedKey = WordArray.create();\n          var blockIndex = WordArray.create([0x00000001]);\n\n          // Shortcuts\n          var derivedKeyWords = derivedKey.words;\n          var blockIndexWords = blockIndex.words;\n          var keySize = cfg.keySize;\n          var iterations = cfg.iterations;\n\n          // Generate key\n          while (derivedKeyWords.length < keySize) {\n            var block = hmac.update(salt).finalize(blockIndex);\n            hmac.reset();\n\n            // Shortcuts\n            var blockWords = block.words;\n            var blockWordsLength = blockWords.length;\n\n            // Iterations\n            var intermediate = block;\n            for (var i = 1; i < iterations; i++) {\n              intermediate = hmac.finalize(intermediate);\n              hmac.reset();\n\n              // Shortcut\n              var intermediateWords = intermediate.words;\n\n              // XOR intermediate with block\n              for (var j = 0; j < blockWordsLength; j++) {\n                blockWords[j] ^= intermediateWords[j];\n              }\n            }\n            derivedKey.concat(block);\n            blockIndexWords[0]++;\n          }\n          derivedKey.sigBytes = keySize * 4;\n          return derivedKey;\n        }\n      });\n\n      /**\n       * Computes the Password-Based Key Derivation Function 2.\n       *\n       * @param {WordArray|string} password The password.\n       * @param {WordArray|string} salt A salt.\n       * @param {Object} cfg (Optional) The configuration options to use for this computation.\n       *\n       * @return {WordArray} The derived key.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var key = CryptoJS.PBKDF2(password, salt);\n       *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n       *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n       */\n      C.PBKDF2 = function (password, salt, cfg) {\n        return PBKDF2.create(cfg).compute(password, salt);\n      };\n    })();\n    return CryptoJS.PBKDF2;\n  });\n});","lineCount":138,"map":[[2,2,1,0],[3,2,1,2],[3,13,1,12,"root"],[3,17,1,16],[3,19,1,18,"factory"],[3,26,1,25],[3,28,1,27,"undef"],[3,33,1,32],[3,35,1,34],[4,4,2,1],[4,8,2,5],[4,15,2,12,"exports"],[4,22,2,19],[4,27,2,24],[4,35,2,32],[4,37,2,34],[5,6,3,2],[6,6,4,2,"module"],[6,12,4,8],[6,13,4,9,"exports"],[6,20,4,16],[6,23,4,19,"exports"],[6,30,4,26],[6,33,4,29,"factory"],[6,40,4,36],[6,41,4,37,"require"],[6,48,4,44],[6,49,4,44,"_dependencyMap"],[6,63,4,44],[6,76,4,53],[6,77,4,54],[6,79,4,56,"require"],[6,86,4,63],[6,87,4,63,"_dependencyMap"],[6,101,4,63],[6,116,4,74],[6,117,4,75],[6,119,4,77,"require"],[6,126,4,84],[6,127,4,84,"_dependencyMap"],[6,141,4,84],[6,154,4,93],[6,155,4,94],[6,156,4,95],[7,4,5,1],[7,5,5,2],[7,11,6,6],[7,15,6,10],[7,22,6,17,"define"],[7,28,6,23],[7,33,6,28],[7,43,6,38],[7,47,6,42,"define"],[7,53,6,48],[7,54,6,49,"amd"],[7,57,6,52],[7,59,6,54],[8,6,7,2],[9,6,8,2,"define"],[9,12,8,8],[9,13,8,9],[9,14,8,10],[9,22,8,18],[9,24,8,20],[9,34,8,30],[9,36,8,32],[9,44,8,40],[9,45,8,41],[9,47,8,43,"factory"],[9,54,8,50],[9,55,8,51],[10,4,9,1],[10,5,9,2],[10,11,10,6],[11,6,11,2],[12,6,12,2,"factory"],[12,13,12,9],[12,14,12,10,"root"],[12,18,12,14],[12,19,12,15,"CryptoJS"],[12,27,12,23],[12,28,12,24],[13,4,13,1],[14,2,14,0],[14,3,14,1],[14,5,14,2],[14,9,14,6],[14,11,14,8],[14,21,14,18,"CryptoJS"],[14,29,14,26],[14,31,14,28],[15,4,16,2],[15,17,16,14],[16,6,17,5],[17,6,18,5],[17,10,18,9,"C"],[17,11,18,10],[17,14,18,13,"CryptoJS"],[17,22,18,21],[18,6,19,5],[18,10,19,9,"C_lib"],[18,15,19,14],[18,18,19,17,"C"],[18,19,19,18],[18,20,19,19,"lib"],[18,23,19,22],[19,6,20,5],[19,10,20,9,"Base"],[19,14,20,13],[19,17,20,16,"C_lib"],[19,22,20,21],[19,23,20,22,"Base"],[19,27,20,26],[20,6,21,5],[20,10,21,9,"WordArray"],[20,19,21,18],[20,22,21,21,"C_lib"],[20,27,21,26],[20,28,21,27,"WordArray"],[20,37,21,36],[21,6,22,5],[21,10,22,9,"C_algo"],[21,16,22,15],[21,19,22,18,"C"],[21,20,22,19],[21,21,22,20,"algo"],[21,25,22,24],[22,6,23,5],[22,10,23,9,"SHA256"],[22,16,23,15],[22,19,23,18,"C_algo"],[22,25,23,24],[22,26,23,25,"SHA256"],[22,32,23,31],[23,6,24,5],[23,10,24,9,"HMAC"],[23,14,24,13],[23,17,24,16,"C_algo"],[23,23,24,22],[23,24,24,23,"HMAC"],[23,28,24,27],[25,6,26,5],[26,0,27,0],[27,0,28,0],[28,6,29,5],[28,10,29,9,"PBKDF2"],[28,16,29,15],[28,19,29,18,"C_algo"],[28,25,29,24],[28,26,29,25,"PBKDF2"],[28,32,29,31],[28,35,29,34,"Base"],[28,39,29,38],[28,40,29,39,"extend"],[28,46,29,45],[28,47,29,46],[29,8,30,9],[30,0,31,0],[31,0,32,0],[32,0,33,0],[33,0,34,0],[34,0,35,0],[35,0,36,0],[36,8,37,9,"cfg"],[36,11,37,12],[36,13,37,14,"Base"],[36,17,37,18],[36,18,37,19,"extend"],[36,24,37,25],[36,25,37,26],[37,10,38,13,"keySize"],[37,17,38,20],[37,19,38,22],[37,22,38,25],[37,25,38,26],[37,27,38,28],[38,10,39,13,"hasher"],[38,16,39,19],[38,18,39,21,"SHA256"],[38,24,39,27],[39,10,40,13,"iterations"],[39,20,40,23],[39,22,40,25],[40,8,41,9],[40,9,41,10],[40,10,41,11],[41,8,43,9],[42,0,44,0],[43,0,45,0],[44,0,46,0],[45,0,47,0],[46,0,48,0],[47,0,49,0],[48,0,50,0],[49,0,51,0],[50,0,52,0],[51,0,53,0],[52,8,54,9,"init"],[52,12,54,13],[52,14,54,15],[52,23,54,15,"init"],[52,24,54,25,"cfg"],[52,27,54,28],[52,29,54,30],[53,10,55,13],[53,14,55,17],[53,15,55,18,"cfg"],[53,18,55,21],[53,21,55,24],[53,25,55,28],[53,26,55,29,"cfg"],[53,29,55,32],[53,30,55,33,"extend"],[53,36,55,39],[53,37,55,40,"cfg"],[53,40,55,43],[53,41,55,44],[54,8,56,9],[54,9,56,10],[55,8,58,9],[56,0,59,0],[57,0,60,0],[58,0,61,0],[59,0,62,0],[60,0,63,0],[61,0,64,0],[62,0,65,0],[63,0,66,0],[64,0,67,0],[65,0,68,0],[66,0,69,0],[67,8,70,9,"compute"],[67,15,70,16],[67,17,70,18],[67,26,70,18,"compute"],[67,27,70,28,"password"],[67,35,70,36],[67,37,70,38,"salt"],[67,41,70,42],[67,43,70,44],[68,10,71,13],[69,10,72,13],[69,14,72,17,"cfg"],[69,17,72,20],[69,20,72,23],[69,24,72,27],[69,25,72,28,"cfg"],[69,28,72,31],[71,10,74,13],[72,10,75,13],[72,14,75,17,"hmac"],[72,18,75,21],[72,21,75,24,"HMAC"],[72,25,75,28],[72,26,75,29,"create"],[72,32,75,35],[72,33,75,36,"cfg"],[72,36,75,39],[72,37,75,40,"hasher"],[72,43,75,46],[72,45,75,48,"password"],[72,53,75,56],[72,54,75,57],[74,10,77,13],[75,10,78,13],[75,14,78,17,"derivedKey"],[75,24,78,27],[75,27,78,30,"WordArray"],[75,36,78,39],[75,37,78,40,"create"],[75,43,78,46],[75,44,78,47],[75,45,78,48],[76,10,79,13],[76,14,79,17,"blockIndex"],[76,24,79,27],[76,27,79,30,"WordArray"],[76,36,79,39],[76,37,79,40,"create"],[76,43,79,46],[76,44,79,47],[76,45,79,48],[76,55,79,58],[76,56,79,59],[76,57,79,60],[78,10,81,13],[79,10,82,13],[79,14,82,17,"derivedKeyWords"],[79,29,82,32],[79,32,82,35,"derivedKey"],[79,42,82,45],[79,43,82,46,"words"],[79,48,82,51],[80,10,83,13],[80,14,83,17,"blockIndexWords"],[80,29,83,32],[80,32,83,35,"blockIndex"],[80,42,83,45],[80,43,83,46,"words"],[80,48,83,51],[81,10,84,13],[81,14,84,17,"keySize"],[81,21,84,24],[81,24,84,27,"cfg"],[81,27,84,30],[81,28,84,31,"keySize"],[81,35,84,38],[82,10,85,13],[82,14,85,17,"iterations"],[82,24,85,27],[82,27,85,30,"cfg"],[82,30,85,33],[82,31,85,34,"iterations"],[82,41,85,44],[84,10,87,13],[85,10,88,13],[85,17,88,20,"derivedKeyWords"],[85,32,88,35],[85,33,88,36,"length"],[85,39,88,42],[85,42,88,45,"keySize"],[85,49,88,52],[85,51,88,54],[86,12,89,17],[86,16,89,21,"block"],[86,21,89,26],[86,24,89,29,"hmac"],[86,28,89,33],[86,29,89,34,"update"],[86,35,89,40],[86,36,89,41,"salt"],[86,40,89,45],[86,41,89,46],[86,42,89,47,"finalize"],[86,50,89,55],[86,51,89,56,"blockIndex"],[86,61,89,66],[86,62,89,67],[87,12,90,17,"hmac"],[87,16,90,21],[87,17,90,22,"reset"],[87,22,90,27],[87,23,90,28],[87,24,90,29],[89,12,92,17],[90,12,93,17],[90,16,93,21,"blockWords"],[90,26,93,31],[90,29,93,34,"block"],[90,34,93,39],[90,35,93,40,"words"],[90,40,93,45],[91,12,94,17],[91,16,94,21,"blockWordsLength"],[91,32,94,37],[91,35,94,40,"blockWords"],[91,45,94,50],[91,46,94,51,"length"],[91,52,94,57],[93,12,96,17],[94,12,97,17],[94,16,97,21,"intermediate"],[94,28,97,33],[94,31,97,36,"block"],[94,36,97,41],[95,12,98,17],[95,17,98,22],[95,21,98,26,"i"],[95,22,98,27],[95,25,98,30],[95,26,98,31],[95,28,98,33,"i"],[95,29,98,34],[95,32,98,37,"iterations"],[95,42,98,47],[95,44,98,49,"i"],[95,45,98,50],[95,47,98,52],[95,49,98,54],[96,14,99,21,"intermediate"],[96,26,99,33],[96,29,99,36,"hmac"],[96,33,99,40],[96,34,99,41,"finalize"],[96,42,99,49],[96,43,99,50,"intermediate"],[96,55,99,62],[96,56,99,63],[97,14,100,21,"hmac"],[97,18,100,25],[97,19,100,26,"reset"],[97,24,100,31],[97,25,100,32],[97,26,100,33],[99,14,102,21],[100,14,103,21],[100,18,103,25,"intermediateWords"],[100,35,103,42],[100,38,103,45,"intermediate"],[100,50,103,57],[100,51,103,58,"words"],[100,56,103,63],[102,14,105,21],[103,14,106,21],[103,19,106,26],[103,23,106,30,"j"],[103,24,106,31],[103,27,106,34],[103,28,106,35],[103,30,106,37,"j"],[103,31,106,38],[103,34,106,41,"blockWordsLength"],[103,50,106,57],[103,52,106,59,"j"],[103,53,106,60],[103,55,106,62],[103,57,106,64],[104,16,107,25,"blockWords"],[104,26,107,35],[104,27,107,36,"j"],[104,28,107,37],[104,29,107,38],[104,33,107,42,"intermediateWords"],[104,50,107,59],[104,51,107,60,"j"],[104,52,107,61],[104,53,107,62],[105,14,108,21],[106,12,109,17],[107,12,111,17,"derivedKey"],[107,22,111,27],[107,23,111,28,"concat"],[107,29,111,34],[107,30,111,35,"block"],[107,35,111,40],[107,36,111,41],[108,12,112,17,"blockIndexWords"],[108,27,112,32],[108,28,112,33],[108,29,112,34],[108,30,112,35],[108,32,112,37],[109,10,113,13],[110,10,114,13,"derivedKey"],[110,20,114,23],[110,21,114,24,"sigBytes"],[110,29,114,32],[110,32,114,35,"keySize"],[110,39,114,42],[110,42,114,45],[110,43,114,46],[111,10,116,13],[111,17,116,20,"derivedKey"],[111,27,116,30],[112,8,117,9],[113,6,118,5],[113,7,118,6],[113,8,118,7],[115,6,120,5],[116,0,121,0],[117,0,122,0],[118,0,123,0],[119,0,124,0],[120,0,125,0],[121,0,126,0],[122,0,127,0],[123,0,128,0],[124,0,129,0],[125,0,130,0],[126,0,131,0],[127,0,132,0],[128,0,133,0],[129,0,134,0],[130,0,135,0],[131,0,136,0],[132,6,137,5,"C"],[132,7,137,6],[132,8,137,7,"PBKDF2"],[132,14,137,13],[132,17,137,16],[132,27,137,26,"password"],[132,35,137,34],[132,37,137,36,"salt"],[132,41,137,40],[132,43,137,42,"cfg"],[132,46,137,45],[132,48,137,47],[133,8,138,9],[133,15,138,16,"PBKDF2"],[133,21,138,22],[133,22,138,23,"create"],[133,28,138,29],[133,29,138,30,"cfg"],[133,32,138,33],[133,33,138,34],[133,34,138,35,"compute"],[133,41,138,42],[133,42,138,43,"password"],[133,50,138,51],[133,52,138,53,"salt"],[133,56,138,57],[133,57,138,58],[134,6,139,5],[134,7,139,6],[135,4,140,1],[135,5,140,2],[135,7,140,3],[135,8,140,4],[136,4,143,1],[136,11,143,8,"CryptoJS"],[136,19,143,16],[136,20,143,17,"PBKDF2"],[136,26,143,23],[137,2,145,0],[137,3,145,1],[137,4,145,2],[138,0,145,4],[138,3]],"functionMap":{"names":["<global>","<anonymous>","Base.extend$argument_0.init","Base.extend$argument_0.compute","C.PBKDF2"],"mappings":"AAA,EC;CDa,OC;eCwC;UDE;kBEc;UF+C;gBGoB;MHE;CDM"}},"type":"js/module"}]}