{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}},{"name":"./differenceInCalendarDays.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":73,"index":132}}],"key":"imq/EGPR6TLwAkGUJvGZSPH1SeI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.differenceInDays = differenceInDays;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _normalizeDates3 = require(_dependencyMap[2], \"./_lib/normalizeDates.js\");\n  var _differenceInCalendarDays = require(_dependencyMap[3], \"./differenceInCalendarDays.js\");\n  /**\n   * The {@link differenceInDays} function options.\n   */\n\n  /**\n   * @name differenceInDays\n   * @category Day Helpers\n   * @summary Get the number of full days between the given dates.\n   *\n   * @description\n   * Get the number of full day periods between two dates. Fractional days are\n   * truncated towards zero.\n   *\n   * One \"full day\" is the distance between a local time in one day to the same\n   * local time on the next or previous day. A full day can sometimes be less than\n   * or more than 24 hours if a daylight savings change happens between two dates.\n   *\n   * To ignore DST and only measure exact 24-hour periods, use this instead:\n   * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n   *\n   * @param laterDate - The later date\n   * @param earlierDate - The earlier date\n   * @param options - An object with options\n   *\n   * @returns The number of full days according to the local timezone\n   *\n   * @example\n   * // How many full days are between\n   * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n   * const result = differenceInDays(\n   *   new Date(2012, 6, 2, 0, 0),\n   *   new Date(2011, 6, 2, 23, 0)\n   * )\n   * //=> 365\n   *\n   * @example\n   * // How many full days are between\n   * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n   * const result = differenceInDays(\n   *   new Date(2011, 6, 3, 0, 1),\n   *   new Date(2011, 6, 2, 23, 59)\n   * )\n   * //=> 0\n   *\n   * @example\n   * // How many full days are between\n   * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n   * // Note: because local time is used, the\n   * // result will always be 92 days, even in\n   * // time zones where DST starts and the\n   * // period has only 92*24-1 hours.\n   * const result = differenceInDays(\n   *   new Date(2020, 5, 1),\n   *   new Date(2020, 2, 1)\n   * )\n   * //=> 92\n   */\n  function differenceInDays(laterDate, earlierDate, options) {\n    var _normalizeDates = (0, _normalizeDates3.normalizeDates)(options?.in, laterDate, earlierDate),\n      _normalizeDates2 = (0, _slicedToArray2.default)(_normalizeDates, 2),\n      laterDate_ = _normalizeDates2[0],\n      earlierDate_ = _normalizeDates2[1];\n    var sign = compareLocalAsc(laterDate_, earlierDate_);\n    var difference = Math.abs((0, _differenceInCalendarDays.differenceInCalendarDays)(laterDate_, earlierDate_));\n    laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n    // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n    // If so, result must be decreased by 1 in absolute value\n    var isLastDayNotFull = Number(compareLocalAsc(laterDate_, earlierDate_) === -sign);\n    var result = sign * (difference - isLastDayNotFull);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  }\n\n  // Like `compareAsc` but uses local time not UTC, which is needed\n  // for accurate equality comparisons of UTC timestamps that end up\n  // having the same representation in local time, e.g. one hour before\n  // DST ends vs. the instant that DST ends.\n  function compareLocalAsc(laterDate, earlierDate) {\n    var diff = laterDate.getFullYear() - earlierDate.getFullYear() || laterDate.getMonth() - earlierDate.getMonth() || laterDate.getDate() - earlierDate.getDate() || laterDate.getHours() - earlierDate.getHours() || laterDate.getMinutes() - earlierDate.getMinutes() || laterDate.getSeconds() - earlierDate.getSeconds() || laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n    if (diff < 0) return -1;\n    if (diff > 0) return 1;\n\n    // Return 0 if diff is 0; return NaN if diff is NaN\n    return diff;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = differenceInDays;\n});","lineCount":100,"map":[[9,2,1,0],[9,6,1,0,"_normalizeDates3"],[9,22,1,0],[9,25,1,0,"require"],[9,32,1,0],[9,33,1,0,"_dependencyMap"],[9,47,1,0],[10,2,2,0],[10,6,2,0,"_differenceInCalendarDays"],[10,31,2,0],[10,34,2,0,"require"],[10,41,2,0],[10,42,2,0,"_dependencyMap"],[10,56,2,0],[11,2,4,0],[12,0,5,0],[13,0,6,0],[15,2,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,0,48,0],[56,0,49,0],[57,0,50,0],[58,0,51,0],[59,0,52,0],[60,0,53,0],[61,0,54,0],[62,0,55,0],[63,0,56,0],[64,0,57,0],[65,0,58,0],[66,0,59,0],[67,0,60,0],[68,2,61,7],[68,11,61,16,"differenceInDays"],[68,27,61,32,"differenceInDays"],[68,28,61,33,"laterDate"],[68,37,61,42],[68,39,61,44,"earlierDate"],[68,50,61,55],[68,52,61,57,"options"],[68,59,61,64],[68,61,61,66],[69,4,62,2],[69,8,62,2,"_normalizeDates"],[69,23,62,2],[69,26,62,37],[69,30,62,37,"normalizeDates"],[69,61,62,51],[69,63,63,4,"options"],[69,70,63,11],[69,72,63,13,"in"],[69,74,63,15],[69,76,64,4,"laterDate"],[69,85,64,13],[69,87,65,4,"earlierDate"],[69,98,66,2],[69,99,66,3],[70,6,66,3,"_normalizeDates2"],[70,22,66,3],[70,29,66,3,"_slicedToArray2"],[70,44,66,3],[70,45,66,3,"default"],[70,52,66,3],[70,54,66,3,"_normalizeDates"],[70,69,66,3],[71,6,62,9,"laterDate_"],[71,16,62,19],[71,19,62,19,"_normalizeDates2"],[71,35,62,19],[72,6,62,21,"earlierDate_"],[72,18,62,33],[72,21,62,33,"_normalizeDates2"],[72,37,62,33],[73,4,68,2],[73,8,68,8,"sign"],[73,12,68,12],[73,15,68,15,"compareLocalAsc"],[73,30,68,30],[73,31,68,31,"laterDate_"],[73,41,68,41],[73,43,68,43,"earlierDate_"],[73,55,68,55],[73,56,68,56],[74,4,69,2],[74,8,69,8,"difference"],[74,18,69,18],[74,21,69,21,"Math"],[74,25,69,25],[74,26,69,26,"abs"],[74,29,69,29],[74,30,70,4],[74,34,70,4,"differenceInCalendarDays"],[74,84,70,28],[74,86,70,29,"laterDate_"],[74,96,70,39],[74,98,70,41,"earlierDate_"],[74,110,70,53],[74,111,71,2],[74,112,71,3],[75,4,73,2,"laterDate_"],[75,14,73,12],[75,15,73,13,"setDate"],[75,22,73,20],[75,23,73,21,"laterDate_"],[75,33,73,31],[75,34,73,32,"getDate"],[75,41,73,39],[75,42,73,40],[75,43,73,41],[75,46,73,44,"sign"],[75,50,73,48],[75,53,73,51,"difference"],[75,63,73,61],[75,64,73,62],[77,4,75,2],[78,4,76,2],[79,4,77,2],[79,8,77,8,"isLastDayNotFull"],[79,24,77,24],[79,27,77,27,"Number"],[79,33,77,33],[79,34,78,4,"compareLocalAsc"],[79,49,78,19],[79,50,78,20,"laterDate_"],[79,60,78,30],[79,62,78,32,"earlierDate_"],[79,74,78,44],[79,75,78,45],[79,80,78,50],[79,81,78,51,"sign"],[79,85,79,2],[79,86,79,3],[80,4,81,2],[80,8,81,8,"result"],[80,14,81,14],[80,17,81,17,"sign"],[80,21,81,21],[80,25,81,25,"difference"],[80,35,81,35],[80,38,81,38,"isLastDayNotFull"],[80,54,81,54],[80,55,81,55],[81,4,82,2],[82,4,83,2],[82,11,83,9,"result"],[82,17,83,15],[82,22,83,20],[82,23,83,21],[82,26,83,24],[82,27,83,25],[82,30,83,28,"result"],[82,36,83,34],[83,2,84,0],[85,2,86,0],[86,2,87,0],[87,2,88,0],[88,2,89,0],[89,2,90,0],[89,11,90,9,"compareLocalAsc"],[89,26,90,24,"compareLocalAsc"],[89,27,90,25,"laterDate"],[89,36,90,34],[89,38,90,36,"earlierDate"],[89,49,90,47],[89,51,90,49],[90,4,91,2],[90,8,91,8,"diff"],[90,12,91,12],[90,15,92,4,"laterDate"],[90,24,92,13],[90,25,92,14,"getFullYear"],[90,36,92,25],[90,37,92,26],[90,38,92,27],[90,41,92,30,"earlierDate"],[90,52,92,41],[90,53,92,42,"getFullYear"],[90,64,92,53],[90,65,92,54],[90,66,92,55],[90,70,93,4,"laterDate"],[90,79,93,13],[90,80,93,14,"getMonth"],[90,88,93,22],[90,89,93,23],[90,90,93,24],[90,93,93,27,"earlierDate"],[90,104,93,38],[90,105,93,39,"getMonth"],[90,113,93,47],[90,114,93,48],[90,115,93,49],[90,119,94,4,"laterDate"],[90,128,94,13],[90,129,94,14,"getDate"],[90,136,94,21],[90,137,94,22],[90,138,94,23],[90,141,94,26,"earlierDate"],[90,152,94,37],[90,153,94,38,"getDate"],[90,160,94,45],[90,161,94,46],[90,162,94,47],[90,166,95,4,"laterDate"],[90,175,95,13],[90,176,95,14,"getHours"],[90,184,95,22],[90,185,95,23],[90,186,95,24],[90,189,95,27,"earlierDate"],[90,200,95,38],[90,201,95,39,"getHours"],[90,209,95,47],[90,210,95,48],[90,211,95,49],[90,215,96,4,"laterDate"],[90,224,96,13],[90,225,96,14,"getMinutes"],[90,235,96,24],[90,236,96,25],[90,237,96,26],[90,240,96,29,"earlierDate"],[90,251,96,40],[90,252,96,41,"getMinutes"],[90,262,96,51],[90,263,96,52],[90,264,96,53],[90,268,97,4,"laterDate"],[90,277,97,13],[90,278,97,14,"getSeconds"],[90,288,97,24],[90,289,97,25],[90,290,97,26],[90,293,97,29,"earlierDate"],[90,304,97,40],[90,305,97,41,"getSeconds"],[90,315,97,51],[90,316,97,52],[90,317,97,53],[90,321,98,4,"laterDate"],[90,330,98,13],[90,331,98,14,"getMilliseconds"],[90,346,98,29],[90,347,98,30],[90,348,98,31],[90,351,98,34,"earlierDate"],[90,362,98,45],[90,363,98,46,"getMilliseconds"],[90,378,98,61],[90,379,98,62],[90,380,98,63],[91,4,100,2],[91,8,100,6,"diff"],[91,12,100,10],[91,15,100,13],[91,16,100,14],[91,18,100,16],[91,25,100,23],[91,26,100,24],[91,27,100,25],[92,4,101,2],[92,8,101,6,"diff"],[92,12,101,10],[92,15,101,13],[92,16,101,14],[92,18,101,16],[92,25,101,23],[92,26,101,24],[94,4,103,2],[95,4,104,2],[95,11,104,9,"diff"],[95,15,104,13],[96,2,105,0],[98,2,107,0],[99,2,107,0],[99,6,107,0,"_default"],[99,14,107,0],[99,17,107,0,"exports"],[99,24,107,0],[99,25,107,0,"default"],[99,32,107,0],[99,35,108,15,"differenceInDays"],[99,51,108,31],[100,0,108,31],[100,3]],"functionMap":{"names":["<global>","differenceInDays","compareLocalAsc"],"mappings":"AAA;OC4D;CDuB;AEM;CFe"}},"type":"js/module"}]}