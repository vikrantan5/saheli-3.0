{"dependencies":[{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.milliseconds = milliseconds;\n  var _constants = require(_dependencyMap[0], \"./constants.js\");\n  /**\n   * @name milliseconds\n   * @category Millisecond Helpers\n   * @summary\n   * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n   *\n   * @description\n   * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n   *\n   * One years equals 365.2425 days according to the formula:\n   *\n   * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n   * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n   *\n   * One month is a year divided by 12.\n   *\n   * @param duration - The object with years, months, weeks, days, hours, minutes and seconds to be added.\n   *\n   * @returns The milliseconds\n   *\n   * @example\n   * // 1 year in milliseconds\n   * milliseconds({ years: 1 })\n   * //=> 31556952000\n   *\n   * // 3 months in milliseconds\n   * milliseconds({ months: 3 })\n   * //=> 7889238000\n   */\n  function milliseconds(_ref) {\n    var years = _ref.years,\n      months = _ref.months,\n      weeks = _ref.weeks,\n      days = _ref.days,\n      hours = _ref.hours,\n      minutes = _ref.minutes,\n      seconds = _ref.seconds;\n    var totalDays = 0;\n    if (years) totalDays += years * _constants.daysInYear;\n    if (months) totalDays += months * (_constants.daysInYear / 12);\n    if (weeks) totalDays += weeks * 7;\n    if (days) totalDays += days;\n    var totalSeconds = totalDays * 24 * 60 * 60;\n    if (hours) totalSeconds += hours * 60 * 60;\n    if (minutes) totalSeconds += minutes * 60;\n    if (seconds) totalSeconds += seconds;\n    return Math.trunc(totalSeconds * 1000);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = milliseconds;\n});","lineCount":59,"map":[[7,2,1,0],[7,6,1,0,"_constants"],[7,16,1,0],[7,19,1,0,"require"],[7,26,1,0],[7,27,1,0,"_dependencyMap"],[7,41,1,0],[8,2,3,0],[9,0,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,2,32,7],[37,11,32,16,"milliseconds"],[37,23,32,28,"milliseconds"],[37,24,32,28,"_ref"],[37,28,32,28],[37,30,40,3],[38,4,40,3],[38,8,33,2,"years"],[38,13,33,7],[38,16,33,7,"_ref"],[38,20,33,7],[38,21,33,2,"years"],[38,26,33,7],[39,6,34,2,"months"],[39,12,34,8],[39,15,34,8,"_ref"],[39,19,34,8],[39,20,34,2,"months"],[39,26,34,8],[40,6,35,2,"weeks"],[40,11,35,7],[40,14,35,7,"_ref"],[40,18,35,7],[40,19,35,2,"weeks"],[40,24,35,7],[41,6,36,2,"days"],[41,10,36,6],[41,13,36,6,"_ref"],[41,17,36,6],[41,18,36,2,"days"],[41,22,36,6],[42,6,37,2,"hours"],[42,11,37,7],[42,14,37,7,"_ref"],[42,18,37,7],[42,19,37,2,"hours"],[42,24,37,7],[43,6,38,2,"minutes"],[43,13,38,9],[43,16,38,9,"_ref"],[43,20,38,9],[43,21,38,2,"minutes"],[43,28,38,9],[44,6,39,2,"seconds"],[44,13,39,9],[44,16,39,9,"_ref"],[44,20,39,9],[44,21,39,2,"seconds"],[44,28,39,9],[45,4,41,2],[45,8,41,6,"totalDays"],[45,17,41,15],[45,20,41,18],[45,21,41,19],[46,4,43,2],[46,8,43,6,"years"],[46,13,43,11],[46,15,43,13,"totalDays"],[46,24,43,22],[46,28,43,26,"years"],[46,33,43,31],[46,36,43,34,"daysInYear"],[46,57,43,44],[47,4,44,2],[47,8,44,6,"months"],[47,14,44,12],[47,16,44,14,"totalDays"],[47,25,44,23],[47,29,44,27,"months"],[47,35,44,33],[47,39,44,37,"daysInYear"],[47,60,44,47],[47,63,44,50],[47,65,44,52],[47,66,44,53],[48,4,45,2],[48,8,45,6,"weeks"],[48,13,45,11],[48,15,45,13,"totalDays"],[48,24,45,22],[48,28,45,26,"weeks"],[48,33,45,31],[48,36,45,34],[48,37,45,35],[49,4,46,2],[49,8,46,6,"days"],[49,12,46,10],[49,14,46,12,"totalDays"],[49,23,46,21],[49,27,46,25,"days"],[49,31,46,29],[50,4,48,2],[50,8,48,6,"totalSeconds"],[50,20,48,18],[50,23,48,21,"totalDays"],[50,32,48,30],[50,35,48,33],[50,37,48,35],[50,40,48,38],[50,42,48,40],[50,45,48,43],[50,47,48,45],[51,4,50,2],[51,8,50,6,"hours"],[51,13,50,11],[51,15,50,13,"totalSeconds"],[51,27,50,25],[51,31,50,29,"hours"],[51,36,50,34],[51,39,50,37],[51,41,50,39],[51,44,50,42],[51,46,50,44],[52,4,51,2],[52,8,51,6,"minutes"],[52,15,51,13],[52,17,51,15,"totalSeconds"],[52,29,51,27],[52,33,51,31,"minutes"],[52,40,51,38],[52,43,51,41],[52,45,51,43],[53,4,52,2],[53,8,52,6,"seconds"],[53,15,52,13],[53,17,52,15,"totalSeconds"],[53,29,52,27],[53,33,52,31,"seconds"],[53,40,52,38],[54,4,54,2],[54,11,54,9,"Math"],[54,15,54,13],[54,16,54,14,"trunc"],[54,21,54,19],[54,22,54,20,"totalSeconds"],[54,34,54,32],[54,37,54,35],[54,41,54,39],[54,42,54,40],[55,2,55,0],[57,2,57,0],[58,2,57,0],[58,6,57,0,"_default"],[58,14,57,0],[58,17,57,0,"exports"],[58,24,57,0],[58,25,57,0,"default"],[58,32,57,0],[58,35,58,15,"milliseconds"],[58,47,58,27],[59,0,58,27],[59,3]],"functionMap":{"names":["<global>","milliseconds"],"mappings":"AAA;OC+B;CDuB"}},"type":"js/module"}]}