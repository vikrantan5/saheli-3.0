{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"./_lib/defaultLocale.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"pt9gPO2ve6GSRFbXPAQkm4R9a2w=","exportNames":["*"]}},{"name":"./_lib/defaultOptions.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":61,"index":118}}],"key":"RLyj7w3ZPZGGUSjkcz/7nwwn2xo=","exportNames":["*"]}},{"name":"./_lib/getTimezoneOffsetInMilliseconds.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":119},"end":{"line":3,"column":92,"index":211}}],"key":"AyqjCuTamFHRMXjptSd4N6rS1NE=","exportNames":["*"]}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":212},"end":{"line":4,"column":58,"index":270}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}},{"name":"./compareAsc.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":271},"end":{"line":5,"column":45,"index":316}}],"key":"0qIXq/JoGP2oJkpZUgvMj3rdXHw=","exportNames":["*"]}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":317},"end":{"line":6,"column":62,"index":379}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}},{"name":"./differenceInMonths.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":380},"end":{"line":7,"column":61,"index":441}}],"key":"IeGEp66ASPGPZxfJbelFlYNRVPY=","exportNames":["*"]}},{"name":"./differenceInSeconds.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":442},"end":{"line":8,"column":63,"index":505}}],"key":"40yFAaHgVIChYRicd6k8qNnd60I=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.formatDistance = formatDistance;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _defaultLocale = require(_dependencyMap[2], \"./_lib/defaultLocale.js\");\n  var _defaultOptions = require(_dependencyMap[3], \"./_lib/defaultOptions.js\");\n  var _getTimezoneOffsetInMilliseconds = require(_dependencyMap[4], \"./_lib/getTimezoneOffsetInMilliseconds.js\");\n  var _normalizeDates3 = require(_dependencyMap[5], \"./_lib/normalizeDates.js\");\n  var _compareAsc = require(_dependencyMap[6], \"./compareAsc.js\");\n  var _constants = require(_dependencyMap[7], \"./constants.js\");\n  var _differenceInMonths = require(_dependencyMap[8], \"./differenceInMonths.js\");\n  var _differenceInSeconds = require(_dependencyMap[9], \"./differenceInSeconds.js\");\n  /**\n   * The {@link formatDistance} function options.\n   */\n\n  /**\n   * @name formatDistance\n   * @category Common Helpers\n   * @summary Return the distance between the given dates in words.\n   *\n   * @description\n   * Return the distance between the given dates in words.\n   *\n   * | Distance between dates                                            | Result              |\n   * |-------------------------------------------------------------------|---------------------|\n   * | 0 ... 30 secs                                                     | less than a minute  |\n   * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n   * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n   * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n   * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n   * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n   * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n   * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n   * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n   * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n   * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n   * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n   * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n   * | N yrs ... N yrs 3 months                                          | about N years       |\n   * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n   * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n   *\n   * With `options.includeSeconds == true`:\n   * | Distance between dates | Result               |\n   * |------------------------|----------------------|\n   * | 0 secs ... 5 secs      | less than 5 seconds  |\n   * | 5 secs ... 10 secs     | less than 10 seconds |\n   * | 10 secs ... 20 secs    | less than 20 seconds |\n   * | 20 secs ... 40 secs    | half a minute        |\n   * | 40 secs ... 60 secs    | less than a minute   |\n   * | 60 secs ... 90 secs    | 1 minute             |\n   *\n   * @param laterDate - The date\n   * @param earlierDate - The date to compare with\n   * @param options - An object with options\n   *\n   * @returns The distance in words\n   *\n   * @throws `date` must not be Invalid Date\n   * @throws `baseDate` must not be Invalid Date\n   * @throws `options.locale` must contain `formatDistance` property\n   *\n   * @example\n   * // What is the distance between 2 July 2014 and 1 January 2015?\n   * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n   * //=> '6 months'\n   *\n   * @example\n   * // What is the distance between 1 January 2015 00:00:15\n   * // and 1 January 2015 00:00:00, including seconds?\n   * const result = formatDistance(\n   *   new Date(2015, 0, 1, 0, 0, 15),\n   *   new Date(2015, 0, 1, 0, 0, 0),\n   *   { includeSeconds: true }\n   * )\n   * //=> 'less than 20 seconds'\n   *\n   * @example\n   * // What is the distance from 1 January 2016\n   * // to 1 January 2015, with a suffix?\n   * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n   *   addSuffix: true\n   * })\n   * //=> 'about 1 year ago'\n   *\n   * @example\n   * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n   * import { eoLocale } from 'date-fns/locale/eo'\n   * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n   *   locale: eoLocale\n   * })\n   * //=> 'pli ol 1 jaro'\n   */\n  function formatDistance(laterDate, earlierDate, options) {\n    var defaultOptions = (0, _defaultOptions.getDefaultOptions)();\n    var locale = options?.locale ?? defaultOptions.locale ?? _defaultLocale.defaultLocale;\n    var minutesInAlmostTwoDays = 2520;\n    var comparison = (0, _compareAsc.compareAsc)(laterDate, earlierDate);\n    if (isNaN(comparison)) throw new RangeError(\"Invalid time value\");\n    var localizeOptions = Object.assign({}, options, {\n      addSuffix: options?.addSuffix,\n      comparison: comparison\n    });\n    var _normalizeDates = (0, _normalizeDates3.normalizeDates)(options?.in, ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate])),\n      _normalizeDates2 = (0, _slicedToArray2.default)(_normalizeDates, 2),\n      laterDate_ = _normalizeDates2[0],\n      earlierDate_ = _normalizeDates2[1];\n    var seconds = (0, _differenceInSeconds.differenceInSeconds)(earlierDate_, laterDate_);\n    var offsetInSeconds = ((0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(earlierDate_) - (0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(laterDate_)) / 1000;\n    var minutes = Math.round((seconds - offsetInSeconds) / 60);\n    var months;\n\n    // 0 up to 2 mins\n    if (minutes < 2) {\n      if (options?.includeSeconds) {\n        if (seconds < 5) {\n          return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n        } else if (seconds < 10) {\n          return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n        } else if (seconds < 20) {\n          return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n        } else if (seconds < 40) {\n          return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n        } else if (seconds < 60) {\n          return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n        } else {\n          return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n        }\n      } else {\n        if (minutes === 0) {\n          return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n        } else {\n          return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n        }\n      }\n\n      // 2 mins up to 0.75 hrs\n    } else if (minutes < 45) {\n      return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n      // 0.75 hrs up to 1.5 hrs\n    } else if (minutes < 90) {\n      return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n      // 1.5 hrs up to 24 hrs\n    } else if (minutes < _constants.minutesInDay) {\n      var hours = Math.round(minutes / 60);\n      return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n      // 1 day up to 1.75 days\n    } else if (minutes < minutesInAlmostTwoDays) {\n      return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n      // 1.75 days up to 30 days\n    } else if (minutes < _constants.minutesInMonth) {\n      var days = Math.round(minutes / _constants.minutesInDay);\n      return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n      // 1 month up to 2 months\n    } else if (minutes < _constants.minutesInMonth * 2) {\n      months = Math.round(minutes / _constants.minutesInMonth);\n      return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n    }\n    months = (0, _differenceInMonths.differenceInMonths)(earlierDate_, laterDate_);\n\n    // 2 months up to 12 months\n    if (months < 12) {\n      var nearestMonth = Math.round(minutes / _constants.minutesInMonth);\n      return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n      // 1 year up to max Date\n    } else {\n      var monthsSinceStartOfYear = months % 12;\n      var years = Math.trunc(months / 12);\n\n      // N years up to 1 years 3 months\n      if (monthsSinceStartOfYear < 3) {\n        return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n        // N years 3 months up to N years 9 months\n      } else if (monthsSinceStartOfYear < 9) {\n        return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n        // N years 9 months up to N year 12 months\n      } else {\n        return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n      }\n    }\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = formatDistance;\n});","lineCount":198,"map":[[9,2,1,0],[9,6,1,0,"_defaultLocale"],[9,20,1,0],[9,23,1,0,"require"],[9,30,1,0],[9,31,1,0,"_dependencyMap"],[9,45,1,0],[10,2,2,0],[10,6,2,0,"_defaultOptions"],[10,21,2,0],[10,24,2,0,"require"],[10,31,2,0],[10,32,2,0,"_dependencyMap"],[10,46,2,0],[11,2,3,0],[11,6,3,0,"_getTimezoneOffsetInMilliseconds"],[11,38,3,0],[11,41,3,0,"require"],[11,48,3,0],[11,49,3,0,"_dependencyMap"],[11,63,3,0],[12,2,4,0],[12,6,4,0,"_normalizeDates3"],[12,22,4,0],[12,25,4,0,"require"],[12,32,4,0],[12,33,4,0,"_dependencyMap"],[12,47,4,0],[13,2,5,0],[13,6,5,0,"_compareAsc"],[13,17,5,0],[13,20,5,0,"require"],[13,27,5,0],[13,28,5,0,"_dependencyMap"],[13,42,5,0],[14,2,6,0],[14,6,6,0,"_constants"],[14,16,6,0],[14,19,6,0,"require"],[14,26,6,0],[14,27,6,0,"_dependencyMap"],[14,41,6,0],[15,2,7,0],[15,6,7,0,"_differenceInMonths"],[15,25,7,0],[15,28,7,0,"require"],[15,35,7,0],[15,36,7,0,"_dependencyMap"],[15,50,7,0],[16,2,8,0],[16,6,8,0,"_differenceInSeconds"],[16,26,8,0],[16,29,8,0,"require"],[16,36,8,0],[16,37,8,0,"_dependencyMap"],[16,51,8,0],[17,2,10,0],[18,0,11,0],[19,0,12,0],[21,2,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,0,48,0],[56,0,49,0],[57,0,50,0],[58,0,51,0],[59,0,52,0],[60,0,53,0],[61,0,54,0],[62,0,55,0],[63,0,56,0],[64,0,57,0],[65,0,58,0],[66,0,59,0],[67,0,60,0],[68,0,61,0],[69,0,62,0],[70,0,63,0],[71,0,64,0],[72,0,65,0],[73,0,66,0],[74,0,67,0],[75,0,68,0],[76,0,69,0],[77,0,70,0],[78,0,71,0],[79,0,72,0],[80,0,73,0],[81,0,74,0],[82,0,75,0],[83,0,76,0],[84,0,77,0],[85,0,78,0],[86,0,79,0],[87,0,80,0],[88,0,81,0],[89,0,82,0],[90,0,83,0],[91,0,84,0],[92,0,85,0],[93,0,86,0],[94,0,87,0],[95,0,88,0],[96,0,89,0],[97,0,90,0],[98,0,91,0],[99,2,92,7],[99,11,92,16,"formatDistance"],[99,25,92,30,"formatDistance"],[99,26,92,31,"laterDate"],[99,35,92,40],[99,37,92,42,"earlierDate"],[99,48,92,53],[99,50,92,55,"options"],[99,57,92,62],[99,59,92,64],[100,4,93,2],[100,8,93,8,"defaultOptions"],[100,22,93,22],[100,25,93,25],[100,29,93,25,"getDefaultOptions"],[100,62,93,42],[100,64,93,43],[100,65,93,44],[101,4,94,2],[101,8,94,8,"locale"],[101,14,94,14],[101,17,94,17,"options"],[101,24,94,24],[101,26,94,26,"locale"],[101,32,94,32],[101,36,94,36,"defaultOptions"],[101,50,94,50],[101,51,94,51,"locale"],[101,57,94,57],[101,61,94,61,"defaultLocale"],[101,89,94,74],[102,4,95,2],[102,8,95,8,"minutesInAlmostTwoDays"],[102,30,95,30],[102,33,95,33],[102,37,95,37],[103,4,97,2],[103,8,97,8,"comparison"],[103,18,97,18],[103,21,97,21],[103,25,97,21,"compareAsc"],[103,47,97,31],[103,49,97,32,"laterDate"],[103,58,97,41],[103,60,97,43,"earlierDate"],[103,71,97,54],[103,72,97,55],[104,4,99,2],[104,8,99,6,"isNaN"],[104,13,99,11],[104,14,99,12,"comparison"],[104,24,99,22],[104,25,99,23],[104,27,99,25],[104,33,99,31],[104,37,99,35,"RangeError"],[104,47,99,45],[104,48,99,46],[104,68,99,66],[104,69,99,67],[105,4,101,2],[105,8,101,8,"localizeOptions"],[105,23,101,23],[105,26,101,26,"Object"],[105,32,101,32],[105,33,101,33,"assign"],[105,39,101,39],[105,40,101,40],[105,41,101,41],[105,42,101,42],[105,44,101,44,"options"],[105,51,101,51],[105,53,101,53],[106,6,102,4,"addSuffix"],[106,15,102,13],[106,17,102,15,"options"],[106,24,102,22],[106,26,102,24,"addSuffix"],[106,35,102,33],[107,6,103,4,"comparison"],[107,16,103,14],[107,18,103,16,"comparison"],[108,4,104,2],[108,5,104,3],[108,6,104,4],[109,4,106,2],[109,8,106,2,"_normalizeDates"],[109,23,106,2],[109,26,106,37],[109,30,106,37,"normalizeDates"],[109,61,106,51],[109,63,107,4,"options"],[109,70,107,11],[109,72,107,13,"in"],[109,74,107,15],[109,76,108,4],[109,80,108,8,"comparison"],[109,90,108,18],[109,93,108,21],[109,94,108,22],[109,97,108,25],[109,98,108,26,"earlierDate"],[109,109,108,37],[109,111,108,39,"laterDate"],[109,120,108,48],[109,121,108,49],[109,124,108,52],[109,125,108,53,"laterDate"],[109,134,108,62],[109,136,108,64,"earlierDate"],[109,147,108,75],[109,148,108,76],[109,149,109,2],[109,150,109,3],[110,6,109,3,"_normalizeDates2"],[110,22,109,3],[110,29,109,3,"_slicedToArray2"],[110,44,109,3],[110,45,109,3,"default"],[110,52,109,3],[110,54,109,3,"_normalizeDates"],[110,69,109,3],[111,6,106,9,"laterDate_"],[111,16,106,19],[111,19,106,19,"_normalizeDates2"],[111,35,106,19],[112,6,106,21,"earlierDate_"],[112,18,106,33],[112,21,106,33,"_normalizeDates2"],[112,37,106,33],[113,4,111,2],[113,8,111,8,"seconds"],[113,15,111,15],[113,18,111,18],[113,22,111,18,"differenceInSeconds"],[113,62,111,37],[113,64,111,38,"earlierDate_"],[113,76,111,50],[113,78,111,52,"laterDate_"],[113,88,111,62],[113,89,111,63],[114,4,112,2],[114,8,112,8,"offsetInSeconds"],[114,23,112,23],[114,26,113,4],[114,27,113,5],[114,31,113,5,"getTimezoneOffsetInMilliseconds"],[114,95,113,36],[114,97,113,37,"earlierDate_"],[114,109,113,49],[114,110,113,50],[114,113,114,6],[114,117,114,6,"getTimezoneOffsetInMilliseconds"],[114,181,114,37],[114,183,114,38,"laterDate_"],[114,193,114,48],[114,194,114,49],[114,198,115,4],[114,202,115,8],[115,4,116,2],[115,8,116,8,"minutes"],[115,15,116,15],[115,18,116,18,"Math"],[115,22,116,22],[115,23,116,23,"round"],[115,28,116,28],[115,29,116,29],[115,30,116,30,"seconds"],[115,37,116,37],[115,40,116,40,"offsetInSeconds"],[115,55,116,55],[115,59,116,59],[115,61,116,61],[115,62,116,62],[116,4,117,2],[116,8,117,6,"months"],[116,14,117,12],[118,4,119,2],[119,4,120,2],[119,8,120,6,"minutes"],[119,15,120,13],[119,18,120,16],[119,19,120,17],[119,21,120,19],[120,6,121,4],[120,10,121,8,"options"],[120,17,121,15],[120,19,121,17,"includeSeconds"],[120,33,121,31],[120,35,121,33],[121,8,122,6],[121,12,122,10,"seconds"],[121,19,122,17],[121,22,122,20],[121,23,122,21],[121,25,122,23],[122,10,123,8],[122,17,123,15,"locale"],[122,23,123,21],[122,24,123,22,"formatDistance"],[122,38,123,36],[122,39,123,37],[122,57,123,55],[122,59,123,57],[122,60,123,58],[122,62,123,60,"localizeOptions"],[122,77,123,75],[122,78,123,76],[123,8,124,6],[123,9,124,7],[123,15,124,13],[123,19,124,17,"seconds"],[123,26,124,24],[123,29,124,27],[123,31,124,29],[123,33,124,31],[124,10,125,8],[124,17,125,15,"locale"],[124,23,125,21],[124,24,125,22,"formatDistance"],[124,38,125,36],[124,39,125,37],[124,57,125,55],[124,59,125,57],[124,61,125,59],[124,63,125,61,"localizeOptions"],[124,78,125,76],[124,79,125,77],[125,8,126,6],[125,9,126,7],[125,15,126,13],[125,19,126,17,"seconds"],[125,26,126,24],[125,29,126,27],[125,31,126,29],[125,33,126,31],[126,10,127,8],[126,17,127,15,"locale"],[126,23,127,21],[126,24,127,22,"formatDistance"],[126,38,127,36],[126,39,127,37],[126,57,127,55],[126,59,127,57],[126,61,127,59],[126,63,127,61,"localizeOptions"],[126,78,127,76],[126,79,127,77],[127,8,128,6],[127,9,128,7],[127,15,128,13],[127,19,128,17,"seconds"],[127,26,128,24],[127,29,128,27],[127,31,128,29],[127,33,128,31],[128,10,129,8],[128,17,129,15,"locale"],[128,23,129,21],[128,24,129,22,"formatDistance"],[128,38,129,36],[128,39,129,37],[128,52,129,50],[128,54,129,52],[128,55,129,53],[128,57,129,55,"localizeOptions"],[128,72,129,70],[128,73,129,71],[129,8,130,6],[129,9,130,7],[129,15,130,13],[129,19,130,17,"seconds"],[129,26,130,24],[129,29,130,27],[129,31,130,29],[129,33,130,31],[130,10,131,8],[130,17,131,15,"locale"],[130,23,131,21],[130,24,131,22,"formatDistance"],[130,38,131,36],[130,39,131,37],[130,57,131,55],[130,59,131,57],[130,60,131,58],[130,62,131,60,"localizeOptions"],[130,77,131,75],[130,78,131,76],[131,8,132,6],[131,9,132,7],[131,15,132,13],[132,10,133,8],[132,17,133,15,"locale"],[132,23,133,21],[132,24,133,22,"formatDistance"],[132,38,133,36],[132,39,133,37],[132,49,133,47],[132,51,133,49],[132,52,133,50],[132,54,133,52,"localizeOptions"],[132,69,133,67],[132,70,133,68],[133,8,134,6],[134,6,135,4],[134,7,135,5],[134,13,135,11],[135,8,136,6],[135,12,136,10,"minutes"],[135,19,136,17],[135,24,136,22],[135,25,136,23],[135,27,136,25],[136,10,137,8],[136,17,137,15,"locale"],[136,23,137,21],[136,24,137,22,"formatDistance"],[136,38,137,36],[136,39,137,37],[136,57,137,55],[136,59,137,57],[136,60,137,58],[136,62,137,60,"localizeOptions"],[136,77,137,75],[136,78,137,76],[137,8,138,6],[137,9,138,7],[137,15,138,13],[138,10,139,8],[138,17,139,15,"locale"],[138,23,139,21],[138,24,139,22,"formatDistance"],[138,38,139,36],[138,39,139,37],[138,49,139,47],[138,51,139,49,"minutes"],[138,58,139,56],[138,60,139,58,"localizeOptions"],[138,75,139,73],[138,76,139,74],[139,8,140,6],[140,6,141,4],[142,6,143,4],[143,4,144,2],[143,5,144,3],[143,11,144,9],[143,15,144,13,"minutes"],[143,22,144,20],[143,25,144,23],[143,27,144,25],[143,29,144,27],[144,6,145,4],[144,13,145,11,"locale"],[144,19,145,17],[144,20,145,18,"formatDistance"],[144,34,145,32],[144,35,145,33],[144,45,145,43],[144,47,145,45,"minutes"],[144,54,145,52],[144,56,145,54,"localizeOptions"],[144,71,145,69],[144,72,145,70],[146,6,147,4],[147,4,148,2],[147,5,148,3],[147,11,148,9],[147,15,148,13,"minutes"],[147,22,148,20],[147,25,148,23],[147,27,148,25],[147,29,148,27],[148,6,149,4],[148,13,149,11,"locale"],[148,19,149,17],[148,20,149,18,"formatDistance"],[148,34,149,32],[148,35,149,33],[148,48,149,46],[148,50,149,48],[148,51,149,49],[148,53,149,51,"localizeOptions"],[148,68,149,66],[148,69,149,67],[150,6,151,4],[151,4,152,2],[151,5,152,3],[151,11,152,9],[151,15,152,13,"minutes"],[151,22,152,20],[151,25,152,23,"minutesInDay"],[151,48,152,35],[151,50,152,37],[152,6,153,4],[152,10,153,10,"hours"],[152,15,153,15],[152,18,153,18,"Math"],[152,22,153,22],[152,23,153,23,"round"],[152,28,153,28],[152,29,153,29,"minutes"],[152,36,153,36],[152,39,153,39],[152,41,153,41],[152,42,153,42],[153,6,154,4],[153,13,154,11,"locale"],[153,19,154,17],[153,20,154,18,"formatDistance"],[153,34,154,32],[153,35,154,33],[153,48,154,46],[153,50,154,48,"hours"],[153,55,154,53],[153,57,154,55,"localizeOptions"],[153,72,154,70],[153,73,154,71],[155,6,156,4],[156,4,157,2],[156,5,157,3],[156,11,157,9],[156,15,157,13,"minutes"],[156,22,157,20],[156,25,157,23,"minutesInAlmostTwoDays"],[156,47,157,45],[156,49,157,47],[157,6,158,4],[157,13,158,11,"locale"],[157,19,158,17],[157,20,158,18,"formatDistance"],[157,34,158,32],[157,35,158,33],[157,42,158,40],[157,44,158,42],[157,45,158,43],[157,47,158,45,"localizeOptions"],[157,62,158,60],[157,63,158,61],[159,6,160,4],[160,4,161,2],[160,5,161,3],[160,11,161,9],[160,15,161,13,"minutes"],[160,22,161,20],[160,25,161,23,"minutesInMonth"],[160,50,161,37],[160,52,161,39],[161,6,162,4],[161,10,162,10,"days"],[161,14,162,14],[161,17,162,17,"Math"],[161,21,162,21],[161,22,162,22,"round"],[161,27,162,27],[161,28,162,28,"minutes"],[161,35,162,35],[161,38,162,38,"minutesInDay"],[161,61,162,50],[161,62,162,51],[162,6,163,4],[162,13,163,11,"locale"],[162,19,163,17],[162,20,163,18,"formatDistance"],[162,34,163,32],[162,35,163,33],[162,42,163,40],[162,44,163,42,"days"],[162,48,163,46],[162,50,163,48,"localizeOptions"],[162,65,163,63],[162,66,163,64],[164,6,165,4],[165,4,166,2],[165,5,166,3],[165,11,166,9],[165,15,166,13,"minutes"],[165,22,166,20],[165,25,166,23,"minutesInMonth"],[165,50,166,37],[165,53,166,40],[165,54,166,41],[165,56,166,43],[166,6,167,4,"months"],[166,12,167,10],[166,15,167,13,"Math"],[166,19,167,17],[166,20,167,18,"round"],[166,25,167,23],[166,26,167,24,"minutes"],[166,33,167,31],[166,36,167,34,"minutesInMonth"],[166,61,167,48],[166,62,167,49],[167,6,168,4],[167,13,168,11,"locale"],[167,19,168,17],[167,20,168,18,"formatDistance"],[167,34,168,32],[167,35,168,33],[167,49,168,47],[167,51,168,49,"months"],[167,57,168,55],[167,59,168,57,"localizeOptions"],[167,74,168,72],[167,75,168,73],[168,4,169,2],[169,4,171,2,"months"],[169,10,171,8],[169,13,171,11],[169,17,171,11,"differenceInMonths"],[169,55,171,29],[169,57,171,30,"earlierDate_"],[169,69,171,42],[169,71,171,44,"laterDate_"],[169,81,171,54],[169,82,171,55],[171,4,173,2],[172,4,174,2],[172,8,174,6,"months"],[172,14,174,12],[172,17,174,15],[172,19,174,17],[172,21,174,19],[173,6,175,4],[173,10,175,10,"nearestMonth"],[173,22,175,22],[173,25,175,25,"Math"],[173,29,175,29],[173,30,175,30,"round"],[173,35,175,35],[173,36,175,36,"minutes"],[173,43,175,43],[173,46,175,46,"minutesInMonth"],[173,71,175,60],[173,72,175,61],[174,6,176,4],[174,13,176,11,"locale"],[174,19,176,17],[174,20,176,18,"formatDistance"],[174,34,176,32],[174,35,176,33],[174,44,176,42],[174,46,176,44,"nearestMonth"],[174,58,176,56],[174,60,176,58,"localizeOptions"],[174,75,176,73],[174,76,176,74],[176,6,178,4],[177,4,179,2],[177,5,179,3],[177,11,179,9],[178,6,180,4],[178,10,180,10,"monthsSinceStartOfYear"],[178,32,180,32],[178,35,180,35,"months"],[178,41,180,41],[178,44,180,44],[178,46,180,46],[179,6,181,4],[179,10,181,10,"years"],[179,15,181,15],[179,18,181,18,"Math"],[179,22,181,22],[179,23,181,23,"trunc"],[179,28,181,28],[179,29,181,29,"months"],[179,35,181,35],[179,38,181,38],[179,40,181,40],[179,41,181,41],[181,6,183,4],[182,6,184,4],[182,10,184,8,"monthsSinceStartOfYear"],[182,32,184,30],[182,35,184,33],[182,36,184,34],[182,38,184,36],[183,8,185,6],[183,15,185,13,"locale"],[183,21,185,19],[183,22,185,20,"formatDistance"],[183,36,185,34],[183,37,185,35],[183,50,185,48],[183,52,185,50,"years"],[183,57,185,55],[183,59,185,57,"localizeOptions"],[183,74,185,72],[183,75,185,73],[185,8,187,6],[186,6,188,4],[186,7,188,5],[186,13,188,11],[186,17,188,15,"monthsSinceStartOfYear"],[186,39,188,37],[186,42,188,40],[186,43,188,41],[186,45,188,43],[187,8,189,6],[187,15,189,13,"locale"],[187,21,189,19],[187,22,189,20,"formatDistance"],[187,36,189,34],[187,37,189,35],[187,49,189,47],[187,51,189,49,"years"],[187,56,189,54],[187,58,189,56,"localizeOptions"],[187,73,189,71],[187,74,189,72],[189,8,191,6],[190,6,192,4],[190,7,192,5],[190,13,192,11],[191,8,193,6],[191,15,193,13,"locale"],[191,21,193,19],[191,22,193,20,"formatDistance"],[191,36,193,34],[191,37,193,35],[191,51,193,49],[191,53,193,51,"years"],[191,58,193,56],[191,61,193,59],[191,62,193,60],[191,64,193,62,"localizeOptions"],[191,79,193,77],[191,80,193,78],[192,6,194,4],[193,4,195,2],[194,2,196,0],[196,2,198,0],[197,2,198,0],[197,6,198,0,"_default"],[197,14,198,0],[197,17,198,0,"exports"],[197,24,198,0],[197,25,198,0,"default"],[197,32,198,0],[197,35,199,15,"formatDistance"],[197,49,199,29],[198,0,199,29],[198,3]],"functionMap":{"names":["<global>","formatDistance"],"mappings":"AAA;OC2F;CDwG"}},"type":"js/module"}]}