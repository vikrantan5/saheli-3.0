{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"firebase/firestore","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":13,"column":28,"index":189}}],"key":"n8ZdwTgQb9oFW01pH/SKxYwC/nA=","exportNames":["*"]}},{"name":"firebase/storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":191},"end":{"line":14,"column":68,"index":259}}],"key":"gnxuAFqfHppifCx3rWRGYoeEoGk=","exportNames":["*"]}},{"name":"../config/firebaseConfig","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":261},"end":{"line":15,"column":52,"index":313}}],"key":"c2ktbavwtrva9DBC5I1TB1Fz260=","exportNames":["*"]}},{"name":"./userService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":315},"end":{"line":16,"column":47,"index":362}}],"key":"2Z6ZAOT4PmgFRSNEA6C/eMZwyYo=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.upvotePost = exports.subscribeToPosts = exports.isCriticalPost = exports.hasUserUpvoted = exports.createPost = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _firestore = require(_dependencyMap[2], \"firebase/firestore\");\n  var _storage = require(_dependencyMap[3], \"firebase/storage\");\n  var _firebaseConfig = require(_dependencyMap[4], \"../config/firebaseConfig\");\n  var _userService = require(_dependencyMap[5], \"./userService\");\n  /**\r\n   * Create a new community post\r\n   * @param {Object} postData - Post data\r\n   * @param {string} postData.content - Post content/message\r\n   * @param {string} postData.category - Category: 'safety-alerts', 'support', or 'general'\r\n   * @param {boolean} postData.isAnonymous - Whether post is anonymous\r\n   * @param {string} postData.imageUri - Optional image URI\r\n   * @returns {Promise<string>} - Document ID of created post\r\n   */\n  var createPost = exports.createPost = /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* (postData) {\n      try {\n        var currentUser = _firebaseConfig.auth.currentUser;\n        if (!currentUser) {\n          throw new Error('User must be logged in to create a post');\n        }\n\n        // Get user details for username\n        var userDetails = yield (0, _userService.getUserDetails)(currentUser.uid);\n        var username = userDetails?.name || 'Anonymous User';\n\n        // Prepare post object\n        var post = {\n          userId: currentUser.uid,\n          username: postData.isAnonymous ? 'Anonymous' : username,\n          isAnonymous: postData.isAnonymous || false,\n          category: postData.category,\n          content: postData.content,\n          timestamp: (0, _firestore.serverTimestamp)(),\n          upvotes: 0,\n          upvoters: [],\n          imageUrl: postData.imageUrl || null\n        };\n        console.log('Creating post:', post);\n\n        // Add post to Firestore\n        var docRef = yield (0, _firestore.addDoc)((0, _firestore.collection)(_firebaseConfig.db, 'community_posts'), post);\n        console.log('✅ Post created successfully with ID:', docRef.id);\n        return docRef.id;\n      } catch (error) {\n        console.error('❌ Error creating post:', error);\n        throw error;\n      }\n    });\n    return function createPost(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  /**\r\n   * Subscribe to real-time posts updates\r\n   * @param {string} category - Filter by category ('all', 'safety-alerts', 'support', 'general')\r\n   * @param {Function} callback - Callback function that receives posts array\r\n   * @returns {Function} - Unsubscribe function\r\n   */\n  var subscribeToPosts = (category, callback) => {\n    try {\n      var q;\n      if (category === 'all') {\n        // Get all posts, ordered by timestamp descending\n        q = (0, _firestore.query)((0, _firestore.collection)(_firebaseConfig.db, 'community_posts'), (0, _firestore.orderBy)('timestamp', 'desc'));\n      } else {\n        // Filter by category\n        q = (0, _firestore.query)((0, _firestore.collection)(_firebaseConfig.db, 'community_posts'), (0, _firestore.where)('category', '==', category), (0, _firestore.orderBy)('timestamp', 'desc'));\n      }\n      console.log('📡 Subscribing to posts with category:', category);\n\n      // Set up real-time listener\n      var unsubscribe = (0, _firestore.onSnapshot)(q, querySnapshot => {\n        var posts = [];\n        querySnapshot.forEach(doc => {\n          posts.push({\n            id: doc.id,\n            ...doc.data(),\n            // Convert Firestore timestamp to JavaScript Date\n            timestamp: doc.data().timestamp?.toDate() || new Date()\n          });\n        });\n        console.log(`✅ Received ${posts.length} posts from Firestore`);\n        callback(posts);\n      }, error => {\n        console.error('❌ Error in posts subscription:', error);\n        callback([]);\n      });\n      return unsubscribe;\n    } catch (error) {\n      console.error('❌ Error setting up posts subscription:', error);\n      return () => {}; // Return empty unsubscribe function\n    }\n  };\n\n  /**\r\n   * Upvote a post (atomic operation, one vote per user)\r\n   * @param {string} postId - Post document ID\r\n   * @returns {Promise<void>}\r\n   */\n  exports.subscribeToPosts = subscribeToPosts;\n  var upvotePost = exports.upvotePost = /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2.default)(function* (postId) {\n      try {\n        var currentUser = _firebaseConfig.auth.currentUser;\n        if (!currentUser) {\n          throw new Error('User must be logged in to upvote');\n        }\n        var postRef = (0, _firestore.doc)(_firebaseConfig.db, 'community_posts', postId);\n\n        // Use transaction to ensure atomic updates\n        yield (0, _firestore.runTransaction)(_firebaseConfig.db, /*#__PURE__*/function () {\n          var _ref3 = (0, _asyncToGenerator2.default)(function* (transaction) {\n            var postDoc = yield transaction.get(postRef);\n            if (!postDoc.exists()) {\n              throw new Error('Post does not exist');\n            }\n            var postData = postDoc.data();\n            var upvoters = postData.upvoters || [];\n            var currentUpvotes = postData.upvotes || 0;\n\n            // Check if user has already upvoted\n            if (upvoters.includes(currentUser.uid)) {\n              // Remove upvote\n              transaction.update(postRef, {\n                upvotes: currentUpvotes - 1,\n                upvoters: upvoters.filter(uid => uid !== currentUser.uid)\n              });\n              console.log('👎 Removed upvote from post:', postId);\n            } else {\n              // Add upvote\n              transaction.update(postRef, {\n                upvotes: currentUpvotes + 1,\n                upvoters: [...upvoters, currentUser.uid]\n              });\n              console.log('👍 Added upvote to post:', postId);\n            }\n          });\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n        console.log('✅ Upvote transaction completed successfully');\n      } catch (error) {\n        console.error('❌ Error upvoting post:', error);\n        throw error;\n      }\n    });\n    return function upvotePost(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  /**\r\n   * Check if current user has upvoted a post\r\n   * @param {Array} upvoters - Array of user IDs who upvoted\r\n   * @returns {boolean}\r\n   */\n  var hasUserUpvoted = upvoters => {\n    var currentUser = _firebaseConfig.auth.currentUser;\n    if (!currentUser || !upvoters) return false;\n    return upvoters.includes(currentUser.uid);\n  };\n\n  /**\r\n   * Check if a post is critical (needs attention)\r\n   * @param {number} upvotes - Number of upvotes\r\n   * @returns {boolean}\r\n   */\n  exports.hasUserUpvoted = hasUserUpvoted;\n  var isCriticalPost = upvotes => {\n    return upvotes >= 10;\n  };\n  exports.isCriticalPost = isCriticalPost;\n});","lineCount":182,"map":[[8,2,1,0],[8,6,1,0,"_firestore"],[8,16,1,0],[8,19,1,0,"require"],[8,26,1,0],[8,27,1,0,"_dependencyMap"],[8,41,1,0],[9,2,14,0],[9,6,14,0,"_storage"],[9,14,14,0],[9,17,14,0,"require"],[9,24,14,0],[9,25,14,0,"_dependencyMap"],[9,39,14,0],[10,2,15,0],[10,6,15,0,"_firebaseConfig"],[10,21,15,0],[10,24,15,0,"require"],[10,31,15,0],[10,32,15,0,"_dependencyMap"],[10,46,15,0],[11,2,16,0],[11,6,16,0,"_userService"],[11,18,16,0],[11,21,16,0,"require"],[11,28,16,0],[11,29,16,0,"_dependencyMap"],[11,43,16,0],[12,2,18,0],[13,0,19,0],[14,0,20,0],[15,0,21,0],[16,0,22,0],[17,0,23,0],[18,0,24,0],[19,0,25,0],[20,0,26,0],[21,2,27,7],[21,6,27,13,"createPost"],[21,16,27,23],[21,19,27,23,"exports"],[21,26,27,23],[21,27,27,23,"createPost"],[21,37,27,23],[22,4,27,23],[22,8,27,23,"_ref"],[22,12,27,23],[22,19,27,23,"_asyncToGenerator2"],[22,37,27,23],[22,38,27,23,"default"],[22,45,27,23],[22,47,27,26],[22,58,27,33,"postData"],[22,66,27,41],[22,68,27,46],[23,6,28,2],[23,10,28,6],[24,8,29,4],[24,12,29,10,"currentUser"],[24,23,29,21],[24,26,29,24,"auth"],[24,46,29,28],[24,47,29,29,"currentUser"],[24,58,29,40],[25,8,30,4],[25,12,30,8],[25,13,30,9,"currentUser"],[25,24,30,20],[25,26,30,22],[26,10,31,6],[26,16,31,12],[26,20,31,16,"Error"],[26,25,31,21],[26,26,31,22],[26,67,31,63],[26,68,31,64],[27,8,32,4],[29,8,34,4],[30,8,35,4],[30,12,35,10,"userDetails"],[30,23,35,21],[30,32,35,30],[30,36,35,30,"getUserDetails"],[30,63,35,44],[30,65,35,45,"currentUser"],[30,76,35,56],[30,77,35,57,"uid"],[30,80,35,60],[30,81,35,61],[31,8,36,4],[31,12,36,10,"username"],[31,20,36,18],[31,23,36,21,"userDetails"],[31,34,36,32],[31,36,36,34,"name"],[31,40,36,38],[31,44,36,42],[31,60,36,58],[33,8,38,4],[34,8,39,4],[34,12,39,10,"post"],[34,16,39,14],[34,19,39,17],[35,10,40,6,"userId"],[35,16,40,12],[35,18,40,14,"currentUser"],[35,29,40,25],[35,30,40,26,"uid"],[35,33,40,29],[36,10,41,6,"username"],[36,18,41,14],[36,20,41,16,"postData"],[36,28,41,24],[36,29,41,25,"isAnonymous"],[36,40,41,36],[36,43,41,39],[36,54,41,50],[36,57,41,53,"username"],[36,65,41,61],[37,10,42,6,"isAnonymous"],[37,21,42,17],[37,23,42,19,"postData"],[37,31,42,27],[37,32,42,28,"isAnonymous"],[37,43,42,39],[37,47,42,43],[37,52,42,48],[38,10,43,6,"category"],[38,18,43,14],[38,20,43,16,"postData"],[38,28,43,24],[38,29,43,25,"category"],[38,37,43,33],[39,10,44,6,"content"],[39,17,44,13],[39,19,44,15,"postData"],[39,27,44,23],[39,28,44,24,"content"],[39,35,44,31],[40,10,45,6,"timestamp"],[40,19,45,15],[40,21,45,17],[40,25,45,17,"serverTimestamp"],[40,51,45,32],[40,53,45,33],[40,54,45,34],[41,10,46,6,"upvotes"],[41,17,46,13],[41,19,46,15],[41,20,46,16],[42,10,47,6,"upvoters"],[42,18,47,14],[42,20,47,16],[42,22,47,18],[43,10,48,6,"imageUrl"],[43,18,48,14],[43,20,48,16,"postData"],[43,28,48,24],[43,29,48,25,"imageUrl"],[43,37,48,33],[43,41,48,37],[44,8,49,4],[44,9,49,5],[45,8,51,4,"console"],[45,15,51,11],[45,16,51,12,"log"],[45,19,51,15],[45,20,51,16],[45,36,51,32],[45,38,51,34,"post"],[45,42,51,38],[45,43,51,39],[47,8,53,4],[48,8,54,4],[48,12,54,10,"docRef"],[48,18,54,16],[48,27,54,25],[48,31,54,25,"addDoc"],[48,48,54,31],[48,50,54,32],[48,54,54,32,"collection"],[48,75,54,42],[48,77,54,43,"db"],[48,95,54,45],[48,97,54,47],[48,114,54,64],[48,115,54,65],[48,117,54,67,"post"],[48,121,54,71],[48,122,54,72],[49,8,55,4,"console"],[49,15,55,11],[49,16,55,12,"log"],[49,19,55,15],[49,20,55,16],[49,58,55,54],[49,60,55,56,"docRef"],[49,66,55,62],[49,67,55,63,"id"],[49,69,55,65],[49,70,55,66],[50,8,57,4],[50,15,57,11,"docRef"],[50,21,57,17],[50,22,57,18,"id"],[50,24,57,20],[51,6,58,2],[51,7,58,3],[51,8,58,4],[51,15,58,11,"error"],[51,20,58,16],[51,22,58,18],[52,8,59,4,"console"],[52,15,59,11],[52,16,59,12,"error"],[52,21,59,17],[52,22,59,18],[52,46,59,42],[52,48,59,44,"error"],[52,53,59,49],[52,54,59,50],[53,8,60,4],[53,14,60,10,"error"],[53,19,60,15],[54,6,61,2],[55,4,62,0],[55,5,62,1],[56,4,62,1],[56,20,27,13,"createPost"],[56,30,27,23,"createPost"],[56,31,27,23,"_x"],[56,33,27,23],[57,6,27,23],[57,13,27,23,"_ref"],[57,17,27,23],[57,18,27,23,"apply"],[57,23,27,23],[57,30,27,23,"arguments"],[57,39,27,23],[58,4,27,23],[59,2,27,23],[59,5,62,1],[61,2,64,0],[62,0,65,0],[63,0,66,0],[64,0,67,0],[65,0,68,0],[66,0,69,0],[67,2,70,7],[67,6,70,13,"subscribeToPosts"],[67,22,70,29],[67,25,70,32,"subscribeToPosts"],[67,26,70,33,"category"],[67,34,70,41],[67,36,70,43,"callback"],[67,44,70,51],[67,49,70,56],[68,4,71,2],[68,8,71,6],[69,6,72,4],[69,10,72,8,"q"],[69,11,72,9],[70,6,74,4],[70,10,74,8,"category"],[70,18,74,16],[70,23,74,21],[70,28,74,26],[70,30,74,28],[71,8,75,6],[72,8,76,6,"q"],[72,9,76,7],[72,12,76,10],[72,16,76,10,"query"],[72,32,76,15],[72,34,77,8],[72,38,77,8,"collection"],[72,59,77,18],[72,61,77,19,"db"],[72,79,77,21],[72,81,77,23],[72,98,77,40],[72,99,77,41],[72,101,78,8],[72,105,78,8,"orderBy"],[72,123,78,15],[72,125,78,16],[72,136,78,27],[72,138,78,29],[72,144,78,35],[72,145,79,6],[72,146,79,7],[73,6,80,4],[73,7,80,5],[73,13,80,11],[74,8,81,6],[75,8,82,6,"q"],[75,9,82,7],[75,12,82,10],[75,16,82,10,"query"],[75,32,82,15],[75,34,83,8],[75,38,83,8,"collection"],[75,59,83,18],[75,61,83,19,"db"],[75,79,83,21],[75,81,83,23],[75,98,83,40],[75,99,83,41],[75,101,84,8],[75,105,84,8,"where"],[75,121,84,13],[75,123,84,14],[75,133,84,24],[75,135,84,26],[75,139,84,30],[75,141,84,32,"category"],[75,149,84,40],[75,150,84,41],[75,152,85,8],[75,156,85,8,"orderBy"],[75,174,85,15],[75,176,85,16],[75,187,85,27],[75,189,85,29],[75,195,85,35],[75,196,86,6],[75,197,86,7],[76,6,87,4],[77,6,89,4,"console"],[77,13,89,11],[77,14,89,12,"log"],[77,17,89,15],[77,18,89,16],[77,58,89,56],[77,60,89,58,"category"],[77,68,89,66],[77,69,89,67],[79,6,91,4],[80,6,92,4],[80,10,92,10,"unsubscribe"],[80,21,92,21],[80,24,92,24],[80,28,92,24,"onSnapshot"],[80,49,92,34],[80,51,92,35,"q"],[80,52,92,36],[80,54,93,7,"querySnapshot"],[80,67,93,20],[80,71,93,25],[81,8,94,8],[81,12,94,14,"posts"],[81,17,94,19],[81,20,94,22],[81,22,94,24],[82,8,95,8,"querySnapshot"],[82,21,95,21],[82,22,95,22,"forEach"],[82,29,95,29],[82,30,95,31,"doc"],[82,33,95,34],[82,37,95,39],[83,10,96,10,"posts"],[83,15,96,15],[83,16,96,16,"push"],[83,20,96,20],[83,21,96,21],[84,12,97,12,"id"],[84,14,97,14],[84,16,97,16,"doc"],[84,19,97,19],[84,20,97,20,"id"],[84,22,97,22],[85,12,98,12],[85,15,98,15,"doc"],[85,18,98,18],[85,19,98,19,"data"],[85,23,98,23],[85,24,98,24],[85,25,98,25],[86,12,99,12],[87,12,100,12,"timestamp"],[87,21,100,21],[87,23,100,23,"doc"],[87,26,100,26],[87,27,100,27,"data"],[87,31,100,31],[87,32,100,32],[87,33,100,33],[87,34,100,34,"timestamp"],[87,43,100,43],[87,45,100,45,"toDate"],[87,51,100,51],[87,52,100,52],[87,53,100,53],[87,57,100,57],[87,61,100,61,"Date"],[87,65,100,65],[87,66,100,66],[88,10,101,10],[88,11,101,11],[88,12,101,12],[89,8,102,8],[89,9,102,9],[89,10,102,10],[90,8,104,8,"console"],[90,15,104,15],[90,16,104,16,"log"],[90,19,104,19],[90,20,104,20],[90,34,104,34,"posts"],[90,39,104,39],[90,40,104,40,"length"],[90,46,104,46],[90,69,104,69],[90,70,104,70],[91,8,105,8,"callback"],[91,16,105,16],[91,17,105,17,"posts"],[91,22,105,22],[91,23,105,23],[92,6,106,6],[92,7,106,7],[92,9,107,7,"error"],[92,14,107,12],[92,18,107,17],[93,8,108,8,"console"],[93,15,108,15],[93,16,108,16,"error"],[93,21,108,21],[93,22,108,22],[93,54,108,54],[93,56,108,56,"error"],[93,61,108,61],[93,62,108,62],[94,8,109,8,"callback"],[94,16,109,16],[94,17,109,17],[94,19,109,19],[94,20,109,20],[95,6,110,6],[95,7,111,4],[95,8,111,5],[96,6,113,4],[96,13,113,11,"unsubscribe"],[96,24,113,22],[97,4,114,2],[97,5,114,3],[97,6,114,4],[97,13,114,11,"error"],[97,18,114,16],[97,20,114,18],[98,6,115,4,"console"],[98,13,115,11],[98,14,115,12,"error"],[98,19,115,17],[98,20,115,18],[98,60,115,58],[98,62,115,60,"error"],[98,67,115,65],[98,68,115,66],[99,6,116,4],[99,13,116,11],[99,19,116,17],[99,20,116,18],[99,21,116,19],[99,22,116,20],[99,23,116,21],[100,4,117,2],[101,2,118,0],[101,3,118,1],[103,2,120,0],[104,0,121,0],[105,0,122,0],[106,0,123,0],[107,0,124,0],[108,2,120,0,"exports"],[108,9,120,0],[108,10,120,0,"subscribeToPosts"],[108,26,120,0],[108,29,120,0,"subscribeToPosts"],[108,45,120,0],[109,2,125,7],[109,6,125,13,"upvotePost"],[109,16,125,23],[109,19,125,23,"exports"],[109,26,125,23],[109,27,125,23,"upvotePost"],[109,37,125,23],[110,4,125,23],[110,8,125,23,"_ref2"],[110,13,125,23],[110,20,125,23,"_asyncToGenerator2"],[110,38,125,23],[110,39,125,23,"default"],[110,46,125,23],[110,48,125,26],[110,59,125,33,"postId"],[110,65,125,39],[110,67,125,44],[111,6,126,2],[111,10,126,6],[112,8,127,4],[112,12,127,10,"currentUser"],[112,23,127,21],[112,26,127,24,"auth"],[112,46,127,28],[112,47,127,29,"currentUser"],[112,58,127,40],[113,8,128,4],[113,12,128,8],[113,13,128,9,"currentUser"],[113,24,128,20],[113,26,128,22],[114,10,129,6],[114,16,129,12],[114,20,129,16,"Error"],[114,25,129,21],[114,26,129,22],[114,60,129,56],[114,61,129,57],[115,8,130,4],[116,8,132,4],[116,12,132,10,"postRef"],[116,19,132,17],[116,22,132,20],[116,26,132,20,"doc"],[116,40,132,23],[116,42,132,24,"db"],[116,60,132,26],[116,62,132,28],[116,79,132,45],[116,81,132,47,"postId"],[116,87,132,53],[116,88,132,54],[118,8,134,4],[119,8,135,4],[119,14,135,10],[119,18,135,10,"runTransaction"],[119,43,135,24],[119,45,135,25,"db"],[119,63,135,27],[120,10,135,27],[120,14,135,27,"_ref3"],[120,19,135,27],[120,26,135,27,"_asyncToGenerator2"],[120,44,135,27],[120,45,135,27,"default"],[120,52,135,27],[120,54,135,29],[120,65,135,36,"transaction"],[120,76,135,47],[120,78,135,52],[121,12,136,6],[121,16,136,12,"postDoc"],[121,23,136,19],[121,32,136,28,"transaction"],[121,43,136,39],[121,44,136,40,"get"],[121,47,136,43],[121,48,136,44,"postRef"],[121,55,136,51],[121,56,136,52],[122,12,138,6],[122,16,138,10],[122,17,138,11,"postDoc"],[122,24,138,18],[122,25,138,19,"exists"],[122,31,138,25],[122,32,138,26],[122,33,138,27],[122,35,138,29],[123,14,139,8],[123,20,139,14],[123,24,139,18,"Error"],[123,29,139,23],[123,30,139,24],[123,51,139,45],[123,52,139,46],[124,12,140,6],[125,12,142,6],[125,16,142,12,"postData"],[125,24,142,20],[125,27,142,23,"postDoc"],[125,34,142,30],[125,35,142,31,"data"],[125,39,142,35],[125,40,142,36],[125,41,142,37],[126,12,143,6],[126,16,143,12,"upvoters"],[126,24,143,20],[126,27,143,23,"postData"],[126,35,143,31],[126,36,143,32,"upvoters"],[126,44,143,40],[126,48,143,44],[126,50,143,46],[127,12,144,6],[127,16,144,12,"currentUpvotes"],[127,30,144,26],[127,33,144,29,"postData"],[127,41,144,37],[127,42,144,38,"upvotes"],[127,49,144,45],[127,53,144,49],[127,54,144,50],[129,12,146,6],[130,12,147,6],[130,16,147,10,"upvoters"],[130,24,147,18],[130,25,147,19,"includes"],[130,33,147,27],[130,34,147,28,"currentUser"],[130,45,147,39],[130,46,147,40,"uid"],[130,49,147,43],[130,50,147,44],[130,52,147,46],[131,14,148,8],[132,14,149,8,"transaction"],[132,25,149,19],[132,26,149,20,"update"],[132,32,149,26],[132,33,149,27,"postRef"],[132,40,149,34],[132,42,149,36],[133,16,150,10,"upvotes"],[133,23,150,17],[133,25,150,19,"currentUpvotes"],[133,39,150,33],[133,42,150,36],[133,43,150,37],[134,16,151,10,"upvoters"],[134,24,151,18],[134,26,151,20,"upvoters"],[134,34,151,28],[134,35,151,29,"filter"],[134,41,151,35],[134,42,151,36,"uid"],[134,45,151,39],[134,49,151,43,"uid"],[134,52,151,46],[134,57,151,51,"currentUser"],[134,68,151,62],[134,69,151,63,"uid"],[134,72,151,66],[135,14,152,8],[135,15,152,9],[135,16,152,10],[136,14,153,8,"console"],[136,21,153,15],[136,22,153,16,"log"],[136,25,153,19],[136,26,153,20],[136,56,153,50],[136,58,153,52,"postId"],[136,64,153,58],[136,65,153,59],[137,12,154,6],[137,13,154,7],[137,19,154,13],[138,14,155,8],[139,14,156,8,"transaction"],[139,25,156,19],[139,26,156,20,"update"],[139,32,156,26],[139,33,156,27,"postRef"],[139,40,156,34],[139,42,156,36],[140,16,157,10,"upvotes"],[140,23,157,17],[140,25,157,19,"currentUpvotes"],[140,39,157,33],[140,42,157,36],[140,43,157,37],[141,16,158,10,"upvoters"],[141,24,158,18],[141,26,158,20],[141,27,158,21],[141,30,158,24,"upvoters"],[141,38,158,32],[141,40,158,34,"currentUser"],[141,51,158,45],[141,52,158,46,"uid"],[141,55,158,49],[142,14,159,8],[142,15,159,9],[142,16,159,10],[143,14,160,8,"console"],[143,21,160,15],[143,22,160,16,"log"],[143,25,160,19],[143,26,160,20],[143,52,160,46],[143,54,160,48,"postId"],[143,60,160,54],[143,61,160,55],[144,12,161,6],[145,10,162,4],[145,11,162,5],[146,10,162,5],[146,27,162,5,"_x3"],[146,30,162,5],[147,12,162,5],[147,19,162,5,"_ref3"],[147,24,162,5],[147,25,162,5,"apply"],[147,30,162,5],[147,37,162,5,"arguments"],[147,46,162,5],[148,10,162,5],[149,8,162,5],[149,12,162,6],[150,8,164,4,"console"],[150,15,164,11],[150,16,164,12,"log"],[150,19,164,15],[150,20,164,16],[150,65,164,61],[150,66,164,62],[151,6,165,2],[151,7,165,3],[151,8,165,4],[151,15,165,11,"error"],[151,20,165,16],[151,22,165,18],[152,8,166,4,"console"],[152,15,166,11],[152,16,166,12,"error"],[152,21,166,17],[152,22,166,18],[152,46,166,42],[152,48,166,44,"error"],[152,53,166,49],[152,54,166,50],[153,8,167,4],[153,14,167,10,"error"],[153,19,167,15],[154,6,168,2],[155,4,169,0],[155,5,169,1],[156,4,169,1],[156,20,125,13,"upvotePost"],[156,30,125,23,"upvotePost"],[156,31,125,23,"_x2"],[156,34,125,23],[157,6,125,23],[157,13,125,23,"_ref2"],[157,18,125,23],[157,19,125,23,"apply"],[157,24,125,23],[157,31,125,23,"arguments"],[157,40,125,23],[158,4,125,23],[159,2,125,23],[159,5,169,1],[161,2,171,0],[162,0,172,0],[163,0,173,0],[164,0,174,0],[165,0,175,0],[166,2,176,7],[166,6,176,13,"hasUserUpvoted"],[166,20,176,27],[166,23,176,31,"upvoters"],[166,31,176,39],[166,35,176,44],[167,4,177,2],[167,8,177,8,"currentUser"],[167,19,177,19],[167,22,177,22,"auth"],[167,42,177,26],[167,43,177,27,"currentUser"],[167,54,177,38],[168,4,178,2],[168,8,178,6],[168,9,178,7,"currentUser"],[168,20,178,18],[168,24,178,22],[168,25,178,23,"upvoters"],[168,33,178,31],[168,35,178,33],[168,42,178,40],[168,47,178,45],[169,4,179,2],[169,11,179,9,"upvoters"],[169,19,179,17],[169,20,179,18,"includes"],[169,28,179,26],[169,29,179,27,"currentUser"],[169,40,179,38],[169,41,179,39,"uid"],[169,44,179,42],[169,45,179,43],[170,2,180,0],[170,3,180,1],[172,2,182,0],[173,0,183,0],[174,0,184,0],[175,0,185,0],[176,0,186,0],[177,2,182,0,"exports"],[177,9,182,0],[177,10,182,0,"hasUserUpvoted"],[177,24,182,0],[177,27,182,0,"hasUserUpvoted"],[177,41,182,0],[178,2,187,7],[178,6,187,13,"isCriticalPost"],[178,20,187,27],[178,23,187,31,"upvotes"],[178,30,187,38],[178,34,187,43],[179,4,188,2],[179,11,188,9,"upvotes"],[179,18,188,16],[179,22,188,20],[179,24,188,22],[180,2,189,0],[180,3,189,1],[181,2,189,2,"exports"],[181,9,189,2],[181,10,189,2,"isCriticalPost"],[181,24,189,2],[181,27,189,2,"isCriticalPost"],[181,41,189,2],[182,0,189,2],[182,3]],"functionMap":{"names":["<global>","createPost","subscribeToPosts","onSnapshot$argument_1","querySnapshot.forEach$argument_0","onSnapshot$argument_2","<anonymous>","upvotePost","runTransaction$argument_1","upvoters.filter$argument_0","hasUserUpvoted","isCriticalPost"],"mappings":"AAA;0BC0B;CDmC;gCEQ;MCuB;8BCE;SDO;ODI;MGC;OHG;WIM,QJ;CFE;0BOO;6BCU;oCCgB,8BD;KDW;CPO;8BUO;CVI;8BWO;CXE"}},"type":"js/module"}]}