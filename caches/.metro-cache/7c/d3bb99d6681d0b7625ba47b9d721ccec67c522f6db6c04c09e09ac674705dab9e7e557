{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"firebase/firestore","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":14,"column":28,"index":201}}],"key":"n8ZdwTgQb9oFW01pH/SKxYwC/nA=","exportNames":["*"]}},{"name":"firebase/storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":203},"end":{"line":15,"column":68,"index":271}}],"key":"gnxuAFqfHppifCx3rWRGYoeEoGk=","exportNames":["*"]}},{"name":"../config/firebaseConfig","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":273},"end":{"line":16,"column":52,"index":325}}],"key":"c2ktbavwtrva9DBC5I1TB1Fz260=","exportNames":["*"]}},{"name":"./userService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":17,"column":0,"index":327},"end":{"line":17,"column":47,"index":374}}],"key":"2Z6ZAOT4PmgFRSNEA6C/eMZwyYo=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.upvotePost = exports.subscribeToPosts = exports.isCriticalPost = exports.hasUserUpvoted = exports.getUserPostCount = exports.createPost = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _firestore = require(_dependencyMap[2], \"firebase/firestore\");\n  var _storage = require(_dependencyMap[3], \"firebase/storage\");\n  var _firebaseConfig = require(_dependencyMap[4], \"../config/firebaseConfig\");\n  var _userService = require(_dependencyMap[5], \"./userService\");\n  /**\r\n   * Create a new community post\r\n   * @param {Object} postData - Post data\r\n   * @param {string} postData.content - Post content/message\r\n   * @param {string} postData.category - Category: 'safety-alerts', 'support', or 'general'\r\n   * @param {boolean} postData.isAnonymous - Whether post is anonymous\r\n   * @param {string} postData.imageUri - Optional image URI\r\n   * @returns {Promise<string>} - Document ID of created post\r\n   */\n  var createPost = exports.createPost = /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* (postData) {\n      try {\n        var currentUser = _firebaseConfig.auth.currentUser;\n        if (!currentUser) {\n          throw new Error('User must be logged in to create a post');\n        }\n\n        // Get user details for username\n        var userDetails = yield (0, _userService.getUserDetails)(currentUser.uid);\n        var username = userDetails?.name || 'Anonymous User';\n\n        // Prepare post object\n        var post = {\n          userId: currentUser.uid,\n          username: postData.isAnonymous ? 'Anonymous' : username,\n          isAnonymous: postData.isAnonymous || false,\n          category: postData.category,\n          content: postData.content,\n          timestamp: (0, _firestore.serverTimestamp)(),\n          upvotes: 0,\n          upvoters: [],\n          imageUrl: postData.imageUrl || null\n        };\n        console.log('Creating post:', post);\n\n        // Add post to Firestore\n        var docRef = yield (0, _firestore.addDoc)((0, _firestore.collection)(_firebaseConfig.db, 'community_posts'), post);\n        console.log('✅ Post created successfully with ID:', docRef.id);\n        return docRef.id;\n      } catch (error) {\n        console.error('❌ Error creating post:', error);\n        throw error;\n      }\n    });\n    return function createPost(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  /**\r\n   * Subscribe to real-time posts updates\r\n   * @param {string} category - Filter by category ('all', 'safety-alerts', 'support', 'general')\r\n   * @param {Function} callback - Callback function that receives posts array\r\n   * @returns {Function} - Unsubscribe function\r\n   */\n  var subscribeToPosts = (category, callback) => {\n    try {\n      var q;\n      if (category === 'all') {\n        // Get all posts, ordered by timestamp descending\n        q = (0, _firestore.query)((0, _firestore.collection)(_firebaseConfig.db, 'community_posts'), (0, _firestore.orderBy)('timestamp', 'desc'));\n      } else {\n        // Filter by category\n        q = (0, _firestore.query)((0, _firestore.collection)(_firebaseConfig.db, 'community_posts'), (0, _firestore.where)('category', '==', category), (0, _firestore.orderBy)('timestamp', 'desc'));\n      }\n      console.log('📡 Subscribing to posts with category:', category);\n\n      // Set up real-time listener\n      var unsubscribe = (0, _firestore.onSnapshot)(q, querySnapshot => {\n        var posts = [];\n        querySnapshot.forEach(doc => {\n          posts.push({\n            id: doc.id,\n            ...doc.data(),\n            // Convert Firestore timestamp to JavaScript Date\n            timestamp: doc.data().timestamp?.toDate() || new Date()\n          });\n        });\n        console.log(`✅ Received ${posts.length} posts from Firestore`);\n        callback(posts);\n      }, error => {\n        console.error('❌ Error in posts subscription:', error);\n        callback([]);\n      });\n      return unsubscribe;\n    } catch (error) {\n      console.error('❌ Error setting up posts subscription:', error);\n      return () => {}; // Return empty unsubscribe function\n    }\n  };\n\n  /**\r\n   * Upvote a post (atomic operation, one vote per user)\r\n   * @param {string} postId - Post document ID\r\n   * @returns {Promise<void>}\r\n   */\n  exports.subscribeToPosts = subscribeToPosts;\n  var upvotePost = exports.upvotePost = /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2.default)(function* (postId) {\n      try {\n        var currentUser = _firebaseConfig.auth.currentUser;\n        if (!currentUser) {\n          throw new Error('User must be logged in to upvote');\n        }\n        var postRef = (0, _firestore.doc)(_firebaseConfig.db, 'community_posts', postId);\n\n        // Use transaction to ensure atomic updates\n        yield (0, _firestore.runTransaction)(_firebaseConfig.db, /*#__PURE__*/function () {\n          var _ref3 = (0, _asyncToGenerator2.default)(function* (transaction) {\n            var postDoc = yield transaction.get(postRef);\n            if (!postDoc.exists()) {\n              throw new Error('Post does not exist');\n            }\n            var postData = postDoc.data();\n            var upvoters = postData.upvoters || [];\n            var currentUpvotes = postData.upvotes || 0;\n\n            // Check if user has already upvoted\n            if (upvoters.includes(currentUser.uid)) {\n              // Remove upvote\n              transaction.update(postRef, {\n                upvotes: currentUpvotes - 1,\n                upvoters: upvoters.filter(uid => uid !== currentUser.uid)\n              });\n              console.log('👎 Removed upvote from post:', postId);\n            } else {\n              // Add upvote\n              transaction.update(postRef, {\n                upvotes: currentUpvotes + 1,\n                upvoters: [...upvoters, currentUser.uid]\n              });\n              console.log('👍 Added upvote to post:', postId);\n            }\n          });\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n        console.log('✅ Upvote transaction completed successfully');\n      } catch (error) {\n        console.error('❌ Error upvoting post:', error);\n        throw error;\n      }\n    });\n    return function upvotePost(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  /**\r\n   * Check if current user has upvoted a post\r\n   * @param {Array} upvoters - Array of user IDs who upvoted\r\n   * @returns {boolean}\r\n   */\n  var hasUserUpvoted = upvoters => {\n    var currentUser = _firebaseConfig.auth.currentUser;\n    if (!currentUser || !upvoters) return false;\n    return upvoters.includes(currentUser.uid);\n  };\n\n  /**\r\n   * Check if a post is critical (needs attention)\r\n   * @param {number} upvotes - Number of upvotes\r\n   * @returns {boolean}\r\n   */\n  exports.hasUserUpvoted = hasUserUpvoted;\n  var isCriticalPost = upvotes => {\n    return upvotes >= 10;\n  };\n\n  /**\r\n   * Get user's post count\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<number>} - Number of posts by user\r\n   */\n  exports.isCriticalPost = isCriticalPost;\n  var getUserPostCount = exports.getUserPostCount = /*#__PURE__*/function () {\n    var _ref4 = (0, _asyncToGenerator2.default)(function* (userId) {\n      try {\n        if (!userId) return 0;\n        var q = (0, _firestore.query)((0, _firestore.collection)(_firebaseConfig.db, 'community_posts'), (0, _firestore.where)('userId', '==', userId));\n        var querySnapshot = yield (0, _firestore.getDocs)(q);\n        return querySnapshot.size;\n      } catch (error) {\n        console.error('Error getting user post count:', error);\n        return 0;\n      }\n    });\n    return function getUserPostCount(_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n});","lineCount":204,"map":[[8,2,1,0],[8,6,1,0,"_firestore"],[8,16,1,0],[8,19,1,0,"require"],[8,26,1,0],[8,27,1,0,"_dependencyMap"],[8,41,1,0],[9,2,15,0],[9,6,15,0,"_storage"],[9,14,15,0],[9,17,15,0,"require"],[9,24,15,0],[9,25,15,0,"_dependencyMap"],[9,39,15,0],[10,2,16,0],[10,6,16,0,"_firebaseConfig"],[10,21,16,0],[10,24,16,0,"require"],[10,31,16,0],[10,32,16,0,"_dependencyMap"],[10,46,16,0],[11,2,17,0],[11,6,17,0,"_userService"],[11,18,17,0],[11,21,17,0,"require"],[11,28,17,0],[11,29,17,0,"_dependencyMap"],[11,43,17,0],[12,2,19,0],[13,0,20,0],[14,0,21,0],[15,0,22,0],[16,0,23,0],[17,0,24,0],[18,0,25,0],[19,0,26,0],[20,0,27,0],[21,2,28,7],[21,6,28,13,"createPost"],[21,16,28,23],[21,19,28,23,"exports"],[21,26,28,23],[21,27,28,23,"createPost"],[21,37,28,23],[22,4,28,23],[22,8,28,23,"_ref"],[22,12,28,23],[22,19,28,23,"_asyncToGenerator2"],[22,37,28,23],[22,38,28,23,"default"],[22,45,28,23],[22,47,28,26],[22,58,28,33,"postData"],[22,66,28,41],[22,68,28,46],[23,6,29,2],[23,10,29,6],[24,8,30,4],[24,12,30,10,"currentUser"],[24,23,30,21],[24,26,30,24,"auth"],[24,46,30,28],[24,47,30,29,"currentUser"],[24,58,30,40],[25,8,31,4],[25,12,31,8],[25,13,31,9,"currentUser"],[25,24,31,20],[25,26,31,22],[26,10,32,6],[26,16,32,12],[26,20,32,16,"Error"],[26,25,32,21],[26,26,32,22],[26,67,32,63],[26,68,32,64],[27,8,33,4],[29,8,35,4],[30,8,36,4],[30,12,36,10,"userDetails"],[30,23,36,21],[30,32,36,30],[30,36,36,30,"getUserDetails"],[30,63,36,44],[30,65,36,45,"currentUser"],[30,76,36,56],[30,77,36,57,"uid"],[30,80,36,60],[30,81,36,61],[31,8,37,4],[31,12,37,10,"username"],[31,20,37,18],[31,23,37,21,"userDetails"],[31,34,37,32],[31,36,37,34,"name"],[31,40,37,38],[31,44,37,42],[31,60,37,58],[33,8,39,4],[34,8,40,4],[34,12,40,10,"post"],[34,16,40,14],[34,19,40,17],[35,10,41,6,"userId"],[35,16,41,12],[35,18,41,14,"currentUser"],[35,29,41,25],[35,30,41,26,"uid"],[35,33,41,29],[36,10,42,6,"username"],[36,18,42,14],[36,20,42,16,"postData"],[36,28,42,24],[36,29,42,25,"isAnonymous"],[36,40,42,36],[36,43,42,39],[36,54,42,50],[36,57,42,53,"username"],[36,65,42,61],[37,10,43,6,"isAnonymous"],[37,21,43,17],[37,23,43,19,"postData"],[37,31,43,27],[37,32,43,28,"isAnonymous"],[37,43,43,39],[37,47,43,43],[37,52,43,48],[38,10,44,6,"category"],[38,18,44,14],[38,20,44,16,"postData"],[38,28,44,24],[38,29,44,25,"category"],[38,37,44,33],[39,10,45,6,"content"],[39,17,45,13],[39,19,45,15,"postData"],[39,27,45,23],[39,28,45,24,"content"],[39,35,45,31],[40,10,46,6,"timestamp"],[40,19,46,15],[40,21,46,17],[40,25,46,17,"serverTimestamp"],[40,51,46,32],[40,53,46,33],[40,54,46,34],[41,10,47,6,"upvotes"],[41,17,47,13],[41,19,47,15],[41,20,47,16],[42,10,48,6,"upvoters"],[42,18,48,14],[42,20,48,16],[42,22,48,18],[43,10,49,6,"imageUrl"],[43,18,49,14],[43,20,49,16,"postData"],[43,28,49,24],[43,29,49,25,"imageUrl"],[43,37,49,33],[43,41,49,37],[44,8,50,4],[44,9,50,5],[45,8,52,4,"console"],[45,15,52,11],[45,16,52,12,"log"],[45,19,52,15],[45,20,52,16],[45,36,52,32],[45,38,52,34,"post"],[45,42,52,38],[45,43,52,39],[47,8,54,4],[48,8,55,4],[48,12,55,10,"docRef"],[48,18,55,16],[48,27,55,25],[48,31,55,25,"addDoc"],[48,48,55,31],[48,50,55,32],[48,54,55,32,"collection"],[48,75,55,42],[48,77,55,43,"db"],[48,95,55,45],[48,97,55,47],[48,114,55,64],[48,115,55,65],[48,117,55,67,"post"],[48,121,55,71],[48,122,55,72],[49,8,56,4,"console"],[49,15,56,11],[49,16,56,12,"log"],[49,19,56,15],[49,20,56,16],[49,58,56,54],[49,60,56,56,"docRef"],[49,66,56,62],[49,67,56,63,"id"],[49,69,56,65],[49,70,56,66],[50,8,58,4],[50,15,58,11,"docRef"],[50,21,58,17],[50,22,58,18,"id"],[50,24,58,20],[51,6,59,2],[51,7,59,3],[51,8,59,4],[51,15,59,11,"error"],[51,20,59,16],[51,22,59,18],[52,8,60,4,"console"],[52,15,60,11],[52,16,60,12,"error"],[52,21,60,17],[52,22,60,18],[52,46,60,42],[52,48,60,44,"error"],[52,53,60,49],[52,54,60,50],[53,8,61,4],[53,14,61,10,"error"],[53,19,61,15],[54,6,62,2],[55,4,63,0],[55,5,63,1],[56,4,63,1],[56,20,28,13,"createPost"],[56,30,28,23,"createPost"],[56,31,28,23,"_x"],[56,33,28,23],[57,6,28,23],[57,13,28,23,"_ref"],[57,17,28,23],[57,18,28,23,"apply"],[57,23,28,23],[57,30,28,23,"arguments"],[57,39,28,23],[58,4,28,23],[59,2,28,23],[59,5,63,1],[61,2,65,0],[62,0,66,0],[63,0,67,0],[64,0,68,0],[65,0,69,0],[66,0,70,0],[67,2,71,7],[67,6,71,13,"subscribeToPosts"],[67,22,71,29],[67,25,71,32,"subscribeToPosts"],[67,26,71,33,"category"],[67,34,71,41],[67,36,71,43,"callback"],[67,44,71,51],[67,49,71,56],[68,4,72,2],[68,8,72,6],[69,6,73,4],[69,10,73,8,"q"],[69,11,73,9],[70,6,75,4],[70,10,75,8,"category"],[70,18,75,16],[70,23,75,21],[70,28,75,26],[70,30,75,28],[71,8,76,6],[72,8,77,6,"q"],[72,9,77,7],[72,12,77,10],[72,16,77,10,"query"],[72,32,77,15],[72,34,78,8],[72,38,78,8,"collection"],[72,59,78,18],[72,61,78,19,"db"],[72,79,78,21],[72,81,78,23],[72,98,78,40],[72,99,78,41],[72,101,79,8],[72,105,79,8,"orderBy"],[72,123,79,15],[72,125,79,16],[72,136,79,27],[72,138,79,29],[72,144,79,35],[72,145,80,6],[72,146,80,7],[73,6,81,4],[73,7,81,5],[73,13,81,11],[74,8,82,6],[75,8,83,6,"q"],[75,9,83,7],[75,12,83,10],[75,16,83,10,"query"],[75,32,83,15],[75,34,84,8],[75,38,84,8,"collection"],[75,59,84,18],[75,61,84,19,"db"],[75,79,84,21],[75,81,84,23],[75,98,84,40],[75,99,84,41],[75,101,85,8],[75,105,85,8,"where"],[75,121,85,13],[75,123,85,14],[75,133,85,24],[75,135,85,26],[75,139,85,30],[75,141,85,32,"category"],[75,149,85,40],[75,150,85,41],[75,152,86,8],[75,156,86,8,"orderBy"],[75,174,86,15],[75,176,86,16],[75,187,86,27],[75,189,86,29],[75,195,86,35],[75,196,87,6],[75,197,87,7],[76,6,88,4],[77,6,90,4,"console"],[77,13,90,11],[77,14,90,12,"log"],[77,17,90,15],[77,18,90,16],[77,58,90,56],[77,60,90,58,"category"],[77,68,90,66],[77,69,90,67],[79,6,92,4],[80,6,93,4],[80,10,93,10,"unsubscribe"],[80,21,93,21],[80,24,93,24],[80,28,93,24,"onSnapshot"],[80,49,93,34],[80,51,93,35,"q"],[80,52,93,36],[80,54,94,7,"querySnapshot"],[80,67,94,20],[80,71,94,25],[81,8,95,8],[81,12,95,14,"posts"],[81,17,95,19],[81,20,95,22],[81,22,95,24],[82,8,96,8,"querySnapshot"],[82,21,96,21],[82,22,96,22,"forEach"],[82,29,96,29],[82,30,96,31,"doc"],[82,33,96,34],[82,37,96,39],[83,10,97,10,"posts"],[83,15,97,15],[83,16,97,16,"push"],[83,20,97,20],[83,21,97,21],[84,12,98,12,"id"],[84,14,98,14],[84,16,98,16,"doc"],[84,19,98,19],[84,20,98,20,"id"],[84,22,98,22],[85,12,99,12],[85,15,99,15,"doc"],[85,18,99,18],[85,19,99,19,"data"],[85,23,99,23],[85,24,99,24],[85,25,99,25],[86,12,100,12],[87,12,101,12,"timestamp"],[87,21,101,21],[87,23,101,23,"doc"],[87,26,101,26],[87,27,101,27,"data"],[87,31,101,31],[87,32,101,32],[87,33,101,33],[87,34,101,34,"timestamp"],[87,43,101,43],[87,45,101,45,"toDate"],[87,51,101,51],[87,52,101,52],[87,53,101,53],[87,57,101,57],[87,61,101,61,"Date"],[87,65,101,65],[87,66,101,66],[88,10,102,10],[88,11,102,11],[88,12,102,12],[89,8,103,8],[89,9,103,9],[89,10,103,10],[90,8,105,8,"console"],[90,15,105,15],[90,16,105,16,"log"],[90,19,105,19],[90,20,105,20],[90,34,105,34,"posts"],[90,39,105,39],[90,40,105,40,"length"],[90,46,105,46],[90,69,105,69],[90,70,105,70],[91,8,106,8,"callback"],[91,16,106,16],[91,17,106,17,"posts"],[91,22,106,22],[91,23,106,23],[92,6,107,6],[92,7,107,7],[92,9,108,7,"error"],[92,14,108,12],[92,18,108,17],[93,8,109,8,"console"],[93,15,109,15],[93,16,109,16,"error"],[93,21,109,21],[93,22,109,22],[93,54,109,54],[93,56,109,56,"error"],[93,61,109,61],[93,62,109,62],[94,8,110,8,"callback"],[94,16,110,16],[94,17,110,17],[94,19,110,19],[94,20,110,20],[95,6,111,6],[95,7,112,4],[95,8,112,5],[96,6,114,4],[96,13,114,11,"unsubscribe"],[96,24,114,22],[97,4,115,2],[97,5,115,3],[97,6,115,4],[97,13,115,11,"error"],[97,18,115,16],[97,20,115,18],[98,6,116,4,"console"],[98,13,116,11],[98,14,116,12,"error"],[98,19,116,17],[98,20,116,18],[98,60,116,58],[98,62,116,60,"error"],[98,67,116,65],[98,68,116,66],[99,6,117,4],[99,13,117,11],[99,19,117,17],[99,20,117,18],[99,21,117,19],[99,22,117,20],[99,23,117,21],[100,4,118,2],[101,2,119,0],[101,3,119,1],[103,2,121,0],[104,0,122,0],[105,0,123,0],[106,0,124,0],[107,0,125,0],[108,2,121,0,"exports"],[108,9,121,0],[108,10,121,0,"subscribeToPosts"],[108,26,121,0],[108,29,121,0,"subscribeToPosts"],[108,45,121,0],[109,2,126,7],[109,6,126,13,"upvotePost"],[109,16,126,23],[109,19,126,23,"exports"],[109,26,126,23],[109,27,126,23,"upvotePost"],[109,37,126,23],[110,4,126,23],[110,8,126,23,"_ref2"],[110,13,126,23],[110,20,126,23,"_asyncToGenerator2"],[110,38,126,23],[110,39,126,23,"default"],[110,46,126,23],[110,48,126,26],[110,59,126,33,"postId"],[110,65,126,39],[110,67,126,44],[111,6,127,2],[111,10,127,6],[112,8,128,4],[112,12,128,10,"currentUser"],[112,23,128,21],[112,26,128,24,"auth"],[112,46,128,28],[112,47,128,29,"currentUser"],[112,58,128,40],[113,8,129,4],[113,12,129,8],[113,13,129,9,"currentUser"],[113,24,129,20],[113,26,129,22],[114,10,130,6],[114,16,130,12],[114,20,130,16,"Error"],[114,25,130,21],[114,26,130,22],[114,60,130,56],[114,61,130,57],[115,8,131,4],[116,8,133,4],[116,12,133,10,"postRef"],[116,19,133,17],[116,22,133,20],[116,26,133,20,"doc"],[116,40,133,23],[116,42,133,24,"db"],[116,60,133,26],[116,62,133,28],[116,79,133,45],[116,81,133,47,"postId"],[116,87,133,53],[116,88,133,54],[118,8,135,4],[119,8,136,4],[119,14,136,10],[119,18,136,10,"runTransaction"],[119,43,136,24],[119,45,136,25,"db"],[119,63,136,27],[120,10,136,27],[120,14,136,27,"_ref3"],[120,19,136,27],[120,26,136,27,"_asyncToGenerator2"],[120,44,136,27],[120,45,136,27,"default"],[120,52,136,27],[120,54,136,29],[120,65,136,36,"transaction"],[120,76,136,47],[120,78,136,52],[121,12,137,6],[121,16,137,12,"postDoc"],[121,23,137,19],[121,32,137,28,"transaction"],[121,43,137,39],[121,44,137,40,"get"],[121,47,137,43],[121,48,137,44,"postRef"],[121,55,137,51],[121,56,137,52],[122,12,139,6],[122,16,139,10],[122,17,139,11,"postDoc"],[122,24,139,18],[122,25,139,19,"exists"],[122,31,139,25],[122,32,139,26],[122,33,139,27],[122,35,139,29],[123,14,140,8],[123,20,140,14],[123,24,140,18,"Error"],[123,29,140,23],[123,30,140,24],[123,51,140,45],[123,52,140,46],[124,12,141,6],[125,12,143,6],[125,16,143,12,"postData"],[125,24,143,20],[125,27,143,23,"postDoc"],[125,34,143,30],[125,35,143,31,"data"],[125,39,143,35],[125,40,143,36],[125,41,143,37],[126,12,144,6],[126,16,144,12,"upvoters"],[126,24,144,20],[126,27,144,23,"postData"],[126,35,144,31],[126,36,144,32,"upvoters"],[126,44,144,40],[126,48,144,44],[126,50,144,46],[127,12,145,6],[127,16,145,12,"currentUpvotes"],[127,30,145,26],[127,33,145,29,"postData"],[127,41,145,37],[127,42,145,38,"upvotes"],[127,49,145,45],[127,53,145,49],[127,54,145,50],[129,12,147,6],[130,12,148,6],[130,16,148,10,"upvoters"],[130,24,148,18],[130,25,148,19,"includes"],[130,33,148,27],[130,34,148,28,"currentUser"],[130,45,148,39],[130,46,148,40,"uid"],[130,49,148,43],[130,50,148,44],[130,52,148,46],[131,14,149,8],[132,14,150,8,"transaction"],[132,25,150,19],[132,26,150,20,"update"],[132,32,150,26],[132,33,150,27,"postRef"],[132,40,150,34],[132,42,150,36],[133,16,151,10,"upvotes"],[133,23,151,17],[133,25,151,19,"currentUpvotes"],[133,39,151,33],[133,42,151,36],[133,43,151,37],[134,16,152,10,"upvoters"],[134,24,152,18],[134,26,152,20,"upvoters"],[134,34,152,28],[134,35,152,29,"filter"],[134,41,152,35],[134,42,152,36,"uid"],[134,45,152,39],[134,49,152,43,"uid"],[134,52,152,46],[134,57,152,51,"currentUser"],[134,68,152,62],[134,69,152,63,"uid"],[134,72,152,66],[135,14,153,8],[135,15,153,9],[135,16,153,10],[136,14,154,8,"console"],[136,21,154,15],[136,22,154,16,"log"],[136,25,154,19],[136,26,154,20],[136,56,154,50],[136,58,154,52,"postId"],[136,64,154,58],[136,65,154,59],[137,12,155,6],[137,13,155,7],[137,19,155,13],[138,14,156,8],[139,14,157,8,"transaction"],[139,25,157,19],[139,26,157,20,"update"],[139,32,157,26],[139,33,157,27,"postRef"],[139,40,157,34],[139,42,157,36],[140,16,158,10,"upvotes"],[140,23,158,17],[140,25,158,19,"currentUpvotes"],[140,39,158,33],[140,42,158,36],[140,43,158,37],[141,16,159,10,"upvoters"],[141,24,159,18],[141,26,159,20],[141,27,159,21],[141,30,159,24,"upvoters"],[141,38,159,32],[141,40,159,34,"currentUser"],[141,51,159,45],[141,52,159,46,"uid"],[141,55,159,49],[142,14,160,8],[142,15,160,9],[142,16,160,10],[143,14,161,8,"console"],[143,21,161,15],[143,22,161,16,"log"],[143,25,161,19],[143,26,161,20],[143,52,161,46],[143,54,161,48,"postId"],[143,60,161,54],[143,61,161,55],[144,12,162,6],[145,10,163,4],[145,11,163,5],[146,10,163,5],[146,27,163,5,"_x3"],[146,30,163,5],[147,12,163,5],[147,19,163,5,"_ref3"],[147,24,163,5],[147,25,163,5,"apply"],[147,30,163,5],[147,37,163,5,"arguments"],[147,46,163,5],[148,10,163,5],[149,8,163,5],[149,12,163,6],[150,8,165,4,"console"],[150,15,165,11],[150,16,165,12,"log"],[150,19,165,15],[150,20,165,16],[150,65,165,61],[150,66,165,62],[151,6,166,2],[151,7,166,3],[151,8,166,4],[151,15,166,11,"error"],[151,20,166,16],[151,22,166,18],[152,8,167,4,"console"],[152,15,167,11],[152,16,167,12,"error"],[152,21,167,17],[152,22,167,18],[152,46,167,42],[152,48,167,44,"error"],[152,53,167,49],[152,54,167,50],[153,8,168,4],[153,14,168,10,"error"],[153,19,168,15],[154,6,169,2],[155,4,170,0],[155,5,170,1],[156,4,170,1],[156,20,126,13,"upvotePost"],[156,30,126,23,"upvotePost"],[156,31,126,23,"_x2"],[156,34,126,23],[157,6,126,23],[157,13,126,23,"_ref2"],[157,18,126,23],[157,19,126,23,"apply"],[157,24,126,23],[157,31,126,23,"arguments"],[157,40,126,23],[158,4,126,23],[159,2,126,23],[159,5,170,1],[161,2,172,0],[162,0,173,0],[163,0,174,0],[164,0,175,0],[165,0,176,0],[166,2,177,7],[166,6,177,13,"hasUserUpvoted"],[166,20,177,27],[166,23,177,31,"upvoters"],[166,31,177,39],[166,35,177,44],[167,4,178,2],[167,8,178,8,"currentUser"],[167,19,178,19],[167,22,178,22,"auth"],[167,42,178,26],[167,43,178,27,"currentUser"],[167,54,178,38],[168,4,179,2],[168,8,179,6],[168,9,179,7,"currentUser"],[168,20,179,18],[168,24,179,22],[168,25,179,23,"upvoters"],[168,33,179,31],[168,35,179,33],[168,42,179,40],[168,47,179,45],[169,4,180,2],[169,11,180,9,"upvoters"],[169,19,180,17],[169,20,180,18,"includes"],[169,28,180,26],[169,29,180,27,"currentUser"],[169,40,180,38],[169,41,180,39,"uid"],[169,44,180,42],[169,45,180,43],[170,2,181,0],[170,3,181,1],[172,2,183,0],[173,0,184,0],[174,0,185,0],[175,0,186,0],[176,0,187,0],[177,2,183,0,"exports"],[177,9,183,0],[177,10,183,0,"hasUserUpvoted"],[177,24,183,0],[177,27,183,0,"hasUserUpvoted"],[177,41,183,0],[178,2,188,7],[178,6,188,13,"isCriticalPost"],[178,20,188,27],[178,23,188,31,"upvotes"],[178,30,188,38],[178,34,188,43],[179,4,189,2],[179,11,189,9,"upvotes"],[179,18,189,16],[179,22,189,20],[179,24,189,22],[180,2,190,0],[180,3,190,1],[182,2,192,0],[183,0,193,0],[184,0,194,0],[185,0,195,0],[186,0,196,0],[187,2,192,0,"exports"],[187,9,192,0],[187,10,192,0,"isCriticalPost"],[187,24,192,0],[187,27,192,0,"isCriticalPost"],[187,41,192,0],[188,2,197,7],[188,6,197,13,"getUserPostCount"],[188,22,197,29],[188,25,197,29,"exports"],[188,32,197,29],[188,33,197,29,"getUserPostCount"],[188,49,197,29],[189,4,197,29],[189,8,197,29,"_ref4"],[189,13,197,29],[189,20,197,29,"_asyncToGenerator2"],[189,38,197,29],[189,39,197,29,"default"],[189,46,197,29],[189,48,197,32],[189,59,197,39,"userId"],[189,65,197,45],[189,67,197,50],[190,6,198,2],[190,10,198,6],[191,8,199,4],[191,12,199,8],[191,13,199,9,"userId"],[191,19,199,15],[191,21,199,17],[191,28,199,24],[191,29,199,25],[192,8,201,4],[192,12,201,10,"q"],[192,13,201,11],[192,16,201,14],[192,20,201,14,"query"],[192,36,201,19],[192,38,202,6],[192,42,202,6,"collection"],[192,63,202,16],[192,65,202,17,"db"],[192,83,202,19],[192,85,202,21],[192,102,202,38],[192,103,202,39],[192,105,203,6],[192,109,203,6,"where"],[192,125,203,11],[192,127,203,12],[192,135,203,20],[192,137,203,22],[192,141,203,26],[192,143,203,28,"userId"],[192,149,203,34],[192,150,204,4],[192,151,204,5],[193,8,206,4],[193,12,206,10,"querySnapshot"],[193,25,206,23],[193,34,206,32],[193,38,206,32,"getDocs"],[193,56,206,39],[193,58,206,40,"q"],[193,59,206,41],[193,60,206,42],[194,8,207,4],[194,15,207,11,"querySnapshot"],[194,28,207,24],[194,29,207,25,"size"],[194,33,207,29],[195,6,208,2],[195,7,208,3],[195,8,208,4],[195,15,208,11,"error"],[195,20,208,16],[195,22,208,18],[196,8,209,4,"console"],[196,15,209,11],[196,16,209,12,"error"],[196,21,209,17],[196,22,209,18],[196,54,209,50],[196,56,209,52,"error"],[196,61,209,57],[196,62,209,58],[197,8,210,4],[197,15,210,11],[197,16,210,12],[198,6,211,2],[199,4,212,0],[199,5,212,1],[200,4,212,1],[200,20,197,13,"getUserPostCount"],[200,36,197,29,"getUserPostCount"],[200,37,197,29,"_x4"],[200,40,197,29],[201,6,197,29],[201,13,197,29,"_ref4"],[201,18,197,29],[201,19,197,29,"apply"],[201,24,197,29],[201,31,197,29,"arguments"],[201,40,197,29],[202,4,197,29],[203,2,197,29],[203,5,212,1],[204,0,212,2],[204,3]],"functionMap":{"names":["<global>","createPost","subscribeToPosts","onSnapshot$argument_1","querySnapshot.forEach$argument_0","onSnapshot$argument_2","<anonymous>","upvotePost","runTransaction$argument_1","upvoters.filter$argument_0","hasUserUpvoted","isCriticalPost","getUserPostCount"],"mappings":"AAA;0BC2B;CDmC;gCEQ;MCuB;8BCE;SDO;ODI;MGC;OHG;WIM,QJ;CFE;0BOO;6BCU;oCCgB,8BD;KDW;CPO;8BUO;CVI;8BWO;CXE;gCYO;CZe"}},"type":"js/module"}]}