{"dependencies":[{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}},{"name":"./constructNow.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":49,"index":101}}],"key":"KxtQUZbfjGqP9AepKKDBoJJ/4sk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.endOfYesterday = endOfYesterday;\n  var _constructFrom = require(_dependencyMap[0], \"./constructFrom.js\");\n  var _constructNow = require(_dependencyMap[1], \"./constructNow.js\");\n  /**\n   * The {@link endOfYesterday} function options.\n   */\n\n  /**\n   * @name endOfYesterday\n   * @category Day Helpers\n   * @summary Return the end of yesterday.\n   * @pure false\n   *\n   * @description\n   * Return the end of yesterday.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @returns The end of yesterday\n   *\n   * @example\n   * // If today is 6 October 2014:\n   * const result = endOfYesterday()\n   * //=> Sun Oct 5 2014 23:59:59.999\n   */\n  function endOfYesterday(options) {\n    var now = (0, _constructNow.constructNow)(options?.in);\n    var date = (0, _constructFrom.constructFrom)(options?.in, 0);\n    date.setFullYear(now.getFullYear(), now.getMonth(), now.getDate() - 1);\n    date.setHours(23, 59, 59, 999);\n    return date;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = endOfYesterday;\n});","lineCount":42,"map":[[7,2,1,0],[7,6,1,0,"_constructFrom"],[7,20,1,0],[7,23,1,0,"require"],[7,30,1,0],[7,31,1,0,"_dependencyMap"],[7,45,1,0],[8,2,2,0],[8,6,2,0,"_constructNow"],[8,19,2,0],[8,22,2,0,"require"],[8,29,2,0],[8,30,2,0,"_dependencyMap"],[8,44,2,0],[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,2,27,7],[32,11,27,16,"endOfYesterday"],[32,25,27,30,"endOfYesterday"],[32,26,27,31,"options"],[32,33,27,38],[32,35,27,40],[33,4,28,2],[33,8,28,8,"now"],[33,11,28,11],[33,14,28,14],[33,18,28,14,"constructNow"],[33,44,28,26],[33,46,28,27,"options"],[33,53,28,34],[33,55,28,36,"in"],[33,57,28,38],[33,58,28,39],[34,4,29,2],[34,8,29,8,"date"],[34,12,29,12],[34,15,29,15],[34,19,29,15,"constructFrom"],[34,47,29,28],[34,49,29,29,"options"],[34,56,29,36],[34,58,29,38,"in"],[34,60,29,40],[34,62,29,42],[34,63,29,43],[34,64,29,44],[35,4,30,2,"date"],[35,8,30,6],[35,9,30,7,"setFullYear"],[35,20,30,18],[35,21,30,19,"now"],[35,24,30,22],[35,25,30,23,"getFullYear"],[35,36,30,34],[35,37,30,35],[35,38,30,36],[35,40,30,38,"now"],[35,43,30,41],[35,44,30,42,"getMonth"],[35,52,30,50],[35,53,30,51],[35,54,30,52],[35,56,30,54,"now"],[35,59,30,57],[35,60,30,58,"getDate"],[35,67,30,65],[35,68,30,66],[35,69,30,67],[35,72,30,70],[35,73,30,71],[35,74,30,72],[36,4,31,2,"date"],[36,8,31,6],[36,9,31,7,"setHours"],[36,17,31,15],[36,18,31,16],[36,20,31,18],[36,22,31,20],[36,24,31,22],[36,26,31,24],[36,28,31,26],[36,30,31,28],[36,33,31,31],[36,34,31,32],[37,4,32,2],[37,11,32,9,"date"],[37,15,32,13],[38,2,33,0],[40,2,35,0],[41,2,35,0],[41,6,35,0,"_default"],[41,14,35,0],[41,17,35,0,"exports"],[41,24,35,0],[41,25,35,0,"default"],[41,32,35,0],[41,35,36,15,"endOfYesterday"],[41,49,36,29],[42,0,36,29],[42,3]],"functionMap":{"names":["<global>","endOfYesterday"],"mappings":"AAA;OC0B;CDM"}},"type":"js/module"}]}