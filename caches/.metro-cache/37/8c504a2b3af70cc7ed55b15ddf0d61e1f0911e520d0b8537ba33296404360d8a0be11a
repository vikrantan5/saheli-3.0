{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":76,"index":76}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./ExpoTaskManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":77},"end":{"line":2,"column":48,"index":125}}],"key":"XuoplolDboh/CUTNxf5WfqS0FBQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.defineTask = defineTask;\n  exports.getRegisteredTasksAsync = getRegisteredTasksAsync;\n  exports.getTaskOptionsAsync = getTaskOptionsAsync;\n  exports.isAvailableAsync = isAvailableAsync;\n  exports.isTaskDefined = isTaskDefined;\n  exports.isTaskRegisteredAsync = isTaskRegisteredAsync;\n  exports.unregisterAllTasksAsync = unregisterAllTasksAsync;\n  exports.unregisterTaskAsync = unregisterTaskAsync;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _ExpoTaskManager = _interopRequireDefault(require(_dependencyMap[3], \"./ExpoTaskManager\"));\n  var tasks = new Map();\n  function _validate(taskName) {\n    if (!taskName || typeof taskName !== 'string') {\n      throw new TypeError('`taskName` must be a non-empty string.');\n    }\n  }\n  // @needsAudit\n  /**\n   * Defines task function. It must be called in the global scope of your JavaScript bundle.\n   * In particular, it cannot be called in any of React lifecycle methods like `componentDidMount`.\n   * This limitation is due to the fact that when the application is launched in the background,\n   * we need to spin up your JavaScript app, run your task and then shut down â€” no views are mounted\n   * in this scenario.\n   *\n   * @param taskName Name of the task. It must be the same as the name you provided when registering the task.\n   * @param taskExecutor A function that will be invoked when the task with given `taskName` is executed.\n   */\n  function defineTask(taskName, taskExecutor) {\n    if (!taskName || typeof taskName !== 'string') {\n      console.warn(`TaskManager.defineTask: 'taskName' argument must be a non-empty string.`);\n      return;\n    }\n    if (!taskExecutor || typeof taskExecutor !== 'function') {\n      console.warn(`TaskManager.defineTask: 'task' argument must be a function.`);\n      return;\n    }\n    tasks.set(taskName, taskExecutor);\n  }\n  // @needsAudit\n  /**\n   * Checks whether the task is already defined.\n   *\n   * @param taskName Name of the task.\n   */\n  function isTaskDefined(taskName) {\n    return tasks.has(taskName);\n  }\n  // @needsAudit\n  /**\n   * Determine whether the task is registered. Registered tasks are stored in a persistent storage and\n   * preserved between sessions.\n   *\n   * @param taskName Name of the task.\n   * @returns A promise which resolves to `true` if a task with the given name is registered, otherwise `false`.\n   */\n  function isTaskRegisteredAsync(_x) {\n    return _isTaskRegisteredAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Retrieves `options` associated with the task, that were passed to the function registering the task\n   * (e.g. `Location.startLocationUpdatesAsync`).\n   *\n   * @param taskName Name of the task.\n   * @return A promise which fulfills with the `options` object that was passed while registering task\n   * with given name or `null` if task couldn't be found.\n   */\n  function _isTaskRegisteredAsync() {\n    _isTaskRegisteredAsync = (0, _asyncToGenerator2.default)(function* (taskName) {\n      if (!_ExpoTaskManager.default.isTaskRegisteredAsync) {\n        throw new _expoModulesCore.UnavailabilityError('TaskManager', 'isTaskRegisteredAsync');\n      }\n      _validate(taskName);\n      return _ExpoTaskManager.default.isTaskRegisteredAsync(taskName);\n    });\n    return _isTaskRegisteredAsync.apply(this, arguments);\n  }\n  function getTaskOptionsAsync(_x2) {\n    return _getTaskOptionsAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Provides information about tasks registered in the app.\n   *\n   * @returns A promise which fulfills with an array of tasks registered in the app.\n   * @example\n   * ```js\n   * [\n   *   {\n   *     taskName: 'location-updates-task-name',\n   *     taskType: 'location',\n   *     options: {\n   *       accuracy: Location.Accuracy.High,\n   *       showsBackgroundLocationIndicator: false,\n   *     },\n   *   },\n   *   {\n   *     taskName: 'geofencing-task-name',\n   *     taskType: 'geofencing',\n   *     options: {\n   *       regions: [...],\n   *     },\n   *   },\n   * ]\n   * ```\n   */\n  function _getTaskOptionsAsync() {\n    _getTaskOptionsAsync = (0, _asyncToGenerator2.default)(function* (taskName) {\n      if (!_ExpoTaskManager.default.getTaskOptionsAsync) {\n        throw new _expoModulesCore.UnavailabilityError('TaskManager', 'getTaskOptionsAsync');\n      }\n      _validate(taskName);\n      return _ExpoTaskManager.default.getTaskOptionsAsync(taskName);\n    });\n    return _getTaskOptionsAsync.apply(this, arguments);\n  }\n  function getRegisteredTasksAsync() {\n    return _getRegisteredTasksAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unregisters task from the app, so the app will not be receiving updates for that task anymore.\n   * _It is recommended to use methods specialized by modules that registered the task, eg.\n   * [`Location.stopLocationUpdatesAsync`](./location/#expolocationstoplocationupdatesasynctaskname)._\n   *\n   * @param taskName Name of the task to unregister.\n   * @return A promise which fulfills as soon as the task is unregistered.\n   */\n  function _getRegisteredTasksAsync() {\n    _getRegisteredTasksAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoTaskManager.default.getRegisteredTasksAsync) {\n        throw new _expoModulesCore.UnavailabilityError('TaskManager', 'getRegisteredTasksAsync');\n      }\n      return _ExpoTaskManager.default.getRegisteredTasksAsync();\n    });\n    return _getRegisteredTasksAsync.apply(this, arguments);\n  }\n  function unregisterTaskAsync(_x3) {\n    return _unregisterTaskAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unregisters all tasks registered for the running app. You may want to call this when the user is\n   * signing out and you no longer need to track his location or run any other background tasks.\n   * @return A promise which fulfills as soon as all tasks are completely unregistered.\n   */\n  function _unregisterTaskAsync() {\n    _unregisterTaskAsync = (0, _asyncToGenerator2.default)(function* (taskName) {\n      if (!_ExpoTaskManager.default.unregisterTaskAsync) {\n        throw new _expoModulesCore.UnavailabilityError('TaskManager', 'unregisterTaskAsync');\n      }\n      _validate(taskName);\n      yield _ExpoTaskManager.default.unregisterTaskAsync(taskName);\n    });\n    return _unregisterTaskAsync.apply(this, arguments);\n  }\n  function unregisterAllTasksAsync() {\n    return _unregisterAllTasksAsync.apply(this, arguments);\n  }\n  function _unregisterAllTasksAsync() {\n    _unregisterAllTasksAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoTaskManager.default.unregisterAllTasksAsync) {\n        throw new _expoModulesCore.UnavailabilityError('TaskManager', 'unregisterAllTasksAsync');\n      }\n      yield _ExpoTaskManager.default.unregisterAllTasksAsync();\n    });\n    return _unregisterAllTasksAsync.apply(this, arguments);\n  }\n  if (_ExpoTaskManager.default) {\n    var eventEmitter = new _expoModulesCore.LegacyEventEmitter(_ExpoTaskManager.default);\n    eventEmitter.addListener(_ExpoTaskManager.default.EVENT_NAME, /*#__PURE__*/function () {\n      var _ref2 = (0, _asyncToGenerator2.default)(function* (_ref) {\n        var data = _ref.data,\n          error = _ref.error,\n          executionInfo = _ref.executionInfo;\n        var eventId = executionInfo.eventId,\n          taskName = executionInfo.taskName;\n        var taskExecutor = tasks.get(taskName);\n        var result = null;\n        if (taskExecutor) {\n          try {\n            // Execute JS task\n            result = yield taskExecutor({\n              data,\n              error,\n              executionInfo\n            });\n          } catch (error) {\n            console.error(`TaskManager: Task \"${taskName}\" failed:`, error);\n          } finally {\n            // Notify manager the task is finished.\n            yield _ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {\n              eventId,\n              result\n            });\n          }\n        } else {\n          console.warn(`TaskManager: Task \"${taskName}\" has been executed but looks like it is not defined. Make sure that \"TaskManager.defineTask\" is called during initialization phase.`);\n          // No tasks defined -> we need to notify about finish anyway.\n          yield _ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {\n            eventId,\n            result\n          });\n          // We should also unregister such tasks automatically as the task might have been removed\n          // from the app or just renamed - in that case it needs to be registered again (with the new name).\n          yield _ExpoTaskManager.default.unregisterTaskAsync(taskName);\n        }\n      });\n      return function (_x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n  // @needsAudit\n  /**\n   * Determine if the `TaskManager` API can be used in this app.\n   * @return A promise which fulfills with `true` if the API can be used, and `false` otherwise.\n   * With Expo Go, `TaskManager` is not available on Android, and does not support background execution on iOS.\n   * Use a development build to avoid limitations: https://expo.fyi/dev-client.\n   * On the web, it always returns `false`.\n   */\n  function isAvailableAsync() {\n    return _isAvailableAsync.apply(this, arguments);\n  }\n  function _isAvailableAsync() {\n    _isAvailableAsync = (0, _asyncToGenerator2.default)(function* () {\n      return _ExpoTaskManager.default.isAvailableAsync();\n    });\n    return _isAvailableAsync.apply(this, arguments);\n  }\n});","lineCount":233,"map":[[15,2,1,0],[15,6,1,0,"_expoModulesCore"],[15,22,1,0],[15,25,1,0,"require"],[15,32,1,0],[15,33,1,0,"_dependencyMap"],[15,47,1,0],[16,2,2,0],[16,6,2,0,"_ExpoTaskManager"],[16,22,2,0],[16,25,2,0,"_interopRequireDefault"],[16,47,2,0],[16,48,2,0,"require"],[16,55,2,0],[16,56,2,0,"_dependencyMap"],[16,70,2,0],[17,2,3,0],[17,6,3,6,"tasks"],[17,11,3,11],[17,14,3,14],[17,18,3,18,"Map"],[17,21,3,21],[17,22,3,22],[17,23,3,23],[18,2,4,0],[18,11,4,9,"_validate"],[18,20,4,18,"_validate"],[18,21,4,19,"taskName"],[18,29,4,27],[18,31,4,29],[19,4,5,4],[19,8,5,8],[19,9,5,9,"taskName"],[19,17,5,17],[19,21,5,21],[19,28,5,28,"taskName"],[19,36,5,36],[19,41,5,41],[19,49,5,49],[19,51,5,51],[20,6,6,8],[20,12,6,14],[20,16,6,18,"TypeError"],[20,25,6,27],[20,26,6,28],[20,66,6,68],[20,67,6,69],[21,4,7,4],[22,2,8,0],[23,2,9,0],[24,2,10,0],[25,0,11,0],[26,0,12,0],[27,0,13,0],[28,0,14,0],[29,0,15,0],[30,0,16,0],[31,0,17,0],[32,0,18,0],[33,0,19,0],[34,2,20,7],[34,11,20,16,"defineTask"],[34,21,20,26,"defineTask"],[34,22,20,27,"taskName"],[34,30,20,35],[34,32,20,37,"taskExecutor"],[34,44,20,49],[34,46,20,51],[35,4,21,4],[35,8,21,8],[35,9,21,9,"taskName"],[35,17,21,17],[35,21,21,21],[35,28,21,28,"taskName"],[35,36,21,36],[35,41,21,41],[35,49,21,49],[35,51,21,51],[36,6,22,8,"console"],[36,13,22,15],[36,14,22,16,"warn"],[36,18,22,20],[36,19,22,21],[36,92,22,94],[36,93,22,95],[37,6,23,8],[38,4,24,4],[39,4,25,4],[39,8,25,8],[39,9,25,9,"taskExecutor"],[39,21,25,21],[39,25,25,25],[39,32,25,32,"taskExecutor"],[39,44,25,44],[39,49,25,49],[39,59,25,59],[39,61,25,61],[40,6,26,8,"console"],[40,13,26,15],[40,14,26,16,"warn"],[40,18,26,20],[40,19,26,21],[40,80,26,82],[40,81,26,83],[41,6,27,8],[42,4,28,4],[43,4,29,4,"tasks"],[43,9,29,9],[43,10,29,10,"set"],[43,13,29,13],[43,14,29,14,"taskName"],[43,22,29,22],[43,24,29,24,"taskExecutor"],[43,36,29,36],[43,37,29,37],[44,2,30,0],[45,2,31,0],[46,2,32,0],[47,0,33,0],[48,0,34,0],[49,0,35,0],[50,0,36,0],[51,2,37,7],[51,11,37,16,"isTaskDefined"],[51,24,37,29,"isTaskDefined"],[51,25,37,30,"taskName"],[51,33,37,38],[51,35,37,40],[52,4,38,4],[52,11,38,11,"tasks"],[52,16,38,16],[52,17,38,17,"has"],[52,20,38,20],[52,21,38,21,"taskName"],[52,29,38,29],[52,30,38,30],[53,2,39,0],[54,2,40,0],[55,2,41,0],[56,0,42,0],[57,0,43,0],[58,0,44,0],[59,0,45,0],[60,0,46,0],[61,0,47,0],[62,2,41,0],[62,11,48,22,"isTaskRegisteredAsync"],[62,32,48,43,"isTaskRegisteredAsync"],[62,33,48,43,"_x"],[62,35,48,43],[63,4,48,43],[63,11,48,43,"_isTaskRegisteredAsync"],[63,33,48,43],[63,34,48,43,"apply"],[63,39,48,43],[63,46,48,43,"arguments"],[63,55,48,43],[64,2,48,43],[64,4,55,0],[65,2,56,0],[66,0,57,0],[67,0,58,0],[68,0,59,0],[69,0,60,0],[70,0,61,0],[71,0,62,0],[72,0,63,0],[73,2,56,0],[73,11,56,0,"_isTaskRegisteredAsync"],[73,34,56,0],[74,4,56,0,"_isTaskRegisteredAsync"],[74,26,56,0],[74,33,56,0,"_asyncToGenerator2"],[74,51,56,0],[74,52,56,0,"default"],[74,59,56,0],[74,61,48,7],[74,72,48,44,"taskName"],[74,80,48,52],[74,82,48,54],[75,6,49,4],[75,10,49,8],[75,11,49,9,"ExpoTaskManager"],[75,35,49,24],[75,36,49,25,"isTaskRegisteredAsync"],[75,57,49,46],[75,59,49,48],[76,8,50,8],[76,14,50,14],[76,18,50,18,"UnavailabilityError"],[76,54,50,37],[76,55,50,38],[76,68,50,51],[76,70,50,53],[76,93,50,76],[76,94,50,77],[77,6,51,4],[78,6,52,4,"_validate"],[78,15,52,13],[78,16,52,14,"taskName"],[78,24,52,22],[78,25,52,23],[79,6,53,4],[79,13,53,11,"ExpoTaskManager"],[79,37,53,26],[79,38,53,27,"isTaskRegisteredAsync"],[79,59,53,48],[79,60,53,49,"taskName"],[79,68,53,57],[79,69,53,58],[80,4,54,0],[80,5,54,1],[81,4,54,1],[81,11,54,1,"_isTaskRegisteredAsync"],[81,33,54,1],[81,34,54,1,"apply"],[81,39,54,1],[81,46,54,1,"arguments"],[81,55,54,1],[82,2,54,1],[83,2,54,1],[83,11,64,22,"getTaskOptionsAsync"],[83,30,64,41,"getTaskOptionsAsync"],[83,31,64,41,"_x2"],[83,34,64,41],[84,4,64,41],[84,11,64,41,"_getTaskOptionsAsync"],[84,31,64,41],[84,32,64,41,"apply"],[84,37,64,41],[84,44,64,41,"arguments"],[84,53,64,41],[85,2,64,41],[85,4,71,0],[86,2,72,0],[87,0,73,0],[88,0,74,0],[89,0,75,0],[90,0,76,0],[91,0,77,0],[92,0,78,0],[93,0,79,0],[94,0,80,0],[95,0,81,0],[96,0,82,0],[97,0,83,0],[98,0,84,0],[99,0,85,0],[100,0,86,0],[101,0,87,0],[102,0,88,0],[103,0,89,0],[104,0,90,0],[105,0,91,0],[106,0,92,0],[107,0,93,0],[108,0,94,0],[109,0,95,0],[110,0,96,0],[111,2,72,0],[111,11,72,0,"_getTaskOptionsAsync"],[111,32,72,0],[112,4,72,0,"_getTaskOptionsAsync"],[112,24,72,0],[112,31,72,0,"_asyncToGenerator2"],[112,49,72,0],[112,50,72,0,"default"],[112,57,72,0],[112,59,64,7],[112,70,64,42,"taskName"],[112,78,64,50],[112,80,64,52],[113,6,65,4],[113,10,65,8],[113,11,65,9,"ExpoTaskManager"],[113,35,65,24],[113,36,65,25,"getTaskOptionsAsync"],[113,55,65,44],[113,57,65,46],[114,8,66,8],[114,14,66,14],[114,18,66,18,"UnavailabilityError"],[114,54,66,37],[114,55,66,38],[114,68,66,51],[114,70,66,53],[114,91,66,74],[114,92,66,75],[115,6,67,4],[116,6,68,4,"_validate"],[116,15,68,13],[116,16,68,14,"taskName"],[116,24,68,22],[116,25,68,23],[117,6,69,4],[117,13,69,11,"ExpoTaskManager"],[117,37,69,26],[117,38,69,27,"getTaskOptionsAsync"],[117,57,69,46],[117,58,69,47,"taskName"],[117,66,69,55],[117,67,69,56],[118,4,70,0],[118,5,70,1],[119,4,70,1],[119,11,70,1,"_getTaskOptionsAsync"],[119,31,70,1],[119,32,70,1,"apply"],[119,37,70,1],[119,44,70,1,"arguments"],[119,53,70,1],[120,2,70,1],[121,2,70,1],[121,11,97,22,"getRegisteredTasksAsync"],[121,34,97,45,"getRegisteredTasksAsync"],[121,35,97,45],[122,4,97,45],[122,11,97,45,"_getRegisteredTasksAsync"],[122,35,97,45],[122,36,97,45,"apply"],[122,41,97,45],[122,48,97,45,"arguments"],[122,57,97,45],[123,2,97,45],[123,4,103,0],[124,2,104,0],[125,0,105,0],[126,0,106,0],[127,0,107,0],[128,0,108,0],[129,0,109,0],[130,0,110,0],[131,0,111,0],[132,2,104,0],[132,11,104,0,"_getRegisteredTasksAsync"],[132,36,104,0],[133,4,104,0,"_getRegisteredTasksAsync"],[133,28,104,0],[133,35,104,0,"_asyncToGenerator2"],[133,53,104,0],[133,54,104,0,"default"],[133,61,104,0],[133,63,97,7],[133,76,97,48],[134,6,98,4],[134,10,98,8],[134,11,98,9,"ExpoTaskManager"],[134,35,98,24],[134,36,98,25,"getRegisteredTasksAsync"],[134,59,98,48],[134,61,98,50],[135,8,99,8],[135,14,99,14],[135,18,99,18,"UnavailabilityError"],[135,54,99,37],[135,55,99,38],[135,68,99,51],[135,70,99,53],[135,95,99,78],[135,96,99,79],[136,6,100,4],[137,6,101,4],[137,13,101,11,"ExpoTaskManager"],[137,37,101,26],[137,38,101,27,"getRegisteredTasksAsync"],[137,61,101,50],[137,62,101,51],[137,63,101,52],[138,4,102,0],[138,5,102,1],[139,4,102,1],[139,11,102,1,"_getRegisteredTasksAsync"],[139,35,102,1],[139,36,102,1,"apply"],[139,41,102,1],[139,48,102,1,"arguments"],[139,57,102,1],[140,2,102,1],[141,2,102,1],[141,11,112,22,"unregisterTaskAsync"],[141,30,112,41,"unregisterTaskAsync"],[141,31,112,41,"_x3"],[141,34,112,41],[142,4,112,41],[142,11,112,41,"_unregisterTaskAsync"],[142,31,112,41],[142,32,112,41,"apply"],[142,37,112,41],[142,44,112,41,"arguments"],[142,53,112,41],[143,2,112,41],[143,4,119,0],[144,2,120,0],[145,0,121,0],[146,0,122,0],[147,0,123,0],[148,0,124,0],[149,2,120,0],[149,11,120,0,"_unregisterTaskAsync"],[149,32,120,0],[150,4,120,0,"_unregisterTaskAsync"],[150,24,120,0],[150,31,120,0,"_asyncToGenerator2"],[150,49,120,0],[150,50,120,0,"default"],[150,57,120,0],[150,59,112,7],[150,70,112,42,"taskName"],[150,78,112,50],[150,80,112,52],[151,6,113,4],[151,10,113,8],[151,11,113,9,"ExpoTaskManager"],[151,35,113,24],[151,36,113,25,"unregisterTaskAsync"],[151,55,113,44],[151,57,113,46],[152,8,114,8],[152,14,114,14],[152,18,114,18,"UnavailabilityError"],[152,54,114,37],[152,55,114,38],[152,68,114,51],[152,70,114,53],[152,91,114,74],[152,92,114,75],[153,6,115,4],[154,6,116,4,"_validate"],[154,15,116,13],[154,16,116,14,"taskName"],[154,24,116,22],[154,25,116,23],[155,6,117,4],[155,12,117,10,"ExpoTaskManager"],[155,36,117,25],[155,37,117,26,"unregisterTaskAsync"],[155,56,117,45],[155,57,117,46,"taskName"],[155,65,117,54],[155,66,117,55],[156,4,118,0],[156,5,118,1],[157,4,118,1],[157,11,118,1,"_unregisterTaskAsync"],[157,31,118,1],[157,32,118,1,"apply"],[157,37,118,1],[157,44,118,1,"arguments"],[157,53,118,1],[158,2,118,1],[159,2,118,1],[159,11,125,22,"unregisterAllTasksAsync"],[159,34,125,45,"unregisterAllTasksAsync"],[159,35,125,45],[160,4,125,45],[160,11,125,45,"_unregisterAllTasksAsync"],[160,35,125,45],[160,36,125,45,"apply"],[160,41,125,45],[160,48,125,45,"arguments"],[160,57,125,45],[161,2,125,45],[162,2,125,45],[162,11,125,45,"_unregisterAllTasksAsync"],[162,36,125,45],[163,4,125,45,"_unregisterAllTasksAsync"],[163,28,125,45],[163,35,125,45,"_asyncToGenerator2"],[163,53,125,45],[163,54,125,45,"default"],[163,61,125,45],[163,63,125,7],[163,76,125,48],[164,6,126,4],[164,10,126,8],[164,11,126,9,"ExpoTaskManager"],[164,35,126,24],[164,36,126,25,"unregisterAllTasksAsync"],[164,59,126,48],[164,61,126,50],[165,8,127,8],[165,14,127,14],[165,18,127,18,"UnavailabilityError"],[165,54,127,37],[165,55,127,38],[165,68,127,51],[165,70,127,53],[165,95,127,78],[165,96,127,79],[166,6,128,4],[167,6,129,4],[167,12,129,10,"ExpoTaskManager"],[167,36,129,25],[167,37,129,26,"unregisterAllTasksAsync"],[167,60,129,49],[167,61,129,50],[167,62,129,51],[168,4,130,0],[168,5,130,1],[169,4,130,1],[169,11,130,1,"_unregisterAllTasksAsync"],[169,35,130,1],[169,36,130,1,"apply"],[169,41,130,1],[169,48,130,1,"arguments"],[169,57,130,1],[170,2,130,1],[171,2,131,0],[171,6,131,4,"ExpoTaskManager"],[171,30,131,19],[171,32,131,21],[172,4,132,4],[172,8,132,10,"eventEmitter"],[172,20,132,22],[172,23,132,25],[172,27,132,29,"LegacyEventEmitter"],[172,62,132,47],[172,63,132,48,"ExpoTaskManager"],[172,87,132,63],[172,88,132,64],[173,4,133,4,"eventEmitter"],[173,16,133,16],[173,17,133,17,"addListener"],[173,28,133,28],[173,29,133,29,"ExpoTaskManager"],[173,53,133,44],[173,54,133,45,"EVENT_NAME"],[173,64,133,55],[174,6,133,55],[174,10,133,55,"_ref2"],[174,15,133,55],[174,22,133,55,"_asyncToGenerator2"],[174,40,133,55],[174,41,133,55,"default"],[174,48,133,55],[174,50,133,57],[174,61,133,57,"_ref"],[174,65,133,57],[174,67,133,99],[175,8,133,99],[175,12,133,66,"data"],[175,16,133,70],[175,19,133,70,"_ref"],[175,23,133,70],[175,24,133,66,"data"],[175,28,133,70],[176,10,133,72,"error"],[176,15,133,77],[176,18,133,77,"_ref"],[176,22,133,77],[176,23,133,72,"error"],[176,28,133,77],[177,10,133,79,"executionInfo"],[177,23,133,92],[177,26,133,92,"_ref"],[177,30,133,92],[177,31,133,79,"executionInfo"],[177,44,133,92],[178,8,134,8],[178,12,134,16,"eventId"],[178,19,134,23],[178,22,134,38,"executionInfo"],[178,35,134,51],[178,36,134,16,"eventId"],[178,43,134,23],[179,10,134,25,"taskName"],[179,18,134,33],[179,21,134,38,"executionInfo"],[179,34,134,51],[179,35,134,25,"taskName"],[179,43,134,33],[180,8,135,8],[180,12,135,14,"taskExecutor"],[180,24,135,26],[180,27,135,29,"tasks"],[180,32,135,34],[180,33,135,35,"get"],[180,36,135,38],[180,37,135,39,"taskName"],[180,45,135,47],[180,46,135,48],[181,8,136,8],[181,12,136,12,"result"],[181,18,136,18],[181,21,136,21],[181,25,136,25],[182,8,137,8],[182,12,137,12,"taskExecutor"],[182,24,137,24],[182,26,137,26],[183,10,138,12],[183,14,138,16],[184,12,139,16],[185,12,140,16,"result"],[185,18,140,22],[185,27,140,31,"taskExecutor"],[185,39,140,43],[185,40,140,44],[186,14,140,46,"data"],[186,18,140,50],[187,14,140,52,"error"],[187,19,140,57],[188,14,140,59,"executionInfo"],[189,12,140,73],[189,13,140,74],[189,14,140,75],[190,10,141,12],[190,11,141,13],[190,12,142,12],[190,19,142,19,"error"],[190,24,142,24],[190,26,142,26],[191,12,143,16,"console"],[191,19,143,23],[191,20,143,24,"error"],[191,25,143,29],[191,26,143,30],[191,48,143,52,"taskName"],[191,56,143,60],[191,67,143,71],[191,69,143,73,"error"],[191,74,143,78],[191,75,143,79],[192,10,144,12],[192,11,144,13],[192,20,145,20],[193,12,146,16],[194,12,147,16],[194,18,147,22,"ExpoTaskManager"],[194,42,147,37],[194,43,147,38,"notifyTaskFinishedAsync"],[194,66,147,61],[194,67,147,62,"taskName"],[194,75,147,70],[194,77,147,72],[195,14,147,74,"eventId"],[195,21,147,81],[196,14,147,83,"result"],[197,12,147,90],[197,13,147,91],[197,14,147,92],[198,10,148,12],[199,8,149,8],[199,9,149,9],[199,15,150,13],[200,10,151,12,"console"],[200,17,151,19],[200,18,151,20,"warn"],[200,22,151,24],[200,23,151,25],[200,45,151,47,"taskName"],[200,53,151,55],[200,187,151,189],[200,188,151,190],[201,10,152,12],[202,10,153,12],[202,16,153,18,"ExpoTaskManager"],[202,40,153,33],[202,41,153,34,"notifyTaskFinishedAsync"],[202,64,153,57],[202,65,153,58,"taskName"],[202,73,153,66],[202,75,153,68],[203,12,153,70,"eventId"],[203,19,153,77],[204,12,153,79,"result"],[205,10,153,86],[205,11,153,87],[205,12,153,88],[206,10,154,12],[207,10,155,12],[208,10,156,12],[208,16,156,18,"ExpoTaskManager"],[208,40,156,33],[208,41,156,34,"unregisterTaskAsync"],[208,60,156,53],[208,61,156,54,"taskName"],[208,69,156,62],[208,70,156,63],[209,8,157,8],[210,6,158,4],[210,7,158,5],[211,6,158,5],[211,23,158,5,"_x4"],[211,26,158,5],[212,8,158,5],[212,15,158,5,"_ref2"],[212,20,158,5],[212,21,158,5,"apply"],[212,26,158,5],[212,33,158,5,"arguments"],[212,42,158,5],[213,6,158,5],[214,4,158,5],[214,8,158,6],[215,2,159,0],[216,2,160,0],[217,2,161,0],[218,0,162,0],[219,0,163,0],[220,0,164,0],[221,0,165,0],[222,0,166,0],[223,0,167,0],[224,2,161,0],[224,11,168,22,"isAvailableAsync"],[224,27,168,38,"isAvailableAsync"],[224,28,168,38],[225,4,168,38],[225,11,168,38,"_isAvailableAsync"],[225,28,168,38],[225,29,168,38,"apply"],[225,34,168,38],[225,41,168,38,"arguments"],[225,50,168,38],[226,2,168,38],[227,2,168,38],[227,11,168,38,"_isAvailableAsync"],[227,29,168,38],[228,4,168,38,"_isAvailableAsync"],[228,21,168,38],[228,28,168,38,"_asyncToGenerator2"],[228,46,168,38],[228,47,168,38,"default"],[228,54,168,38],[228,56,168,7],[228,69,168,41],[229,6,169,4],[229,13,169,11,"ExpoTaskManager"],[229,37,169,26],[229,38,169,27,"isAvailableAsync"],[229,54,169,43],[229,55,169,44],[229,56,169,45],[230,4,170,0],[230,5,170,1],[231,4,170,1],[231,11,170,1,"_isAvailableAsync"],[231,28,170,1],[231,29,170,1,"apply"],[231,34,170,1],[231,41,170,1,"arguments"],[231,50,170,1],[232,2,170,1],[233,0,170,1],[233,3]],"functionMap":{"names":["<global>","_validate","defineTask","isTaskDefined","isTaskRegisteredAsync","getTaskOptionsAsync","getRegisteredTasksAsync","unregisterTaskAsync","unregisterAllTasksAsync","eventEmitter.addListener$argument_1","isAvailableAsync"],"mappings":"AAA;ACG;CDI;OEY;CFU;OGO;CHE;OIS;CJM;OKU;CLM;OM2B;CNK;OOU;CPM;OQO;CRK;yDSG;KTyB;OUU;CVE"}},"type":"js/module"}]}