{"dependencies":[{"name":"for-each","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":14,"index":29},"end":{"line":3,"column":33,"index":48}}],"key":"ZDd0zDSMTg3nL+pZYtA/usvE1WI=","exportNames":["*"]}},{"name":"available-typed-arrays","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":27,"index":77},"end":{"line":4,"column":60,"index":110}}],"key":"KnV6bGXyhGa+1GxH7FBG4Mhyka8=","exportNames":["*"]}},{"name":"call-bind","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":15,"index":127},"end":{"line":5,"column":35,"index":147}}],"key":"YdMifwrESRR1WKKl1g9oyUrerS8=","exportNames":["*"]}},{"name":"call-bound","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":16,"index":165},"end":{"line":6,"column":37,"index":186}}],"key":"xVV7LLeUILRahu/c6/GJ3JZjpdc=","exportNames":["*"]}},{"name":"gopd","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":11,"index":199},"end":{"line":7,"column":26,"index":214}}],"key":"3Ynmg9vud3kIHPLeXNonzO7sQpY=","exportNames":["*"]}},{"name":"get-proto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":15,"index":231},"end":{"line":8,"column":35,"index":251}}],"key":"635U2dU6Zp8N1eVIEAjci+JPh2c=","exportNames":["*"]}},{"name":"has-tostringtag/shams","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":21,"index":331},"end":{"line":11,"column":53,"index":363}}],"key":"izE/uq7FfNanWBh2hZSREj/S0H0=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var forEach = require(_dependencyMap[0], \"for-each\");\n  var availableTypedArrays = require(_dependencyMap[1], \"available-typed-arrays\");\n  var callBind = require(_dependencyMap[2], \"call-bind\");\n  var callBound = require(_dependencyMap[3], \"call-bound\");\n  var gOPD = require(_dependencyMap[4], \"gopd\");\n  var getProto = require(_dependencyMap[5], \"get-proto\");\n  var $toString = callBound('Object.prototype.toString');\n  var hasToStringTag = require(_dependencyMap[6], \"has-tostringtag/shams\")();\n  var g = typeof globalThis === 'undefined' ? global : globalThis;\n  var typedArrays = availableTypedArrays();\n  var $slice = callBound('String.prototype.slice');\n\n  /** @type {<T = unknown>(array: readonly T[], value: unknown) => number} */\n  var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n    for (var i = 0; i < array.length; i += 1) {\n      if (array[i] === value) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  /** @typedef {import('./types').Getter} Getter */\n  /** @type {import('./types').Cache} */\n  var cache = {\n    __proto__: null\n  };\n  if (hasToStringTag && gOPD && getProto) {\n    forEach(typedArrays, function (typedArray) {\n      var arr = new g[typedArray]();\n      if (Symbol.toStringTag in arr && getProto) {\n        var proto = getProto(arr);\n        // @ts-expect-error TS won't narrow inside a closure\n        var descriptor = gOPD(proto, Symbol.toStringTag);\n        if (!descriptor && proto) {\n          var superProto = getProto(proto);\n          // @ts-expect-error TS won't narrow inside a closure\n          descriptor = gOPD(superProto, Symbol.toStringTag);\n        }\n        // @ts-expect-error TODO: fix\n        cache['$' + typedArray] = callBind(descriptor.get);\n      }\n    });\n  } else {\n    forEach(typedArrays, function (typedArray) {\n      var arr = new g[typedArray]();\n      var fn = arr.slice || arr.set;\n      if (fn) {\n        cache[(/** @type {`$${import('.').TypedArrayName}`} */'$' + typedArray)] = /** @type {import('./types').BoundSlice | import('./types').BoundSet} */\n        // @ts-expect-error TODO FIXME\n        callBind(fn);\n      }\n    });\n  }\n\n  /** @type {(value: object) => false | import('.').TypedArrayName} */\n  var tryTypedArrays = function tryAllTypedArrays(value) {\n    /** @type {ReturnType<typeof tryAllTypedArrays>} */var found = false;\n    forEach(/** @type {Record<`\\$${import('.').TypedArrayName}`, Getter>} */cache, /** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */\n    function (getter, typedArray) {\n      if (!found) {\n        try {\n          // @ts-expect-error a throw is fine here\n          if ('$' + getter(value) === typedArray) {\n            found = /** @type {import('.').TypedArrayName} */$slice(typedArray, 1);\n          }\n        } catch (e) {/**/}\n      }\n    });\n    return found;\n  };\n\n  /** @type {(value: object) => false | import('.').TypedArrayName} */\n  var trySlices = function tryAllSlices(value) {\n    /** @type {ReturnType<typeof tryAllSlices>} */var found = false;\n    forEach(/** @type {Record<`\\$${import('.').TypedArrayName}`, Getter>} */cache, /** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */function (getter, name) {\n      if (!found) {\n        try {\n          // @ts-expect-error a throw is fine here\n          getter(value);\n          found = /** @type {import('.').TypedArrayName} */$slice(name, 1);\n        } catch (e) {/**/}\n      }\n    });\n    return found;\n  };\n\n  /** @type {import('.')} */\n  module.exports = function whichTypedArray(value) {\n    if (!value || typeof value !== 'object') {\n      return false;\n    }\n    if (!hasToStringTag) {\n      /** @type {string} */\n      var tag = $slice($toString(value), 8, -1);\n      if ($indexOf(typedArrays, tag) > -1) {\n        return tag;\n      }\n      if (tag !== 'Object') {\n        return false;\n      }\n      // node < 0.6 hits here on real Typed Arrays\n      return trySlices(value);\n    }\n    if (!gOPD) {\n      return null;\n    } // unknown engine\n    return tryTypedArrays(value);\n  };\n});","lineCount":113,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"forEach"],[4,13,3,11],[4,16,3,14,"require"],[4,23,3,21],[4,24,3,21,"_dependencyMap"],[4,38,3,21],[4,53,3,32],[4,54,3,33],[5,2,4,0],[5,6,4,4,"availableTypedArrays"],[5,26,4,24],[5,29,4,27,"require"],[5,36,4,34],[5,37,4,34,"_dependencyMap"],[5,51,4,34],[5,80,4,59],[5,81,4,60],[6,2,5,0],[6,6,5,4,"callBind"],[6,14,5,12],[6,17,5,15,"require"],[6,24,5,22],[6,25,5,22,"_dependencyMap"],[6,39,5,22],[6,55,5,34],[6,56,5,35],[7,2,6,0],[7,6,6,4,"callBound"],[7,15,6,13],[7,18,6,16,"require"],[7,25,6,23],[7,26,6,23,"_dependencyMap"],[7,40,6,23],[7,57,6,36],[7,58,6,37],[8,2,7,0],[8,6,7,4,"gOPD"],[8,10,7,8],[8,13,7,11,"require"],[8,20,7,18],[8,21,7,18,"_dependencyMap"],[8,35,7,18],[8,46,7,25],[8,47,7,26],[9,2,8,0],[9,6,8,4,"getProto"],[9,14,8,12],[9,17,8,15,"require"],[9,24,8,22],[9,25,8,22,"_dependencyMap"],[9,39,8,22],[9,55,8,34],[9,56,8,35],[10,2,10,0],[10,6,10,4,"$toString"],[10,15,10,13],[10,18,10,16,"callBound"],[10,27,10,25],[10,28,10,26],[10,55,10,53],[10,56,10,54],[11,2,11,0],[11,6,11,4,"hasToStringTag"],[11,20,11,18],[11,23,11,21,"require"],[11,30,11,28],[11,31,11,28,"_dependencyMap"],[11,45,11,28],[11,73,11,52],[11,74,11,53],[11,75,11,54],[11,76,11,55],[12,2,13,0],[12,6,13,4,"g"],[12,7,13,5],[12,10,13,8],[12,17,13,15,"globalThis"],[12,27,13,25],[12,32,13,30],[12,43,13,41],[12,46,13,44,"global"],[12,52,13,50],[12,55,13,53,"globalThis"],[12,65,13,63],[13,2,14,0],[13,6,14,4,"typedArrays"],[13,17,14,15],[13,20,14,18,"availableTypedArrays"],[13,40,14,38],[13,41,14,39],[13,42,14,40],[14,2,16,0],[14,6,16,4,"$slice"],[14,12,16,10],[14,15,16,13,"callBound"],[14,24,16,22],[14,25,16,23],[14,49,16,47],[14,50,16,48],[16,2,18,0],[17,2,19,0],[17,6,19,4,"$indexOf"],[17,14,19,12],[17,17,19,15,"callBound"],[17,26,19,24],[17,27,19,25],[17,52,19,50],[17,54,19,52],[17,58,19,56],[17,59,19,57],[17,63,19,61],[17,72,19,70,"indexOf"],[17,79,19,77,"indexOf"],[17,80,19,78,"array"],[17,85,19,83],[17,87,19,85,"value"],[17,92,19,90],[17,94,19,92],[18,4,20,1],[18,9,20,6],[18,13,20,10,"i"],[18,14,20,11],[18,17,20,14],[18,18,20,15],[18,20,20,17,"i"],[18,21,20,18],[18,24,20,21,"array"],[18,29,20,26],[18,30,20,27,"length"],[18,36,20,33],[18,38,20,35,"i"],[18,39,20,36],[18,43,20,40],[18,44,20,41],[18,46,20,43],[19,6,21,2],[19,10,21,6,"array"],[19,15,21,11],[19,16,21,12,"i"],[19,17,21,13],[19,18,21,14],[19,23,21,19,"value"],[19,28,21,24],[19,30,21,26],[20,8,22,3],[20,15,22,10,"i"],[20,16,22,11],[21,6,23,2],[22,4,24,1],[23,4,25,1],[23,11,25,8],[23,12,25,9],[23,13,25,10],[24,2,26,0],[24,3,26,1],[26,2,28,0],[27,2,29,0],[28,2,30,0],[28,6,30,4,"cache"],[28,11,30,9],[28,14,30,12],[29,4,30,14,"__proto__"],[29,13,30,23],[29,15,30,25],[30,2,30,30],[30,3,30,31],[31,2,31,0],[31,6,31,4,"hasToStringTag"],[31,20,31,18],[31,24,31,22,"gOPD"],[31,28,31,26],[31,32,31,30,"getProto"],[31,40,31,38],[31,42,31,40],[32,4,32,1,"forEach"],[32,11,32,8],[32,12,32,9,"typedArrays"],[32,23,32,20],[32,25,32,22],[32,35,32,32,"typedArray"],[32,45,32,42],[32,47,32,44],[33,6,33,2],[33,10,33,6,"arr"],[33,13,33,9],[33,16,33,12],[33,20,33,16,"g"],[33,21,33,17],[33,22,33,18,"typedArray"],[33,32,33,28],[33,33,33,29],[33,34,33,30],[33,35,33,31],[34,6,34,2],[34,10,34,6,"Symbol"],[34,16,34,12],[34,17,34,13,"toStringTag"],[34,28,34,24],[34,32,34,28,"arr"],[34,35,34,31],[34,39,34,35,"getProto"],[34,47,34,43],[34,49,34,45],[35,8,35,3],[35,12,35,7,"proto"],[35,17,35,12],[35,20,35,15,"getProto"],[35,28,35,23],[35,29,35,24,"arr"],[35,32,35,27],[35,33,35,28],[36,8,36,3],[37,8,37,3],[37,12,37,7,"descriptor"],[37,22,37,17],[37,25,37,20,"gOPD"],[37,29,37,24],[37,30,37,25,"proto"],[37,35,37,30],[37,37,37,32,"Symbol"],[37,43,37,38],[37,44,37,39,"toStringTag"],[37,55,37,50],[37,56,37,51],[38,8,38,3],[38,12,38,7],[38,13,38,8,"descriptor"],[38,23,38,18],[38,27,38,22,"proto"],[38,32,38,27],[38,34,38,29],[39,10,39,4],[39,14,39,8,"superProto"],[39,24,39,18],[39,27,39,21,"getProto"],[39,35,39,29],[39,36,39,30,"proto"],[39,41,39,35],[39,42,39,36],[40,10,40,4],[41,10,41,4,"descriptor"],[41,20,41,14],[41,23,41,17,"gOPD"],[41,27,41,21],[41,28,41,22,"superProto"],[41,38,41,32],[41,40,41,34,"Symbol"],[41,46,41,40],[41,47,41,41,"toStringTag"],[41,58,41,52],[41,59,41,53],[42,8,42,3],[43,8,43,3],[44,8,44,3,"cache"],[44,13,44,8],[44,14,44,9],[44,17,44,12],[44,20,44,15,"typedArray"],[44,30,44,25],[44,31,44,26],[44,34,44,29,"callBind"],[44,42,44,37],[44,43,44,38,"descriptor"],[44,53,44,48],[44,54,44,49,"get"],[44,57,44,52],[44,58,44,53],[45,6,45,2],[46,4,46,1],[46,5,46,2],[46,6,46,3],[47,2,47,0],[47,3,47,1],[47,9,47,7],[48,4,48,1,"forEach"],[48,11,48,8],[48,12,48,9,"typedArrays"],[48,23,48,20],[48,25,48,22],[48,35,48,32,"typedArray"],[48,45,48,42],[48,47,48,44],[49,6,49,2],[49,10,49,6,"arr"],[49,13,49,9],[49,16,49,12],[49,20,49,16,"g"],[49,21,49,17],[49,22,49,18,"typedArray"],[49,32,49,28],[49,33,49,29],[49,34,49,30],[49,35,49,31],[50,6,50,2],[50,10,50,6,"fn"],[50,12,50,8],[50,15,50,11,"arr"],[50,18,50,14],[50,19,50,15,"slice"],[50,24,50,20],[50,28,50,24,"arr"],[50,31,50,27],[50,32,50,28,"set"],[50,35,50,31],[51,6,51,2],[51,10,51,6,"fn"],[51,12,51,8],[51,14,51,10],[52,8,52,3,"cache"],[52,13,52,8],[52,15,53,4],[52,62,53,53],[52,65,53,56],[52,68,53,59,"typedArray"],[52,78,53,69],[52,80,54,4],[52,83,54,7],[53,8,55,4],[54,8,56,4,"callBind"],[54,16,56,12],[54,17,56,13,"fn"],[54,19,56,15],[54,20,57,4],[55,6,58,2],[56,4,59,1],[56,5,59,2],[56,6,59,3],[57,2,60,0],[59,2,62,0],[60,2,63,0],[60,6,63,4,"tryTypedArrays"],[60,20,63,18],[60,23,63,21],[60,32,63,30,"tryAllTypedArrays"],[60,49,63,47,"tryAllTypedArrays"],[60,50,63,48,"value"],[60,55,63,53],[60,57,63,55],[61,4,64,1],[61,55,64,53],[61,59,64,57,"found"],[61,64,64,62],[61,67,64,65],[61,72,64,70],[62,4,65,1,"forEach"],[62,11,65,8],[62,12,66,2],[62,76,66,68,"cache"],[62,81,66,73],[62,83,67,2],[63,4,68,2],[63,14,68,12,"getter"],[63,20,68,18],[63,22,68,20,"typedArray"],[63,32,68,30],[63,34,68,32],[64,6,69,3],[64,10,69,7],[64,11,69,8,"found"],[64,16,69,13],[64,18,69,15],[65,8,70,4],[65,12,70,8],[66,10,71,5],[67,10,72,5],[67,14,72,9],[67,17,72,12],[67,20,72,15,"getter"],[67,26,72,21],[67,27,72,22,"value"],[67,32,72,27],[67,33,72,28],[67,38,72,33,"typedArray"],[67,48,72,43],[67,50,72,45],[68,12,73,6,"found"],[68,17,73,11],[68,20,73,14],[68,61,73,57,"$slice"],[68,67,73,63],[68,68,73,64,"typedArray"],[68,78,73,74],[68,80,73,76],[68,81,73,77],[68,82,73,79],[69,10,74,5],[70,8,75,4],[70,9,75,5],[70,10,75,6],[70,17,75,13,"e"],[70,18,75,14],[70,20,75,16],[70,21,75,18],[71,6,76,3],[72,4,77,2],[72,5,78,1],[72,6,78,2],[73,4,79,1],[73,11,79,8,"found"],[73,16,79,13],[74,2,80,0],[74,3,80,1],[76,2,82,0],[77,2,83,0],[77,6,83,4,"trySlices"],[77,15,83,13],[77,18,83,16],[77,27,83,25,"tryAllSlices"],[77,39,83,37,"tryAllSlices"],[77,40,83,38,"value"],[77,45,83,43],[77,47,83,45],[78,4,84,1],[78,50,84,48],[78,54,84,52,"found"],[78,59,84,57],[78,62,84,60],[78,67,84,65],[79,4,85,1,"forEach"],[79,11,85,8],[79,12,86,2],[79,76,86,67,"cache"],[79,81,86,72],[79,83,87,2],[79,163,87,83],[79,173,87,93,"getter"],[79,179,87,99],[79,181,87,101,"name"],[79,185,87,105],[79,187,87,107],[80,6,88,3],[80,10,88,7],[80,11,88,8,"found"],[80,16,88,13],[80,18,88,15],[81,8,89,4],[81,12,89,8],[82,10,90,5],[83,10,91,5,"getter"],[83,16,91,11],[83,17,91,12,"value"],[83,22,91,17],[83,23,91,18],[84,10,92,5,"found"],[84,15,92,10],[84,18,92,13],[84,59,92,56,"$slice"],[84,65,92,62],[84,66,92,63,"name"],[84,70,92,67],[84,72,92,69],[84,73,92,70],[84,74,92,72],[85,8,93,4],[85,9,93,5],[85,10,93,6],[85,17,93,13,"e"],[85,18,93,14],[85,20,93,16],[85,21,93,18],[86,6,94,3],[87,4,95,2],[87,5,96,1],[87,6,96,2],[88,4,97,1],[88,11,97,8,"found"],[88,16,97,13],[89,2,98,0],[89,3,98,1],[91,2,100,0],[92,2,101,0,"module"],[92,8,101,6],[92,9,101,7,"exports"],[92,16,101,14],[92,19,101,17],[92,28,101,26,"whichTypedArray"],[92,43,101,41,"whichTypedArray"],[92,44,101,42,"value"],[92,49,101,47],[92,51,101,49],[93,4,102,1],[93,8,102,5],[93,9,102,6,"value"],[93,14,102,11],[93,18,102,15],[93,25,102,22,"value"],[93,30,102,27],[93,35,102,32],[93,43,102,40],[93,45,102,42],[94,6,102,44],[94,13,102,51],[94,18,102,56],[95,4,102,58],[96,4,103,1],[96,8,103,5],[96,9,103,6,"hasToStringTag"],[96,23,103,20],[96,25,103,22],[97,6,104,2],[98,6,105,2],[98,10,105,6,"tag"],[98,13,105,9],[98,16,105,12,"$slice"],[98,22,105,18],[98,23,105,19,"$toString"],[98,32,105,28],[98,33,105,29,"value"],[98,38,105,34],[98,39,105,35],[98,41,105,37],[98,42,105,38],[98,44,105,40],[98,45,105,41],[98,46,105,42],[98,47,105,43],[99,6,106,2],[99,10,106,6,"$indexOf"],[99,18,106,14],[99,19,106,15,"typedArrays"],[99,30,106,26],[99,32,106,28,"tag"],[99,35,106,31],[99,36,106,32],[99,39,106,35],[99,40,106,36],[99,41,106,37],[99,43,106,39],[100,8,107,3],[100,15,107,10,"tag"],[100,18,107,13],[101,6,108,2],[102,6,109,2],[102,10,109,6,"tag"],[102,13,109,9],[102,18,109,14],[102,26,109,22],[102,28,109,24],[103,8,110,3],[103,15,110,10],[103,20,110,15],[104,6,111,2],[105,6,112,2],[106,6,113,2],[106,13,113,9,"trySlices"],[106,22,113,18],[106,23,113,19,"value"],[106,28,113,24],[106,29,113,25],[107,4,114,1],[108,4,115,1],[108,8,115,5],[108,9,115,6,"gOPD"],[108,13,115,10],[108,15,115,12],[109,6,115,14],[109,13,115,21],[109,17,115,25],[110,4,115,27],[110,5,115,28],[110,6,115,29],[111,4,116,1],[111,11,116,8,"tryTypedArrays"],[111,25,116,22],[111,26,116,23,"value"],[111,31,116,28],[111,32,116,29],[112,2,117,0],[112,3,117,1],[113,0,117,2],[113,3]],"functionMap":{"names":["<global>","indexOf","forEach$argument_1","tryAllTypedArrays","tryAllSlices","whichTypedArray"],"mappings":"AAA;6DCkB;CDO;sBEM;EFc;sBEE;EFW;qBGI;EDK;GCS;CHG;gBIG;mFFI;GEQ;CJG;iBKG;CLgB"}},"type":"js/module"}]}