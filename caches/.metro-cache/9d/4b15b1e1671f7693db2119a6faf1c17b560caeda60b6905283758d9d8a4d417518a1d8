{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"./_lib/defaultLocale.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"pt9gPO2ve6GSRFbXPAQkm4R9a2w=","exportNames":["*"]}},{"name":"./_lib/defaultOptions.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":61,"index":118}}],"key":"RLyj7w3ZPZGGUSjkcz/7nwwn2xo=","exportNames":["*"]}},{"name":"./_lib/getRoundingMethod.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":119},"end":{"line":3,"column":64,"index":183}}],"key":"LkiOAV1LQTQ7MnwpzKKtm1nDXGQ=","exportNames":["*"]}},{"name":"./_lib/getTimezoneOffsetInMilliseconds.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":184},"end":{"line":4,"column":92,"index":276}}],"key":"AyqjCuTamFHRMXjptSd4N6rS1NE=","exportNames":["*"]}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":277},"end":{"line":5,"column":58,"index":335}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"]}},{"name":"./compareAsc.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":336},"end":{"line":6,"column":45,"index":381}}],"key":"0qIXq/JoGP2oJkpZUgvMj3rdXHw=","exportNames":["*"]}},{"name":"./constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":382},"end":{"line":12,"column":24,"index":490}}],"key":"46QfplZMuoT7/1B4GqMDknw8q/g=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.formatDistanceStrict = formatDistanceStrict;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _defaultLocale = require(_dependencyMap[2], \"./_lib/defaultLocale.js\");\n  var _defaultOptions = require(_dependencyMap[3], \"./_lib/defaultOptions.js\");\n  var _getRoundingMethod = require(_dependencyMap[4], \"./_lib/getRoundingMethod.js\");\n  var _getTimezoneOffsetInMilliseconds = require(_dependencyMap[5], \"./_lib/getTimezoneOffsetInMilliseconds.js\");\n  var _normalizeDates3 = require(_dependencyMap[6], \"./_lib/normalizeDates.js\");\n  var _compareAsc = require(_dependencyMap[7], \"./compareAsc.js\");\n  var _constants = require(_dependencyMap[8], \"./constants.js\");\n  /**\n   * The {@link formatDistanceStrict} function options.\n   */\n\n  /**\n   * The unit used to format the distance in {@link formatDistanceStrict}.\n   */\n\n  /**\n   * @name formatDistanceStrict\n   * @category Common Helpers\n   * @summary Return the distance between the given dates in words.\n   *\n   * @description\n   * Return the distance between the given dates in words, using strict units.\n   * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n   * 'less than' and the like.\n   *\n   * | Distance between dates | Result              |\n   * |------------------------|---------------------|\n   * | 0 ... 59 secs          | [0..59] seconds     |\n   * | 1 ... 59 mins          | [1..59] minutes     |\n   * | 1 ... 23 hrs           | [1..23] hours       |\n   * | 1 ... 29 days          | [1..29] days        |\n   * | 1 ... 11 months        | [1..11] months      |\n   * | 1 ... N years          | [1..N]  years       |\n   *\n   * @param laterDate - The date\n   * @param earlierDate - The date to compare with\n   * @param options - An object with options\n   *\n   * @returns The distance in words\n   *\n   * @throws `date` must not be Invalid Date\n   * @throws `baseDate` must not be Invalid Date\n   * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n   * @throws `options.locale` must contain `formatDistance` property\n   *\n   * @example\n   * // What is the distance between 2 July 2014 and 1 January 2015?\n   * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n   * //=> '6 months'\n   *\n   * @example\n   * // What is the distance between 1 January 2015 00:00:15\n   * // and 1 January 2015 00:00:00?\n   * const result = formatDistanceStrict(\n   *   new Date(2015, 0, 1, 0, 0, 15),\n   *   new Date(2015, 0, 1, 0, 0, 0)\n   * )\n   * //=> '15 seconds'\n   *\n   * @example\n   * // What is the distance from 1 January 2016\n   * // to 1 January 2015, with a suffix?\n   * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n   *   addSuffix: true\n   * })\n   * //=> '1 year ago'\n   *\n   * @example\n   * // What is the distance from 1 January 2016\n   * // to 1 January 2015, in minutes?\n   * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n   *   unit: 'minute'\n   * })\n   * //=> '525600 minutes'\n   *\n   * @example\n   * // What is the distance from 1 January 2015\n   * // to 28 January 2015, in months, rounded up?\n   * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n   *   unit: 'month',\n   *   roundingMethod: 'ceil'\n   * })\n   * //=> '1 month'\n   *\n   * @example\n   * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n   * import { eoLocale } from 'date-fns/locale/eo'\n   * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n   *   locale: eoLocale\n   * })\n   * //=> '1 jaro'\n   */\n\n  function formatDistanceStrict(laterDate, earlierDate, options) {\n    var defaultOptions = (0, _defaultOptions.getDefaultOptions)();\n    var locale = options?.locale ?? defaultOptions.locale ?? _defaultLocale.defaultLocale;\n    var comparison = (0, _compareAsc.compareAsc)(laterDate, earlierDate);\n    if (isNaN(comparison)) {\n      throw new RangeError(\"Invalid time value\");\n    }\n    var localizeOptions = Object.assign({}, options, {\n      addSuffix: options?.addSuffix,\n      comparison: comparison\n    });\n    var _normalizeDates = (0, _normalizeDates3.normalizeDates)(options?.in, ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate])),\n      _normalizeDates2 = (0, _slicedToArray2.default)(_normalizeDates, 2),\n      laterDate_ = _normalizeDates2[0],\n      earlierDate_ = _normalizeDates2[1];\n    var roundingMethod = (0, _getRoundingMethod.getRoundingMethod)(options?.roundingMethod ?? \"round\");\n    var milliseconds = earlierDate_.getTime() - laterDate_.getTime();\n    var minutes = milliseconds / _constants.millisecondsInMinute;\n    var timezoneOffset = (0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(earlierDate_) - (0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(laterDate_);\n\n    // Use DST-normalized difference in minutes for years, months and days;\n    // use regular difference in minutes for hours, minutes and seconds.\n    var dstNormalizedMinutes = (milliseconds - timezoneOffset) / _constants.millisecondsInMinute;\n    var defaultUnit = options?.unit;\n    var unit;\n    if (!defaultUnit) {\n      if (minutes < 1) {\n        unit = \"second\";\n      } else if (minutes < 60) {\n        unit = \"minute\";\n      } else if (minutes < _constants.minutesInDay) {\n        unit = \"hour\";\n      } else if (dstNormalizedMinutes < _constants.minutesInMonth) {\n        unit = \"day\";\n      } else if (dstNormalizedMinutes < _constants.minutesInYear) {\n        unit = \"month\";\n      } else {\n        unit = \"year\";\n      }\n    } else {\n      unit = defaultUnit;\n    }\n\n    // 0 up to 60 seconds\n    if (unit === \"second\") {\n      var seconds = roundingMethod(milliseconds / 1000);\n      return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n      // 1 up to 60 mins\n    } else if (unit === \"minute\") {\n      var roundedMinutes = roundingMethod(minutes);\n      return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n      // 1 up to 24 hours\n    } else if (unit === \"hour\") {\n      var hours = roundingMethod(minutes / 60);\n      return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n      // 1 up to 30 days\n    } else if (unit === \"day\") {\n      var days = roundingMethod(dstNormalizedMinutes / _constants.minutesInDay);\n      return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n      // 1 up to 12 months\n    } else if (unit === \"month\") {\n      var months = roundingMethod(dstNormalizedMinutes / _constants.minutesInMonth);\n      return months === 12 && defaultUnit !== \"month\" ? locale.formatDistance(\"xYears\", 1, localizeOptions) : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n      // 1 year up to max Date\n    } else {\n      var years = roundingMethod(dstNormalizedMinutes / _constants.minutesInYear);\n      return locale.formatDistance(\"xYears\", years, localizeOptions);\n    }\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = formatDistanceStrict;\n});","lineCount":179,"map":[[9,2,1,0],[9,6,1,0,"_defaultLocale"],[9,20,1,0],[9,23,1,0,"require"],[9,30,1,0],[9,31,1,0,"_dependencyMap"],[9,45,1,0],[10,2,2,0],[10,6,2,0,"_defaultOptions"],[10,21,2,0],[10,24,2,0,"require"],[10,31,2,0],[10,32,2,0,"_dependencyMap"],[10,46,2,0],[11,2,3,0],[11,6,3,0,"_getRoundingMethod"],[11,24,3,0],[11,27,3,0,"require"],[11,34,3,0],[11,35,3,0,"_dependencyMap"],[11,49,3,0],[12,2,4,0],[12,6,4,0,"_getTimezoneOffsetInMilliseconds"],[12,38,4,0],[12,41,4,0,"require"],[12,48,4,0],[12,49,4,0,"_dependencyMap"],[12,63,4,0],[13,2,5,0],[13,6,5,0,"_normalizeDates3"],[13,22,5,0],[13,25,5,0,"require"],[13,32,5,0],[13,33,5,0,"_dependencyMap"],[13,47,5,0],[14,2,6,0],[14,6,6,0,"_compareAsc"],[14,17,6,0],[14,20,6,0,"require"],[14,27,6,0],[14,28,6,0,"_dependencyMap"],[14,42,6,0],[15,2,7,0],[15,6,7,0,"_constants"],[15,16,7,0],[15,19,7,0,"require"],[15,26,7,0],[15,27,7,0,"_dependencyMap"],[15,41,7,0],[16,2,14,0],[17,0,15,0],[18,0,16,0],[20,2,18,0],[21,0,19,0],[22,0,20,0],[24,2,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,0,28,0],[31,0,29,0],[32,0,30,0],[33,0,31,0],[34,0,32,0],[35,0,33,0],[36,0,34,0],[37,0,35,0],[38,0,36,0],[39,0,37,0],[40,0,38,0],[41,0,39,0],[42,0,40,0],[43,0,41,0],[44,0,42,0],[45,0,43,0],[46,0,44,0],[47,0,45,0],[48,0,46,0],[49,0,47,0],[50,0,48,0],[51,0,49,0],[52,0,50,0],[53,0,51,0],[54,0,52,0],[55,0,53,0],[56,0,54,0],[57,0,55,0],[58,0,56,0],[59,0,57,0],[60,0,58,0],[61,0,59,0],[62,0,60,0],[63,0,61,0],[64,0,62,0],[65,0,63,0],[66,0,64,0],[67,0,65,0],[68,0,66,0],[69,0,67,0],[70,0,68,0],[71,0,69,0],[72,0,70,0],[73,0,71,0],[74,0,72,0],[75,0,73,0],[76,0,74,0],[77,0,75,0],[78,0,76,0],[79,0,77,0],[80,0,78,0],[81,0,79,0],[82,0,80,0],[83,0,81,0],[84,0,82,0],[85,0,83,0],[86,0,84,0],[87,0,85,0],[88,0,86,0],[89,0,87,0],[90,0,88,0],[91,0,89,0],[92,0,90,0],[93,0,91,0],[94,0,92,0],[95,0,93,0],[96,0,94,0],[97,0,95,0],[98,0,96,0],[99,0,97,0],[100,0,98,0],[102,2,100,7],[102,11,100,16,"formatDistanceStrict"],[102,31,100,36,"formatDistanceStrict"],[102,32,100,37,"laterDate"],[102,41,100,46],[102,43,100,48,"earlierDate"],[102,54,100,59],[102,56,100,61,"options"],[102,63,100,68],[102,65,100,70],[103,4,101,2],[103,8,101,8,"defaultOptions"],[103,22,101,22],[103,25,101,25],[103,29,101,25,"getDefaultOptions"],[103,62,101,42],[103,64,101,43],[103,65,101,44],[104,4,102,2],[104,8,102,8,"locale"],[104,14,102,14],[104,17,102,17,"options"],[104,24,102,24],[104,26,102,26,"locale"],[104,32,102,32],[104,36,102,36,"defaultOptions"],[104,50,102,50],[104,51,102,51,"locale"],[104,57,102,57],[104,61,102,61,"defaultLocale"],[104,89,102,74],[105,4,104,2],[105,8,104,8,"comparison"],[105,18,104,18],[105,21,104,21],[105,25,104,21,"compareAsc"],[105,47,104,31],[105,49,104,32,"laterDate"],[105,58,104,41],[105,60,104,43,"earlierDate"],[105,71,104,54],[105,72,104,55],[106,4,106,2],[106,8,106,6,"isNaN"],[106,13,106,11],[106,14,106,12,"comparison"],[106,24,106,22],[106,25,106,23],[106,27,106,25],[107,6,107,4],[107,12,107,10],[107,16,107,14,"RangeError"],[107,26,107,24],[107,27,107,25],[107,47,107,45],[107,48,107,46],[108,4,108,2],[109,4,110,2],[109,8,110,8,"localizeOptions"],[109,23,110,23],[109,26,110,26,"Object"],[109,32,110,32],[109,33,110,33,"assign"],[109,39,110,39],[109,40,110,40],[109,41,110,41],[109,42,110,42],[109,44,110,44,"options"],[109,51,110,51],[109,53,110,53],[110,6,111,4,"addSuffix"],[110,15,111,13],[110,17,111,15,"options"],[110,24,111,22],[110,26,111,24,"addSuffix"],[110,35,111,33],[111,6,112,4,"comparison"],[111,16,112,14],[111,18,112,16,"comparison"],[112,4,113,2],[112,5,113,3],[112,6,113,4],[113,4,115,2],[113,8,115,2,"_normalizeDates"],[113,23,115,2],[113,26,115,37],[113,30,115,37,"normalizeDates"],[113,61,115,51],[113,63,116,4,"options"],[113,70,116,11],[113,72,116,13,"in"],[113,74,116,15],[113,76,117,4],[113,80,117,8,"comparison"],[113,90,117,18],[113,93,117,21],[113,94,117,22],[113,97,117,25],[113,98,117,26,"earlierDate"],[113,109,117,37],[113,111,117,39,"laterDate"],[113,120,117,48],[113,121,117,49],[113,124,117,52],[113,125,117,53,"laterDate"],[113,134,117,62],[113,136,117,64,"earlierDate"],[113,147,117,75],[113,148,117,76],[113,149,118,2],[113,150,118,3],[114,6,118,3,"_normalizeDates2"],[114,22,118,3],[114,29,118,3,"_slicedToArray2"],[114,44,118,3],[114,45,118,3,"default"],[114,52,118,3],[114,54,118,3,"_normalizeDates"],[114,69,118,3],[115,6,115,9,"laterDate_"],[115,16,115,19],[115,19,115,19,"_normalizeDates2"],[115,35,115,19],[116,6,115,21,"earlierDate_"],[116,18,115,33],[116,21,115,33,"_normalizeDates2"],[116,37,115,33],[117,4,120,2],[117,8,120,8,"roundingMethod"],[117,22,120,22],[117,25,120,25],[117,29,120,25,"getRoundingMethod"],[117,65,120,42],[117,67,120,43,"options"],[117,74,120,50],[117,76,120,52,"roundingMethod"],[117,90,120,66],[117,94,120,70],[117,101,120,77],[117,102,120,78],[118,4,122,2],[118,8,122,8,"milliseconds"],[118,20,122,20],[118,23,122,23,"earlierDate_"],[118,35,122,35],[118,36,122,36,"getTime"],[118,43,122,43],[118,44,122,44],[118,45,122,45],[118,48,122,48,"laterDate_"],[118,58,122,58],[118,59,122,59,"getTime"],[118,66,122,66],[118,67,122,67],[118,68,122,68],[119,4,123,2],[119,8,123,8,"minutes"],[119,15,123,15],[119,18,123,18,"milliseconds"],[119,30,123,30],[119,33,123,33,"millisecondsInMinute"],[119,64,123,53],[120,4,125,2],[120,8,125,8,"timezoneOffset"],[120,22,125,22],[120,25,126,4],[120,29,126,4,"getTimezoneOffsetInMilliseconds"],[120,93,126,35],[120,95,126,36,"earlierDate_"],[120,107,126,48],[120,108,126,49],[120,111,127,4],[120,115,127,4,"getTimezoneOffsetInMilliseconds"],[120,179,127,35],[120,181,127,36,"laterDate_"],[120,191,127,46],[120,192,127,47],[122,4,129,2],[123,4,130,2],[124,4,131,2],[124,8,131,8,"dstNormalizedMinutes"],[124,28,131,28],[124,31,132,4],[124,32,132,5,"milliseconds"],[124,44,132,17],[124,47,132,20,"timezoneOffset"],[124,61,132,34],[124,65,132,38,"millisecondsInMinute"],[124,96,132,58],[125,4,134,2],[125,8,134,8,"defaultUnit"],[125,19,134,19],[125,22,134,22,"options"],[125,29,134,29],[125,31,134,31,"unit"],[125,35,134,35],[126,4,135,2],[126,8,135,6,"unit"],[126,12,135,10],[127,4,136,2],[127,8,136,6],[127,9,136,7,"defaultUnit"],[127,20,136,18],[127,22,136,20],[128,6,137,4],[128,10,137,8,"minutes"],[128,17,137,15],[128,20,137,18],[128,21,137,19],[128,23,137,21],[129,8,138,6,"unit"],[129,12,138,10],[129,15,138,13],[129,23,138,21],[130,6,139,4],[130,7,139,5],[130,13,139,11],[130,17,139,15,"minutes"],[130,24,139,22],[130,27,139,25],[130,29,139,27],[130,31,139,29],[131,8,140,6,"unit"],[131,12,140,10],[131,15,140,13],[131,23,140,21],[132,6,141,4],[132,7,141,5],[132,13,141,11],[132,17,141,15,"minutes"],[132,24,141,22],[132,27,141,25,"minutesInDay"],[132,50,141,37],[132,52,141,39],[133,8,142,6,"unit"],[133,12,142,10],[133,15,142,13],[133,21,142,19],[134,6,143,4],[134,7,143,5],[134,13,143,11],[134,17,143,15,"dstNormalizedMinutes"],[134,37,143,35],[134,40,143,38,"minutesInMonth"],[134,65,143,52],[134,67,143,54],[135,8,144,6,"unit"],[135,12,144,10],[135,15,144,13],[135,20,144,18],[136,6,145,4],[136,7,145,5],[136,13,145,11],[136,17,145,15,"dstNormalizedMinutes"],[136,37,145,35],[136,40,145,38,"minutesInYear"],[136,64,145,51],[136,66,145,53],[137,8,146,6,"unit"],[137,12,146,10],[137,15,146,13],[137,22,146,20],[138,6,147,4],[138,7,147,5],[138,13,147,11],[139,8,148,6,"unit"],[139,12,148,10],[139,15,148,13],[139,21,148,19],[140,6,149,4],[141,4,150,2],[141,5,150,3],[141,11,150,9],[142,6,151,4,"unit"],[142,10,151,8],[142,13,151,11,"defaultUnit"],[142,24,151,22],[143,4,152,2],[145,4,154,2],[146,4,155,2],[146,8,155,6,"unit"],[146,12,155,10],[146,17,155,15],[146,25,155,23],[146,27,155,25],[147,6,156,4],[147,10,156,10,"seconds"],[147,17,156,17],[147,20,156,20,"roundingMethod"],[147,34,156,34],[147,35,156,35,"milliseconds"],[147,47,156,47],[147,50,156,50],[147,54,156,54],[147,55,156,55],[148,6,157,4],[148,13,157,11,"locale"],[148,19,157,17],[148,20,157,18,"formatDistance"],[148,34,157,32],[148,35,157,33],[148,45,157,43],[148,47,157,45,"seconds"],[148,54,157,52],[148,56,157,54,"localizeOptions"],[148,71,157,69],[148,72,157,70],[150,6,159,4],[151,4,160,2],[151,5,160,3],[151,11,160,9],[151,15,160,13,"unit"],[151,19,160,17],[151,24,160,22],[151,32,160,30],[151,34,160,32],[152,6,161,4],[152,10,161,10,"roundedMinutes"],[152,24,161,24],[152,27,161,27,"roundingMethod"],[152,41,161,41],[152,42,161,42,"minutes"],[152,49,161,49],[152,50,161,50],[153,6,162,4],[153,13,162,11,"locale"],[153,19,162,17],[153,20,162,18,"formatDistance"],[153,34,162,32],[153,35,162,33],[153,45,162,43],[153,47,162,45,"roundedMinutes"],[153,61,162,59],[153,63,162,61,"localizeOptions"],[153,78,162,76],[153,79,162,77],[155,6,164,4],[156,4,165,2],[156,5,165,3],[156,11,165,9],[156,15,165,13,"unit"],[156,19,165,17],[156,24,165,22],[156,30,165,28],[156,32,165,30],[157,6,166,4],[157,10,166,10,"hours"],[157,15,166,15],[157,18,166,18,"roundingMethod"],[157,32,166,32],[157,33,166,33,"minutes"],[157,40,166,40],[157,43,166,43],[157,45,166,45],[157,46,166,46],[158,6,167,4],[158,13,167,11,"locale"],[158,19,167,17],[158,20,167,18,"formatDistance"],[158,34,167,32],[158,35,167,33],[158,43,167,41],[158,45,167,43,"hours"],[158,50,167,48],[158,52,167,50,"localizeOptions"],[158,67,167,65],[158,68,167,66],[160,6,169,4],[161,4,170,2],[161,5,170,3],[161,11,170,9],[161,15,170,13,"unit"],[161,19,170,17],[161,24,170,22],[161,29,170,27],[161,31,170,29],[162,6,171,4],[162,10,171,10,"days"],[162,14,171,14],[162,17,171,17,"roundingMethod"],[162,31,171,31],[162,32,171,32,"dstNormalizedMinutes"],[162,52,171,52],[162,55,171,55,"minutesInDay"],[162,78,171,67],[162,79,171,68],[163,6,172,4],[163,13,172,11,"locale"],[163,19,172,17],[163,20,172,18,"formatDistance"],[163,34,172,32],[163,35,172,33],[163,42,172,40],[163,44,172,42,"days"],[163,48,172,46],[163,50,172,48,"localizeOptions"],[163,65,172,63],[163,66,172,64],[165,6,174,4],[166,4,175,2],[166,5,175,3],[166,11,175,9],[166,15,175,13,"unit"],[166,19,175,17],[166,24,175,22],[166,31,175,29],[166,33,175,31],[167,6,176,4],[167,10,176,10,"months"],[167,16,176,16],[167,19,176,19,"roundingMethod"],[167,33,176,33],[167,34,176,34,"dstNormalizedMinutes"],[167,54,176,54],[167,57,176,57,"minutesInMonth"],[167,82,176,71],[167,83,176,72],[168,6,177,4],[168,13,177,11,"months"],[168,19,177,17],[168,24,177,22],[168,26,177,24],[168,30,177,28,"defaultUnit"],[168,41,177,39],[168,46,177,44],[168,53,177,51],[168,56,178,8,"locale"],[168,62,178,14],[168,63,178,15,"formatDistance"],[168,77,178,29],[168,78,178,30],[168,86,178,38],[168,88,178,40],[168,89,178,41],[168,91,178,43,"localizeOptions"],[168,106,178,58],[168,107,178,59],[168,110,179,8,"locale"],[168,116,179,14],[168,117,179,15,"formatDistance"],[168,131,179,29],[168,132,179,30],[168,141,179,39],[168,143,179,41,"months"],[168,149,179,47],[168,151,179,49,"localizeOptions"],[168,166,179,64],[168,167,179,65],[170,6,181,4],[171,4,182,2],[171,5,182,3],[171,11,182,9],[172,6,183,4],[172,10,183,10,"years"],[172,15,183,15],[172,18,183,18,"roundingMethod"],[172,32,183,32],[172,33,183,33,"dstNormalizedMinutes"],[172,53,183,53],[172,56,183,56,"minutesInYear"],[172,80,183,69],[172,81,183,70],[173,6,184,4],[173,13,184,11,"locale"],[173,19,184,17],[173,20,184,18,"formatDistance"],[173,34,184,32],[173,35,184,33],[173,43,184,41],[173,45,184,43,"years"],[173,50,184,48],[173,52,184,50,"localizeOptions"],[173,67,184,65],[173,68,184,66],[174,4,185,2],[175,2,186,0],[177,2,188,0],[178,2,188,0],[178,6,188,0,"_default"],[178,14,188,0],[178,17,188,0,"exports"],[178,24,188,0],[178,25,188,0,"default"],[178,32,188,0],[178,35,189,15,"formatDistanceStrict"],[178,55,189,35],[179,0,189,35],[179,3]],"functionMap":{"names":["<global>","formatDistanceStrict"],"mappings":"AAA;OCmG;CDsF"}},"type":"js/module"}]}