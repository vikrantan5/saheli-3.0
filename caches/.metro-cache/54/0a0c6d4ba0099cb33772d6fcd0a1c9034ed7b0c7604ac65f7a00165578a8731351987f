{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"RgnQ5fGQDzGiH1jMCpSamjCAQN4=","exportNames":["*"]}},{"name":"./addWeeks.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":41,"index":106}}],"key":"WbXWlJ47iqg6m+zxE/w0za675g4=","exportNames":["*"]}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":107},"end":{"line":3,"column":51,"index":158}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}},{"name":"./startOfWeek.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":159},"end":{"line":4,"column":47,"index":206}}],"key":"P3QLf1gnhZwOwCLzrccpsspoyVY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.eachWeekOfInterval = eachWeekOfInterval;\n  var _normalizeInterval2 = require(_dependencyMap[0], \"./_lib/normalizeInterval.js\");\n  var _addWeeks = require(_dependencyMap[1], \"./addWeeks.js\");\n  var _constructFrom = require(_dependencyMap[2], \"./constructFrom.js\");\n  var _startOfWeek = require(_dependencyMap[3], \"./startOfWeek.js\");\n  /**\n   * The {@link eachWeekOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachWeekOfInterval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the interval start date,\n   * then the end interval date. If a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name eachWeekOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of weeks within the specified time interval.\n   *\n   * @description\n   * Return the array of weeks within the specified time interval.\n   *\n   * @param interval - The interval.\n   * @param options - An object with options.\n   *\n   * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\n   *\n   * @example\n   * // Each week within interval 6 October 2014 - 23 November 2014:\n   * const result = eachWeekOfInterval({\n   *   start: new Date(2014, 9, 6),\n   *   end: new Date(2014, 10, 23)\n   * })\n   * //=> [\n   * //   Sun Oct 05 2014 00:00:00,\n   * //   Sun Oct 12 2014 00:00:00,\n   * //   Sun Oct 19 2014 00:00:00,\n   * //   Sun Oct 26 2014 00:00:00,\n   * //   Sun Nov 02 2014 00:00:00,\n   * //   Sun Nov 09 2014 00:00:00,\n   * //   Sun Nov 16 2014 00:00:00,\n   * //   Sun Nov 23 2014 00:00:00\n   * // ]\n   */\n  function eachWeekOfInterval(interval, options) {\n    var _normalizeInterval = (0, _normalizeInterval2.normalizeInterval)(options?.in, interval),\n      start = _normalizeInterval.start,\n      end = _normalizeInterval.end;\n    var reversed = +start > +end;\n    var startDateWeek = reversed ? (0, _startOfWeek.startOfWeek)(end, options) : (0, _startOfWeek.startOfWeek)(start, options);\n    var endDateWeek = reversed ? (0, _startOfWeek.startOfWeek)(start, options) : (0, _startOfWeek.startOfWeek)(end, options);\n    startDateWeek.setHours(15);\n    endDateWeek.setHours(15);\n    var endTime = +endDateWeek.getTime();\n    var currentDate = startDateWeek;\n    var step = options?.step ?? 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    var dates = [];\n    while (+currentDate <= endTime) {\n      currentDate.setHours(0);\n      dates.push((0, _constructFrom.constructFrom)(start, currentDate));\n      currentDate = (0, _addWeeks.addWeeks)(currentDate, step);\n      currentDate.setHours(15);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = eachWeekOfInterval;\n});","lineCount":80,"map":[[7,2,1,0],[7,6,1,0,"_normalizeInterval2"],[7,25,1,0],[7,28,1,0,"require"],[7,35,1,0],[7,36,1,0,"_dependencyMap"],[7,50,1,0],[8,2,2,0],[8,6,2,0,"_addWeeks"],[8,15,2,0],[8,18,2,0,"require"],[8,25,2,0],[8,26,2,0,"_dependencyMap"],[8,40,2,0],[9,2,3,0],[9,6,3,0,"_constructFrom"],[9,20,3,0],[9,23,3,0,"require"],[9,30,3,0],[9,31,3,0,"_dependencyMap"],[9,45,3,0],[10,2,4,0],[10,6,4,0,"_startOfWeek"],[10,18,4,0],[10,21,4,0,"require"],[10,28,4,0],[10,29,4,0,"_dependencyMap"],[10,43,4,0],[11,2,6,0],[12,0,7,0],[13,0,8,0],[15,2,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[21,2,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,2,46,7],[51,11,46,16,"eachWeekOfInterval"],[51,29,46,34,"eachWeekOfInterval"],[51,30,46,35,"interval"],[51,38,46,43],[51,40,46,45,"options"],[51,47,46,52],[51,49,46,54],[52,4,47,2],[52,8,47,2,"_normalizeInterval"],[52,26,47,2],[52,29,47,25],[52,33,47,25,"normalizeInterval"],[52,70,47,42],[52,72,47,43,"options"],[52,79,47,50],[52,81,47,52,"in"],[52,83,47,54],[52,85,47,56,"interval"],[52,93,47,64],[52,94,47,65],[53,6,47,10,"start"],[53,11,47,15],[53,14,47,15,"_normalizeInterval"],[53,32,47,15],[53,33,47,10,"start"],[53,38,47,15],[54,6,47,17,"end"],[54,9,47,20],[54,12,47,20,"_normalizeInterval"],[54,30,47,20],[54,31,47,17,"end"],[54,34,47,20],[55,4,49,2],[55,8,49,6,"reversed"],[55,16,49,14],[55,19,49,17],[55,20,49,18,"start"],[55,25,49,23],[55,28,49,26],[55,29,49,27,"end"],[55,32,49,30],[56,4,50,2],[56,8,50,8,"startDateWeek"],[56,21,50,21],[56,24,50,24,"reversed"],[56,32,50,32],[56,35,51,6],[56,39,51,6,"startOfWeek"],[56,63,51,17],[56,65,51,18,"end"],[56,68,51,21],[56,70,51,23,"options"],[56,77,51,30],[56,78,51,31],[56,81,52,6],[56,85,52,6,"startOfWeek"],[56,109,52,17],[56,111,52,18,"start"],[56,116,52,23],[56,118,52,25,"options"],[56,125,52,32],[56,126,52,33],[57,4,53,2],[57,8,53,8,"endDateWeek"],[57,19,53,19],[57,22,53,22,"reversed"],[57,30,53,30],[57,33,54,6],[57,37,54,6,"startOfWeek"],[57,61,54,17],[57,63,54,18,"start"],[57,68,54,23],[57,70,54,25,"options"],[57,77,54,32],[57,78,54,33],[57,81,55,6],[57,85,55,6,"startOfWeek"],[57,109,55,17],[57,111,55,18,"end"],[57,114,55,21],[57,116,55,23,"options"],[57,123,55,30],[57,124,55,31],[58,4,57,2,"startDateWeek"],[58,17,57,15],[58,18,57,16,"setHours"],[58,26,57,24],[58,27,57,25],[58,29,57,27],[58,30,57,28],[59,4,58,2,"endDateWeek"],[59,15,58,13],[59,16,58,14,"setHours"],[59,24,58,22],[59,25,58,23],[59,27,58,25],[59,28,58,26],[60,4,60,2],[60,8,60,8,"endTime"],[60,15,60,15],[60,18,60,18],[60,19,60,19,"endDateWeek"],[60,30,60,30],[60,31,60,31,"getTime"],[60,38,60,38],[60,39,60,39],[60,40,60,40],[61,4,61,2],[61,8,61,6,"currentDate"],[61,19,61,17],[61,22,61,20,"startDateWeek"],[61,35,61,33],[62,4,63,2],[62,8,63,6,"step"],[62,12,63,10],[62,15,63,13,"options"],[62,22,63,20],[62,24,63,22,"step"],[62,28,63,26],[62,32,63,30],[62,33,63,31],[63,4,64,2],[63,8,64,6],[63,9,64,7,"step"],[63,13,64,11],[63,15,64,13],[63,22,64,20],[63,24,64,22],[64,4,65,2],[64,8,65,6,"step"],[64,12,65,10],[64,15,65,13],[64,16,65,14],[64,18,65,16],[65,6,66,4,"step"],[65,10,66,8],[65,13,66,11],[65,14,66,12,"step"],[65,18,66,16],[66,6,67,4,"reversed"],[66,14,67,12],[66,17,67,15],[66,18,67,16,"reversed"],[66,26,67,24],[67,4,68,2],[68,4,70,2],[68,8,70,8,"dates"],[68,13,70,13],[68,16,70,16],[68,18,70,18],[69,4,72,2],[69,11,72,9],[69,12,72,10,"currentDate"],[69,23,72,21],[69,27,72,25,"endTime"],[69,34,72,32],[69,36,72,34],[70,6,73,4,"currentDate"],[70,17,73,15],[70,18,73,16,"setHours"],[70,26,73,24],[70,27,73,25],[70,28,73,26],[70,29,73,27],[71,6,74,4,"dates"],[71,11,74,9],[71,12,74,10,"push"],[71,16,74,14],[71,17,74,15],[71,21,74,15,"constructFrom"],[71,49,74,28],[71,51,74,29,"start"],[71,56,74,34],[71,58,74,36,"currentDate"],[71,69,74,47],[71,70,74,48],[71,71,74,49],[72,6,75,4,"currentDate"],[72,17,75,15],[72,20,75,18],[72,24,75,18,"addWeeks"],[72,42,75,26],[72,44,75,27,"currentDate"],[72,55,75,38],[72,57,75,40,"step"],[72,61,75,44],[72,62,75,45],[73,6,76,4,"currentDate"],[73,17,76,15],[73,18,76,16,"setHours"],[73,26,76,24],[73,27,76,25],[73,29,76,27],[73,30,76,28],[74,4,77,2],[75,4,79,2],[75,11,79,9,"reversed"],[75,19,79,17],[75,22,79,20,"dates"],[75,27,79,25],[75,28,79,26,"reverse"],[75,35,79,33],[75,36,79,34],[75,37,79,35],[75,40,79,38,"dates"],[75,45,79,43],[76,2,80,0],[78,2,82,0],[79,2,82,0],[79,6,82,0,"_default"],[79,14,82,0],[79,17,82,0,"exports"],[79,24,82,0],[79,25,82,0,"default"],[79,32,82,0],[79,35,83,15,"eachWeekOfInterval"],[79,53,83,33],[80,0,83,33],[80,3]],"functionMap":{"names":["<global>","eachWeekOfInterval"],"mappings":"AAA;OC6C;CDkC"}},"type":"js/module"}]}