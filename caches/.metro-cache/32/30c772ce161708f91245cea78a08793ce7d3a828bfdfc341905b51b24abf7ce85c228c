{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"crypto-js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"TLjsXnAWOlf/gpObabse3HZX8VY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.hashData = exports.encryptLocation = exports.encryptData = exports.decryptLocation = exports.decryptData = void 0;\n  var _cryptoJs = _interopRequireDefault(require(_dependencyMap[1], \"crypto-js\"));\n  // Encryption key - In production, this should be stored securely\n  // For SOS messages, we use a predefined key for emergency access\n  var ENCRYPTION_KEY = 'SAHELI_SOS_SECURE_KEY_2025';\n\n  /**\r\n   * Encrypt sensitive data\r\n   * @param {string} data - Data to encrypt\r\n   * @returns {string} Encrypted data\r\n   */\n  var encryptData = data => {\n    try {\n      if (!data) return '';\n      var encrypted = _cryptoJs.default.AES.encrypt(JSON.stringify(data), ENCRYPTION_KEY).toString();\n      return encrypted;\n    } catch (error) {\n      console.error('Encryption error:', error);\n      throw new Error('Failed to encrypt data');\n    }\n  };\n\n  /**\r\n   * Decrypt sensitive data\r\n   * @param {string} encryptedData - Encrypted data\r\n   * @returns {Object} Decrypted data\r\n   */\n  exports.encryptData = encryptData;\n  var decryptData = encryptedData => {\n    try {\n      if (!encryptedData) return null;\n      var decrypted = _cryptoJs.default.AES.decrypt(encryptedData, ENCRYPTION_KEY).toString(_cryptoJs.default.enc.Utf8);\n      return JSON.parse(decrypted);\n    } catch (error) {\n      console.error('Decryption error:', error);\n      throw new Error('Failed to decrypt data');\n    }\n  };\n\n  /**\r\n   * Hash sensitive data (one-way)\r\n   * @param {string} data - Data to hash\r\n   * @returns {string} Hashed data\r\n   */\n  exports.decryptData = decryptData;\n  var hashData = data => {\n    try {\n      if (!data) return '';\n      var hashed = _cryptoJs.default.SHA256(data).toString();\n      return hashed;\n    } catch (error) {\n      console.error('Hashing error:', error);\n      throw new Error('Failed to hash data');\n    }\n  };\n\n  /**\r\n   * Encrypt location data for SMS\r\n   * @param {Object} location - Location object with latitude and longitude\r\n   * @returns {string} Encrypted location string\r\n   */\n  exports.hashData = hashData;\n  var encryptLocation = location => {\n    try {\n      if (!location || !location.latitude || !location.longitude) {\n        return '';\n      }\n      var locationData = {\n        lat: location.latitude,\n        lng: location.longitude,\n        timestamp: location.timestamp || new Date().toISOString()\n      };\n      return encryptData(locationData);\n    } catch (error) {\n      console.error('Location encryption error:', error);\n      return '';\n    }\n  };\n\n  /**\r\n   * Decrypt location data\r\n   * @param {string} encryptedLocation - Encrypted location string\r\n   * @returns {Object|null} Location object\r\n   */\n  exports.encryptLocation = encryptLocation;\n  var decryptLocation = encryptedLocation => {\n    try {\n      if (!encryptedLocation) return null;\n      return decryptData(encryptedLocation);\n    } catch (error) {\n      console.error('Location decryption error:', error);\n      return null;\n    }\n  };\n  exports.decryptLocation = decryptLocation;\n});","lineCount":101,"map":[[7,2,1,0],[7,6,1,0,"_cryptoJs"],[7,15,1,0],[7,18,1,0,"_interopRequireDefault"],[7,40,1,0],[7,41,1,0,"require"],[7,48,1,0],[7,49,1,0,"_dependencyMap"],[7,63,1,0],[8,2,3,0],[9,2,4,0],[10,2,5,0],[10,6,5,6,"ENCRYPTION_KEY"],[10,20,5,20],[10,23,5,23],[10,51,5,51],[12,2,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,2,12,7],[17,6,12,13,"encryptData"],[17,17,12,24],[17,20,12,28,"data"],[17,24,12,32],[17,28,12,37],[18,4,13,2],[18,8,13,6],[19,6,14,4],[19,10,14,8],[19,11,14,9,"data"],[19,15,14,13],[19,17,14,15],[19,24,14,22],[19,26,14,24],[20,6,16,4],[20,10,16,10,"encrypted"],[20,19,16,19],[20,22,16,22,"CryptoJS"],[20,39,16,30],[20,40,16,31,"AES"],[20,43,16,34],[20,44,16,35,"encrypt"],[20,51,16,42],[20,52,17,6,"JSON"],[20,56,17,10],[20,57,17,11,"stringify"],[20,66,17,20],[20,67,17,21,"data"],[20,71,17,25],[20,72,17,26],[20,74,18,6,"ENCRYPTION_KEY"],[20,88,19,4],[20,89,19,5],[20,90,19,6,"toString"],[20,98,19,14],[20,99,19,15],[20,100,19,16],[21,6,21,4],[21,13,21,11,"encrypted"],[21,22,21,20],[22,4,22,2],[22,5,22,3],[22,6,22,4],[22,13,22,11,"error"],[22,18,22,16],[22,20,22,18],[23,6,23,4,"console"],[23,13,23,11],[23,14,23,12,"error"],[23,19,23,17],[23,20,23,18],[23,39,23,37],[23,41,23,39,"error"],[23,46,23,44],[23,47,23,45],[24,6,24,4],[24,12,24,10],[24,16,24,14,"Error"],[24,21,24,19],[24,22,24,20],[24,46,24,44],[24,47,24,45],[25,4,25,2],[26,2,26,0],[26,3,26,1],[28,2,28,0],[29,0,29,0],[30,0,30,0],[31,0,31,0],[32,0,32,0],[33,2,28,0,"exports"],[33,9,28,0],[33,10,28,0,"encryptData"],[33,21,28,0],[33,24,28,0,"encryptData"],[33,35,28,0],[34,2,33,7],[34,6,33,13,"decryptData"],[34,17,33,24],[34,20,33,28,"encryptedData"],[34,33,33,41],[34,37,33,46],[35,4,34,2],[35,8,34,6],[36,6,35,4],[36,10,35,8],[36,11,35,9,"encryptedData"],[36,24,35,22],[36,26,35,24],[36,33,35,31],[36,37,35,35],[37,6,37,4],[37,10,37,10,"decrypted"],[37,19,37,19],[37,22,37,22,"CryptoJS"],[37,39,37,30],[37,40,37,31,"AES"],[37,43,37,34],[37,44,37,35,"decrypt"],[37,51,37,42],[37,52,38,6,"encryptedData"],[37,65,38,19],[37,67,39,6,"ENCRYPTION_KEY"],[37,81,40,4],[37,82,40,5],[37,83,40,6,"toString"],[37,91,40,14],[37,92,40,15,"CryptoJS"],[37,109,40,23],[37,110,40,24,"enc"],[37,113,40,27],[37,114,40,28,"Utf8"],[37,118,40,32],[37,119,40,33],[38,6,42,4],[38,13,42,11,"JSON"],[38,17,42,15],[38,18,42,16,"parse"],[38,23,42,21],[38,24,42,22,"decrypted"],[38,33,42,31],[38,34,42,32],[39,4,43,2],[39,5,43,3],[39,6,43,4],[39,13,43,11,"error"],[39,18,43,16],[39,20,43,18],[40,6,44,4,"console"],[40,13,44,11],[40,14,44,12,"error"],[40,19,44,17],[40,20,44,18],[40,39,44,37],[40,41,44,39,"error"],[40,46,44,44],[40,47,44,45],[41,6,45,4],[41,12,45,10],[41,16,45,14,"Error"],[41,21,45,19],[41,22,45,20],[41,46,45,44],[41,47,45,45],[42,4,46,2],[43,2,47,0],[43,3,47,1],[45,2,49,0],[46,0,50,0],[47,0,51,0],[48,0,52,0],[49,0,53,0],[50,2,49,0,"exports"],[50,9,49,0],[50,10,49,0,"decryptData"],[50,21,49,0],[50,24,49,0,"decryptData"],[50,35,49,0],[51,2,54,7],[51,6,54,13,"hashData"],[51,14,54,21],[51,17,54,25,"data"],[51,21,54,29],[51,25,54,34],[52,4,55,2],[52,8,55,6],[53,6,56,4],[53,10,56,8],[53,11,56,9,"data"],[53,15,56,13],[53,17,56,15],[53,24,56,22],[53,26,56,24],[54,6,58,4],[54,10,58,10,"hashed"],[54,16,58,16],[54,19,58,19,"CryptoJS"],[54,36,58,27],[54,37,58,28,"SHA256"],[54,43,58,34],[54,44,58,35,"data"],[54,48,58,39],[54,49,58,40],[54,50,58,41,"toString"],[54,58,58,49],[54,59,58,50],[54,60,58,51],[55,6,59,4],[55,13,59,11,"hashed"],[55,19,59,17],[56,4,60,2],[56,5,60,3],[56,6,60,4],[56,13,60,11,"error"],[56,18,60,16],[56,20,60,18],[57,6,61,4,"console"],[57,13,61,11],[57,14,61,12,"error"],[57,19,61,17],[57,20,61,18],[57,36,61,34],[57,38,61,36,"error"],[57,43,61,41],[57,44,61,42],[58,6,62,4],[58,12,62,10],[58,16,62,14,"Error"],[58,21,62,19],[58,22,62,20],[58,43,62,41],[58,44,62,42],[59,4,63,2],[60,2,64,0],[60,3,64,1],[62,2,66,0],[63,0,67,0],[64,0,68,0],[65,0,69,0],[66,0,70,0],[67,2,66,0,"exports"],[67,9,66,0],[67,10,66,0,"hashData"],[67,18,66,0],[67,21,66,0,"hashData"],[67,29,66,0],[68,2,71,7],[68,6,71,13,"encryptLocation"],[68,21,71,28],[68,24,71,32,"location"],[68,32,71,40],[68,36,71,45],[69,4,72,2],[69,8,72,6],[70,6,73,4],[70,10,73,8],[70,11,73,9,"location"],[70,19,73,17],[70,23,73,21],[70,24,73,22,"location"],[70,32,73,30],[70,33,73,31,"latitude"],[70,41,73,39],[70,45,73,43],[70,46,73,44,"location"],[70,54,73,52],[70,55,73,53,"longitude"],[70,64,73,62],[70,66,73,64],[71,8,74,6],[71,15,74,13],[71,17,74,15],[72,6,75,4],[73,6,77,4],[73,10,77,10,"locationData"],[73,22,77,22],[73,25,77,25],[74,8,78,6,"lat"],[74,11,78,9],[74,13,78,11,"location"],[74,21,78,19],[74,22,78,20,"latitude"],[74,30,78,28],[75,8,79,6,"lng"],[75,11,79,9],[75,13,79,11,"location"],[75,21,79,19],[75,22,79,20,"longitude"],[75,31,79,29],[76,8,80,6,"timestamp"],[76,17,80,15],[76,19,80,17,"location"],[76,27,80,25],[76,28,80,26,"timestamp"],[76,37,80,35],[76,41,80,39],[76,45,80,43,"Date"],[76,49,80,47],[76,50,80,48],[76,51,80,49],[76,52,80,50,"toISOString"],[76,63,80,61],[76,64,80,62],[77,6,81,4],[77,7,81,5],[78,6,83,4],[78,13,83,11,"encryptData"],[78,24,83,22],[78,25,83,23,"locationData"],[78,37,83,35],[78,38,83,36],[79,4,84,2],[79,5,84,3],[79,6,84,4],[79,13,84,11,"error"],[79,18,84,16],[79,20,84,18],[80,6,85,4,"console"],[80,13,85,11],[80,14,85,12,"error"],[80,19,85,17],[80,20,85,18],[80,48,85,46],[80,50,85,48,"error"],[80,55,85,53],[80,56,85,54],[81,6,86,4],[81,13,86,11],[81,15,86,13],[82,4,87,2],[83,2,88,0],[83,3,88,1],[85,2,90,0],[86,0,91,0],[87,0,92,0],[88,0,93,0],[89,0,94,0],[90,2,90,0,"exports"],[90,9,90,0],[90,10,90,0,"encryptLocation"],[90,25,90,0],[90,28,90,0,"encryptLocation"],[90,43,90,0],[91,2,95,7],[91,6,95,13,"decryptLocation"],[91,21,95,28],[91,24,95,32,"encryptedLocation"],[91,41,95,49],[91,45,95,54],[92,4,96,2],[92,8,96,6],[93,6,97,4],[93,10,97,8],[93,11,97,9,"encryptedLocation"],[93,28,97,26],[93,30,97,28],[93,37,97,35],[93,41,97,39],[94,6,98,4],[94,13,98,11,"decryptData"],[94,24,98,22],[94,25,98,23,"encryptedLocation"],[94,42,98,40],[94,43,98,41],[95,4,99,2],[95,5,99,3],[95,6,99,4],[95,13,99,11,"error"],[95,18,99,16],[95,20,99,18],[96,6,100,4,"console"],[96,13,100,11],[96,14,100,12,"error"],[96,19,100,17],[96,20,100,18],[96,48,100,46],[96,50,100,48,"error"],[96,55,100,53],[96,56,100,54],[97,6,101,4],[97,13,101,11],[97,17,101,15],[98,4,102,2],[99,2,103,0],[99,3,103,1],[100,2,103,2,"exports"],[100,9,103,2],[100,10,103,2,"decryptLocation"],[100,25,103,2],[100,28,103,2,"decryptLocation"],[100,43,103,2],[101,0,103,2],[101,3]],"functionMap":{"names":["<global>","encryptData","decryptData","hashData","encryptLocation","decryptLocation"],"mappings":"AAA;2BCW;CDc;2BEO;CFc;wBGO;CHU;+BIO;CJiB;+BKO;CLQ"}},"type":"js/module"}]}