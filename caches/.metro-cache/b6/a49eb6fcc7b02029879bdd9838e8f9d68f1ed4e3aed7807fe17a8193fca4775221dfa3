{"dependencies":[{"name":"./core","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":37,"index":116},"end":{"line":4,"column":54,"index":133}}],"key":"FXN3sf/EjRB4E2rwdgFcvRpWg7U=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  ;\n  (function (root, factory) {\n    if (typeof exports === \"object\") {\n      // CommonJS\n      module.exports = exports = factory(require(_dependencyMap[0], \"./core\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      // AMD\n      define([\"./core\"], factory);\n    } else {\n      // Global (browser)\n      factory(root.CryptoJS);\n    }\n  })(this, function (CryptoJS) {\n    (function () {\n      // Shortcuts\n      var C = CryptoJS;\n      var C_lib = C.lib;\n      var Base = C_lib.Base;\n      var C_enc = C.enc;\n      var Utf8 = C_enc.Utf8;\n      var C_algo = C.algo;\n\n      /**\n       * HMAC algorithm.\n       */\n      var HMAC = C_algo.HMAC = Base.extend({\n        /**\n         * Initializes a newly created HMAC.\n         *\n         * @param {Hasher} hasher The hash algorithm to use.\n         * @param {WordArray|string} key The secret key.\n         *\n         * @example\n         *\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n         */\n        init: function (hasher, key) {\n          // Init hasher\n          hasher = this._hasher = new hasher.init();\n\n          // Convert string to WordArray, else assume WordArray already\n          if (typeof key == 'string') {\n            key = Utf8.parse(key);\n          }\n\n          // Shortcuts\n          var hasherBlockSize = hasher.blockSize;\n          var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n          // Allow arbitrary length keys\n          if (key.sigBytes > hasherBlockSizeBytes) {\n            key = hasher.finalize(key);\n          }\n\n          // Clamp excess bits\n          key.clamp();\n\n          // Clone key for inner and outer pads\n          var oKey = this._oKey = key.clone();\n          var iKey = this._iKey = key.clone();\n\n          // Shortcuts\n          var oKeyWords = oKey.words;\n          var iKeyWords = iKey.words;\n\n          // XOR keys with pad constants\n          for (var i = 0; i < hasherBlockSize; i++) {\n            oKeyWords[i] ^= 0x5c5c5c5c;\n            iKeyWords[i] ^= 0x36363636;\n          }\n          oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n          // Set initial values\n          this.reset();\n        },\n        /**\n         * Resets this HMAC to its initial state.\n         *\n         * @example\n         *\n         *     hmacHasher.reset();\n         */\n        reset: function () {\n          // Shortcut\n          var hasher = this._hasher;\n\n          // Reset\n          hasher.reset();\n          hasher.update(this._iKey);\n        },\n        /**\n         * Updates this HMAC with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {HMAC} This HMAC instance.\n         *\n         * @example\n         *\n         *     hmacHasher.update('message');\n         *     hmacHasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n          this._hasher.update(messageUpdate);\n\n          // Chainable\n          return this;\n        },\n        /**\n         * Finalizes the HMAC computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The HMAC.\n         *\n         * @example\n         *\n         *     var hmac = hmacHasher.finalize();\n         *     var hmac = hmacHasher.finalize('message');\n         *     var hmac = hmacHasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n          // Shortcut\n          var hasher = this._hasher;\n\n          // Compute HMAC\n          var innerHash = hasher.finalize(messageUpdate);\n          hasher.reset();\n          var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n          return hmac;\n        }\n      });\n    })();\n  });\n});","lineCount":137,"map":[[2,2,1,0],[3,2,1,2],[3,13,1,12,"root"],[3,17,1,16],[3,19,1,18,"factory"],[3,26,1,25],[3,28,1,27],[4,4,2,1],[4,8,2,5],[4,15,2,12,"exports"],[4,22,2,19],[4,27,2,24],[4,35,2,32],[4,37,2,34],[5,6,3,2],[6,6,4,2,"module"],[6,12,4,8],[6,13,4,9,"exports"],[6,20,4,16],[6,23,4,19,"exports"],[6,30,4,26],[6,33,4,29,"factory"],[6,40,4,36],[6,41,4,37,"require"],[6,48,4,44],[6,49,4,44,"_dependencyMap"],[6,63,4,44],[6,76,4,53],[6,77,4,54],[6,78,4,55],[7,4,5,1],[7,5,5,2],[7,11,6,6],[7,15,6,10],[7,22,6,17,"define"],[7,28,6,23],[7,33,6,28],[7,43,6,38],[7,47,6,42,"define"],[7,53,6,48],[7,54,6,49,"amd"],[7,57,6,52],[7,59,6,54],[8,6,7,2],[9,6,8,2,"define"],[9,12,8,8],[9,13,8,9],[9,14,8,10],[9,22,8,18],[9,23,8,19],[9,25,8,21,"factory"],[9,32,8,28],[9,33,8,29],[10,4,9,1],[10,5,9,2],[10,11,10,6],[11,6,11,2],[12,6,12,2,"factory"],[12,13,12,9],[12,14,12,10,"root"],[12,18,12,14],[12,19,12,15,"CryptoJS"],[12,27,12,23],[12,28,12,24],[13,4,13,1],[14,2,14,0],[14,3,14,1],[14,5,14,2],[14,9,14,6],[14,11,14,8],[14,21,14,18,"CryptoJS"],[14,29,14,26],[14,31,14,28],[15,4,16,2],[15,17,16,14],[16,6,17,5],[17,6,18,5],[17,10,18,9,"C"],[17,11,18,10],[17,14,18,13,"CryptoJS"],[17,22,18,21],[18,6,19,5],[18,10,19,9,"C_lib"],[18,15,19,14],[18,18,19,17,"C"],[18,19,19,18],[18,20,19,19,"lib"],[18,23,19,22],[19,6,20,5],[19,10,20,9,"Base"],[19,14,20,13],[19,17,20,16,"C_lib"],[19,22,20,21],[19,23,20,22,"Base"],[19,27,20,26],[20,6,21,5],[20,10,21,9,"C_enc"],[20,15,21,14],[20,18,21,17,"C"],[20,19,21,18],[20,20,21,19,"enc"],[20,23,21,22],[21,6,22,5],[21,10,22,9,"Utf8"],[21,14,22,13],[21,17,22,16,"C_enc"],[21,22,22,21],[21,23,22,22,"Utf8"],[21,27,22,26],[22,6,23,5],[22,10,23,9,"C_algo"],[22,16,23,15],[22,19,23,18,"C"],[22,20,23,19],[22,21,23,20,"algo"],[22,25,23,24],[24,6,25,5],[25,0,26,0],[26,0,27,0],[27,6,28,5],[27,10,28,9,"HMAC"],[27,14,28,13],[27,17,28,16,"C_algo"],[27,23,28,22],[27,24,28,23,"HMAC"],[27,28,28,27],[27,31,28,30,"Base"],[27,35,28,34],[27,36,28,35,"extend"],[27,42,28,41],[27,43,28,42],[28,8,29,9],[29,0,30,0],[30,0,31,0],[31,0,32,0],[32,0,33,0],[33,0,34,0],[34,0,35,0],[35,0,36,0],[36,0,37,0],[37,0,38,0],[38,8,39,9,"init"],[38,12,39,13],[38,14,39,15],[38,23,39,15,"init"],[38,24,39,25,"hasher"],[38,30,39,31],[38,32,39,33,"key"],[38,35,39,36],[38,37,39,38],[39,10,40,13],[40,10,41,13,"hasher"],[40,16,41,19],[40,19,41,22],[40,23,41,26],[40,24,41,27,"_hasher"],[40,31,41,34],[40,34,41,37],[40,38,41,41,"hasher"],[40,44,41,47],[40,45,41,48,"init"],[40,49,41,52],[40,50,41,53],[40,51,41,54],[42,10,43,13],[43,10,44,13],[43,14,44,17],[43,21,44,24,"key"],[43,24,44,27],[43,28,44,31],[43,36,44,39],[43,38,44,41],[44,12,45,17,"key"],[44,15,45,20],[44,18,45,23,"Utf8"],[44,22,45,27],[44,23,45,28,"parse"],[44,28,45,33],[44,29,45,34,"key"],[44,32,45,37],[44,33,45,38],[45,10,46,13],[47,10,48,13],[48,10,49,13],[48,14,49,17,"hasherBlockSize"],[48,29,49,32],[48,32,49,35,"hasher"],[48,38,49,41],[48,39,49,42,"blockSize"],[48,48,49,51],[49,10,50,13],[49,14,50,17,"hasherBlockSizeBytes"],[49,34,50,37],[49,37,50,40,"hasherBlockSize"],[49,52,50,55],[49,55,50,58],[49,56,50,59],[51,10,52,13],[52,10,53,13],[52,14,53,17,"key"],[52,17,53,20],[52,18,53,21,"sigBytes"],[52,26,53,29],[52,29,53,32,"hasherBlockSizeBytes"],[52,49,53,52],[52,51,53,54],[53,12,54,17,"key"],[53,15,54,20],[53,18,54,23,"hasher"],[53,24,54,29],[53,25,54,30,"finalize"],[53,33,54,38],[53,34,54,39,"key"],[53,37,54,42],[53,38,54,43],[54,10,55,13],[56,10,57,13],[57,10,58,13,"key"],[57,13,58,16],[57,14,58,17,"clamp"],[57,19,58,22],[57,20,58,23],[57,21,58,24],[59,10,60,13],[60,10,61,13],[60,14,61,17,"oKey"],[60,18,61,21],[60,21,61,24],[60,25,61,28],[60,26,61,29,"_oKey"],[60,31,61,34],[60,34,61,37,"key"],[60,37,61,40],[60,38,61,41,"clone"],[60,43,61,46],[60,44,61,47],[60,45,61,48],[61,10,62,13],[61,14,62,17,"iKey"],[61,18,62,21],[61,21,62,24],[61,25,62,28],[61,26,62,29,"_iKey"],[61,31,62,34],[61,34,62,37,"key"],[61,37,62,40],[61,38,62,41,"clone"],[61,43,62,46],[61,44,62,47],[61,45,62,48],[63,10,64,13],[64,10,65,13],[64,14,65,17,"oKeyWords"],[64,23,65,26],[64,26,65,29,"oKey"],[64,30,65,33],[64,31,65,34,"words"],[64,36,65,39],[65,10,66,13],[65,14,66,17,"iKeyWords"],[65,23,66,26],[65,26,66,29,"iKey"],[65,30,66,33],[65,31,66,34,"words"],[65,36,66,39],[67,10,68,13],[68,10,69,13],[68,15,69,18],[68,19,69,22,"i"],[68,20,69,23],[68,23,69,26],[68,24,69,27],[68,26,69,29,"i"],[68,27,69,30],[68,30,69,33,"hasherBlockSize"],[68,45,69,48],[68,47,69,50,"i"],[68,48,69,51],[68,50,69,53],[68,52,69,55],[69,12,70,17,"oKeyWords"],[69,21,70,26],[69,22,70,27,"i"],[69,23,70,28],[69,24,70,29],[69,28,70,33],[69,38,70,43],[70,12,71,17,"iKeyWords"],[70,21,71,26],[70,22,71,27,"i"],[70,23,71,28],[70,24,71,29],[70,28,71,33],[70,38,71,43],[71,10,72,13],[72,10,73,13,"oKey"],[72,14,73,17],[72,15,73,18,"sigBytes"],[72,23,73,26],[72,26,73,29,"iKey"],[72,30,73,33],[72,31,73,34,"sigBytes"],[72,39,73,42],[72,42,73,45,"hasherBlockSizeBytes"],[72,62,73,65],[74,10,75,13],[75,10,76,13],[75,14,76,17],[75,15,76,18,"reset"],[75,20,76,23],[75,21,76,24],[75,22,76,25],[76,8,77,9],[76,9,77,10],[77,8,79,9],[78,0,80,0],[79,0,81,0],[80,0,82,0],[81,0,83,0],[82,0,84,0],[83,0,85,0],[84,8,86,9,"reset"],[84,13,86,14],[84,15,86,16],[84,24,86,16,"reset"],[84,25,86,16],[84,27,86,28],[85,10,87,13],[86,10,88,13],[86,14,88,17,"hasher"],[86,20,88,23],[86,23,88,26],[86,27,88,30],[86,28,88,31,"_hasher"],[86,35,88,38],[88,10,90,13],[89,10,91,13,"hasher"],[89,16,91,19],[89,17,91,20,"reset"],[89,22,91,25],[89,23,91,26],[89,24,91,27],[90,10,92,13,"hasher"],[90,16,92,19],[90,17,92,20,"update"],[90,23,92,26],[90,24,92,27],[90,28,92,31],[90,29,92,32,"_iKey"],[90,34,92,37],[90,35,92,38],[91,8,93,9],[91,9,93,10],[92,8,95,9],[93,0,96,0],[94,0,97,0],[95,0,98,0],[96,0,99,0],[97,0,100,0],[98,0,101,0],[99,0,102,0],[100,0,103,0],[101,0,104,0],[102,0,105,0],[103,0,106,0],[104,8,107,9,"update"],[104,14,107,15],[104,16,107,17],[104,25,107,17,"update"],[104,26,107,27,"messageUpdate"],[104,39,107,40],[104,41,107,42],[105,10,108,13],[105,14,108,17],[105,15,108,18,"_hasher"],[105,22,108,25],[105,23,108,26,"update"],[105,29,108,32],[105,30,108,33,"messageUpdate"],[105,43,108,46],[105,44,108,47],[107,10,110,13],[108,10,111,13],[108,17,111,20],[108,21,111,24],[109,8,112,9],[109,9,112,10],[110,8,114,9],[111,0,115,0],[112,0,116,0],[113,0,117,0],[114,0,118,0],[115,0,119,0],[116,0,120,0],[117,0,121,0],[118,0,122,0],[119,0,123,0],[120,0,124,0],[121,0,125,0],[122,0,126,0],[123,0,127,0],[124,8,128,9,"finalize"],[124,16,128,17],[124,18,128,19],[124,27,128,19,"finalize"],[124,28,128,29,"messageUpdate"],[124,41,128,42],[124,43,128,44],[125,10,129,13],[126,10,130,13],[126,14,130,17,"hasher"],[126,20,130,23],[126,23,130,26],[126,27,130,30],[126,28,130,31,"_hasher"],[126,35,130,38],[128,10,132,13],[129,10,133,13],[129,14,133,17,"innerHash"],[129,23,133,26],[129,26,133,29,"hasher"],[129,32,133,35],[129,33,133,36,"finalize"],[129,41,133,44],[129,42,133,45,"messageUpdate"],[129,55,133,58],[129,56,133,59],[130,10,134,13,"hasher"],[130,16,134,19],[130,17,134,20,"reset"],[130,22,134,25],[130,23,134,26],[130,24,134,27],[131,10,135,13],[131,14,135,17,"hmac"],[131,18,135,21],[131,21,135,24,"hasher"],[131,27,135,30],[131,28,135,31,"finalize"],[131,36,135,39],[131,37,135,40],[131,41,135,44],[131,42,135,45,"_oKey"],[131,47,135,50],[131,48,135,51,"clone"],[131,53,135,56],[131,54,135,57],[131,55,135,58],[131,56,135,59,"concat"],[131,62,135,65],[131,63,135,66,"innerHash"],[131,72,135,75],[131,73,135,76],[131,74,135,77],[132,10,137,13],[132,17,137,20,"hmac"],[132,21,137,24],[133,8,138,9],[134,6,139,5],[134,7,139,6],[134,8,139,7],[135,4,140,1],[135,5,140,2],[135,7,140,3],[135,8,140,4],[136,2,143,0],[136,3,143,1],[136,4,143,2],[137,0,143,4],[137,3]],"functionMap":{"names":["<global>","<anonymous>","Base.extend$argument_0.init","Base.extend$argument_0.reset","Base.extend$argument_0.update","Base.extend$argument_0.finalize"],"mappings":"AAA,EC;CDa,OC;eCyB;UDsC;gBES;UFO;iBGc;UHK;mBIgB;UJU;CDK"}},"type":"js/module"}]}