{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"RgnQ5fGQDzGiH1jMCpSamjCAQN4=","exportNames":["*"]}},{"name":"./addQuarters.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":47,"index":112}}],"key":"J7VZrCZ/m6TQ//8mFrNkpjNI3Vc=","exportNames":["*"]}},{"name":"./constructFrom.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":113},"end":{"line":3,"column":51,"index":164}}],"key":"T7NN9kAXgevBJrbZAUncNw7dQDQ=","exportNames":["*"]}},{"name":"./startOfQuarter.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":165},"end":{"line":4,"column":53,"index":218}}],"key":"aU/n5nvPF8kBieqP++QSiTpo2xI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.eachQuarterOfInterval = eachQuarterOfInterval;\n  var _normalizeInterval2 = require(_dependencyMap[0], \"./_lib/normalizeInterval.js\");\n  var _addQuarters = require(_dependencyMap[1], \"./addQuarters.js\");\n  var _constructFrom = require(_dependencyMap[2], \"./constructFrom.js\");\n  var _startOfQuarter = require(_dependencyMap[3], \"./startOfQuarter.js\");\n  /**\n   * The {@link eachQuarterOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachQuarterOfInterval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name eachQuarterOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of quarters within the specified time interval.\n   *\n   * @description\n   * Return the array of quarters within the specified time interval.\n   *\n   * @typeParam IntervalType - Interval type.\n   * @typeParam Options - Options type.\n   *\n   * @param interval - The interval\n   * @param options - An object with options\n   *\n   * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n   *\n   * @example\n   * // Each quarter within interval 6 February 2014 - 10 August 2014:\n   * const result = eachQuarterOfInterval({\n   *   start: new Date(2014, 1, 6),\n   *   end: new Date(2014, 7, 10),\n   * })\n   * //=> [\n   * //   Wed Jan 01 2014 00:00:00,\n   * //   Tue Apr 01 2014 00:00:00,\n   * //   Tue Jul 01 2014 00:00:00,\n   * // ]\n   */\n  function eachQuarterOfInterval(interval, options) {\n    var _normalizeInterval = (0, _normalizeInterval2.normalizeInterval)(options?.in, interval),\n      start = _normalizeInterval.start,\n      end = _normalizeInterval.end;\n    var reversed = +start > +end;\n    var endTime = reversed ? +(0, _startOfQuarter.startOfQuarter)(start) : +(0, _startOfQuarter.startOfQuarter)(end);\n    var date = reversed ? (0, _startOfQuarter.startOfQuarter)(end) : (0, _startOfQuarter.startOfQuarter)(start);\n    var step = options?.step ?? 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    var dates = [];\n    while (+date <= endTime) {\n      dates.push((0, _constructFrom.constructFrom)(start, date));\n      date = (0, _addQuarters.addQuarters)(date, step);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = eachQuarterOfInterval;\n});","lineCount":73,"map":[[7,2,1,0],[7,6,1,0,"_normalizeInterval2"],[7,25,1,0],[7,28,1,0,"require"],[7,35,1,0],[7,36,1,0,"_dependencyMap"],[7,50,1,0],[8,2,2,0],[8,6,2,0,"_addQuarters"],[8,18,2,0],[8,21,2,0,"require"],[8,28,2,0],[8,29,2,0,"_dependencyMap"],[8,43,2,0],[9,2,3,0],[9,6,3,0,"_constructFrom"],[9,20,3,0],[9,23,3,0,"require"],[9,30,3,0],[9,31,3,0,"_dependencyMap"],[9,45,3,0],[10,2,4,0],[10,6,4,0,"_startOfQuarter"],[10,21,4,0],[10,24,4,0,"require"],[10,31,4,0],[10,32,4,0,"_dependencyMap"],[10,46,4,0],[11,2,6,0],[12,0,7,0],[13,0,8,0],[15,2,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[22,2,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,2,45,7],[50,11,45,16,"eachQuarterOfInterval"],[50,32,45,37,"eachQuarterOfInterval"],[50,33,45,38,"interval"],[50,41,45,46],[50,43,45,48,"options"],[50,50,45,55],[50,52,45,57],[51,4,46,2],[51,8,46,2,"_normalizeInterval"],[51,26,46,2],[51,29,46,25],[51,33,46,25,"normalizeInterval"],[51,70,46,42],[51,72,46,43,"options"],[51,79,46,50],[51,81,46,52,"in"],[51,83,46,54],[51,85,46,56,"interval"],[51,93,46,64],[51,94,46,65],[52,6,46,10,"start"],[52,11,46,15],[52,14,46,15,"_normalizeInterval"],[52,32,46,15],[52,33,46,10,"start"],[52,38,46,15],[53,6,46,17,"end"],[53,9,46,20],[53,12,46,20,"_normalizeInterval"],[53,30,46,20],[53,31,46,17,"end"],[53,34,46,20],[54,4,48,2],[54,8,48,6,"reversed"],[54,16,48,14],[54,19,48,17],[54,20,48,18,"start"],[54,25,48,23],[54,28,48,26],[54,29,48,27,"end"],[54,32,48,30],[55,4,49,2],[55,8,49,8,"endTime"],[55,15,49,15],[55,18,49,18,"reversed"],[55,26,49,26],[55,29,49,29],[55,30,49,30],[55,34,49,30,"startOfQuarter"],[55,64,49,44],[55,66,49,45,"start"],[55,71,49,50],[55,72,49,51],[55,75,49,54],[55,76,49,55],[55,80,49,55,"startOfQuarter"],[55,110,49,69],[55,112,49,70,"end"],[55,115,49,73],[55,116,49,74],[56,4,50,2],[56,8,50,6,"date"],[56,12,50,10],[56,15,50,13,"reversed"],[56,23,50,21],[56,26,50,24],[56,30,50,24,"startOfQuarter"],[56,60,50,38],[56,62,50,39,"end"],[56,65,50,42],[56,66,50,43],[56,69,50,46],[56,73,50,46,"startOfQuarter"],[56,103,50,60],[56,105,50,61,"start"],[56,110,50,66],[56,111,50,67],[57,4,52,2],[57,8,52,6,"step"],[57,12,52,10],[57,15,52,13,"options"],[57,22,52,20],[57,24,52,22,"step"],[57,28,52,26],[57,32,52,30],[57,33,52,31],[58,4,53,2],[58,8,53,6],[58,9,53,7,"step"],[58,13,53,11],[58,15,53,13],[58,22,53,20],[58,24,53,22],[59,4,54,2],[59,8,54,6,"step"],[59,12,54,10],[59,15,54,13],[59,16,54,14],[59,18,54,16],[60,6,55,4,"step"],[60,10,55,8],[60,13,55,11],[60,14,55,12,"step"],[60,18,55,16],[61,6,56,4,"reversed"],[61,14,56,12],[61,17,56,15],[61,18,56,16,"reversed"],[61,26,56,24],[62,4,57,2],[63,4,59,2],[63,8,59,8,"dates"],[63,13,59,13],[63,16,59,16],[63,18,59,18],[64,4,61,2],[64,11,61,9],[64,12,61,10,"date"],[64,16,61,14],[64,20,61,18,"endTime"],[64,27,61,25],[64,29,61,27],[65,6,62,4,"dates"],[65,11,62,9],[65,12,62,10,"push"],[65,16,62,14],[65,17,62,15],[65,21,62,15,"constructFrom"],[65,49,62,28],[65,51,62,29,"start"],[65,56,62,34],[65,58,62,36,"date"],[65,62,62,40],[65,63,62,41],[65,64,62,42],[66,6,63,4,"date"],[66,10,63,8],[66,13,63,11],[66,17,63,11,"addQuarters"],[66,41,63,22],[66,43,63,23,"date"],[66,47,63,27],[66,49,63,29,"step"],[66,53,63,33],[66,54,63,34],[67,4,64,2],[68,4,66,2],[68,11,66,9,"reversed"],[68,19,66,17],[68,22,66,20,"dates"],[68,27,66,25],[68,28,66,26,"reverse"],[68,35,66,33],[68,36,66,34],[68,37,66,35],[68,40,66,38,"dates"],[68,45,66,43],[69,2,67,0],[71,2,69,0],[72,2,69,0],[72,6,69,0,"_default"],[72,14,69,0],[72,17,69,0,"exports"],[72,24,69,0],[72,25,69,0,"default"],[72,32,69,0],[72,35,70,15,"eachQuarterOfInterval"],[72,56,70,36],[73,0,70,36],[73,3]],"functionMap":{"names":["<global>","eachQuarterOfInterval"],"mappings":"AAA;OC4C;CDsB"}},"type":"js/module"}]}