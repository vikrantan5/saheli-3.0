{"dependencies":[{"name":"./core","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":37,"index":123},"end":{"line":4,"column":54,"index":140}}],"key":"FXN3sf/EjRB4E2rwdgFcvRpWg7U=","exportNames":["*"]}},{"name":"./sha1","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":56,"index":142},"end":{"line":4,"column":73,"index":159}}],"key":"UvXu4zVWtUlIJwxk6pzAZvafV6A=","exportNames":["*"]}},{"name":"./hmac","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":75,"index":161},"end":{"line":4,"column":92,"index":178}}],"key":"gjPbC+7SPgOAHZIpppjdmTlkXEY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  ;\n  (function (root, factory, undef) {\n    if (typeof exports === \"object\") {\n      // CommonJS\n      module.exports = exports = factory(require(_dependencyMap[0], \"./core\"), require(_dependencyMap[1], \"./sha1\"), require(_dependencyMap[2], \"./hmac\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      // AMD\n      define([\"./core\", \"./sha1\", \"./hmac\"], factory);\n    } else {\n      // Global (browser)\n      factory(root.CryptoJS);\n    }\n  })(this, function (CryptoJS) {\n    (function () {\n      // Shortcuts\n      var C = CryptoJS;\n      var C_lib = C.lib;\n      var Base = C_lib.Base;\n      var WordArray = C_lib.WordArray;\n      var C_algo = C.algo;\n      var MD5 = C_algo.MD5;\n\n      /**\n       * This key derivation function is meant to conform with EVP_BytesToKey.\n       * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n       */\n      var EvpKDF = C_algo.EvpKDF = Base.extend({\n        /**\n         * Configuration options.\n         *\n         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n         * @property {number} iterations The number of iterations to perform. Default: 1\n         */\n        cfg: Base.extend({\n          keySize: 128 / 32,\n          hasher: MD5,\n          iterations: 1\n        }),\n        /**\n         * Initializes a newly created key derivation function.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n         *\n         * @example\n         *\n         *     var kdf = CryptoJS.algo.EvpKDF.create();\n         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n         */\n        init: function (cfg) {\n          this.cfg = this.cfg.extend(cfg);\n        },\n        /**\n         * Derives a key from a password.\n         *\n         * @param {WordArray|string} password The password.\n         * @param {WordArray|string} salt A salt.\n         *\n         * @return {WordArray} The derived key.\n         *\n         * @example\n         *\n         *     var key = kdf.compute(password, salt);\n         */\n        compute: function (password, salt) {\n          var block;\n\n          // Shortcut\n          var cfg = this.cfg;\n\n          // Init hasher\n          var hasher = cfg.hasher.create();\n\n          // Initial values\n          var derivedKey = WordArray.create();\n\n          // Shortcuts\n          var derivedKeyWords = derivedKey.words;\n          var keySize = cfg.keySize;\n          var iterations = cfg.iterations;\n\n          // Generate key\n          while (derivedKeyWords.length < keySize) {\n            if (block) {\n              hasher.update(block);\n            }\n            block = hasher.update(password).finalize(salt);\n            hasher.reset();\n\n            // Iterations\n            for (var i = 1; i < iterations; i++) {\n              block = hasher.finalize(block);\n              hasher.reset();\n            }\n            derivedKey.concat(block);\n          }\n          derivedKey.sigBytes = keySize * 4;\n          return derivedKey;\n        }\n      });\n\n      /**\n       * Derives a key from a password.\n       *\n       * @param {WordArray|string} password The password.\n       * @param {WordArray|string} salt A salt.\n       * @param {Object} cfg (Optional) The configuration options to use for this computation.\n       *\n       * @return {WordArray} The derived key.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var key = CryptoJS.EvpKDF(password, salt);\n       *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n       *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n       */\n      C.EvpKDF = function (password, salt, cfg) {\n        return EvpKDF.create(cfg).compute(password, salt);\n      };\n    })();\n    return CryptoJS.EvpKDF;\n  });\n});","lineCount":127,"map":[[2,2,1,0],[3,2,1,2],[3,13,1,12,"root"],[3,17,1,16],[3,19,1,18,"factory"],[3,26,1,25],[3,28,1,27,"undef"],[3,33,1,32],[3,35,1,34],[4,4,2,1],[4,8,2,5],[4,15,2,12,"exports"],[4,22,2,19],[4,27,2,24],[4,35,2,32],[4,37,2,34],[5,6,3,2],[6,6,4,2,"module"],[6,12,4,8],[6,13,4,9,"exports"],[6,20,4,16],[6,23,4,19,"exports"],[6,30,4,26],[6,33,4,29,"factory"],[6,40,4,36],[6,41,4,37,"require"],[6,48,4,44],[6,49,4,44,"_dependencyMap"],[6,63,4,44],[6,76,4,53],[6,77,4,54],[6,79,4,56,"require"],[6,86,4,63],[6,87,4,63,"_dependencyMap"],[6,101,4,63],[6,114,4,72],[6,115,4,73],[6,117,4,75,"require"],[6,124,4,82],[6,125,4,82,"_dependencyMap"],[6,139,4,82],[6,152,4,91],[6,153,4,92],[6,154,4,93],[7,4,5,1],[7,5,5,2],[7,11,6,6],[7,15,6,10],[7,22,6,17,"define"],[7,28,6,23],[7,33,6,28],[7,43,6,38],[7,47,6,42,"define"],[7,53,6,48],[7,54,6,49,"amd"],[7,57,6,52],[7,59,6,54],[8,6,7,2],[9,6,8,2,"define"],[9,12,8,8],[9,13,8,9],[9,14,8,10],[9,22,8,18],[9,24,8,20],[9,32,8,28],[9,34,8,30],[9,42,8,38],[9,43,8,39],[9,45,8,41,"factory"],[9,52,8,48],[9,53,8,49],[10,4,9,1],[10,5,9,2],[10,11,10,6],[11,6,11,2],[12,6,12,2,"factory"],[12,13,12,9],[12,14,12,10,"root"],[12,18,12,14],[12,19,12,15,"CryptoJS"],[12,27,12,23],[12,28,12,24],[13,4,13,1],[14,2,14,0],[14,3,14,1],[14,5,14,2],[14,9,14,6],[14,11,14,8],[14,21,14,18,"CryptoJS"],[14,29,14,26],[14,31,14,28],[15,4,16,2],[15,17,16,14],[16,6,17,5],[17,6,18,5],[17,10,18,9,"C"],[17,11,18,10],[17,14,18,13,"CryptoJS"],[17,22,18,21],[18,6,19,5],[18,10,19,9,"C_lib"],[18,15,19,14],[18,18,19,17,"C"],[18,19,19,18],[18,20,19,19,"lib"],[18,23,19,22],[19,6,20,5],[19,10,20,9,"Base"],[19,14,20,13],[19,17,20,16,"C_lib"],[19,22,20,21],[19,23,20,22,"Base"],[19,27,20,26],[20,6,21,5],[20,10,21,9,"WordArray"],[20,19,21,18],[20,22,21,21,"C_lib"],[20,27,21,26],[20,28,21,27,"WordArray"],[20,37,21,36],[21,6,22,5],[21,10,22,9,"C_algo"],[21,16,22,15],[21,19,22,18,"C"],[21,20,22,19],[21,21,22,20,"algo"],[21,25,22,24],[22,6,23,5],[22,10,23,9,"MD5"],[22,13,23,12],[22,16,23,15,"C_algo"],[22,22,23,21],[22,23,23,22,"MD5"],[22,26,23,25],[24,6,25,5],[25,0,26,0],[26,0,27,0],[27,0,28,0],[28,6,29,5],[28,10,29,9,"EvpKDF"],[28,16,29,15],[28,19,29,18,"C_algo"],[28,25,29,24],[28,26,29,25,"EvpKDF"],[28,32,29,31],[28,35,29,34,"Base"],[28,39,29,38],[28,40,29,39,"extend"],[28,46,29,45],[28,47,29,46],[29,8,30,9],[30,0,31,0],[31,0,32,0],[32,0,33,0],[33,0,34,0],[34,0,35,0],[35,0,36,0],[36,8,37,9,"cfg"],[36,11,37,12],[36,13,37,14,"Base"],[36,17,37,18],[36,18,37,19,"extend"],[36,24,37,25],[36,25,37,26],[37,10,38,13,"keySize"],[37,17,38,20],[37,19,38,22],[37,22,38,25],[37,25,38,26],[37,27,38,28],[38,10,39,13,"hasher"],[38,16,39,19],[38,18,39,21,"MD5"],[38,21,39,24],[39,10,40,13,"iterations"],[39,20,40,23],[39,22,40,25],[40,8,41,9],[40,9,41,10],[40,10,41,11],[41,8,43,9],[42,0,44,0],[43,0,45,0],[44,0,46,0],[45,0,47,0],[46,0,48,0],[47,0,49,0],[48,0,50,0],[49,0,51,0],[50,0,52,0],[51,0,53,0],[52,8,54,9,"init"],[52,12,54,13],[52,14,54,15],[52,23,54,15,"init"],[52,24,54,25,"cfg"],[52,27,54,28],[52,29,54,30],[53,10,55,13],[53,14,55,17],[53,15,55,18,"cfg"],[53,18,55,21],[53,21,55,24],[53,25,55,28],[53,26,55,29,"cfg"],[53,29,55,32],[53,30,55,33,"extend"],[53,36,55,39],[53,37,55,40,"cfg"],[53,40,55,43],[53,41,55,44],[54,8,56,9],[54,9,56,10],[55,8,58,9],[56,0,59,0],[57,0,60,0],[58,0,61,0],[59,0,62,0],[60,0,63,0],[61,0,64,0],[62,0,65,0],[63,0,66,0],[64,0,67,0],[65,0,68,0],[66,0,69,0],[67,8,70,9,"compute"],[67,15,70,16],[67,17,70,18],[67,26,70,18,"compute"],[67,27,70,28,"password"],[67,35,70,36],[67,37,70,38,"salt"],[67,41,70,42],[67,43,70,44],[68,10,71,13],[68,14,71,17,"block"],[68,19,71,22],[70,10,73,13],[71,10,74,13],[71,14,74,17,"cfg"],[71,17,74,20],[71,20,74,23],[71,24,74,27],[71,25,74,28,"cfg"],[71,28,74,31],[73,10,76,13],[74,10,77,13],[74,14,77,17,"hasher"],[74,20,77,23],[74,23,77,26,"cfg"],[74,26,77,29],[74,27,77,30,"hasher"],[74,33,77,36],[74,34,77,37,"create"],[74,40,77,43],[74,41,77,44],[74,42,77,45],[76,10,79,13],[77,10,80,13],[77,14,80,17,"derivedKey"],[77,24,80,27],[77,27,80,30,"WordArray"],[77,36,80,39],[77,37,80,40,"create"],[77,43,80,46],[77,44,80,47],[77,45,80,48],[79,10,82,13],[80,10,83,13],[80,14,83,17,"derivedKeyWords"],[80,29,83,32],[80,32,83,35,"derivedKey"],[80,42,83,45],[80,43,83,46,"words"],[80,48,83,51],[81,10,84,13],[81,14,84,17,"keySize"],[81,21,84,24],[81,24,84,27,"cfg"],[81,27,84,30],[81,28,84,31,"keySize"],[81,35,84,38],[82,10,85,13],[82,14,85,17,"iterations"],[82,24,85,27],[82,27,85,30,"cfg"],[82,30,85,33],[82,31,85,34,"iterations"],[82,41,85,44],[84,10,87,13],[85,10,88,13],[85,17,88,20,"derivedKeyWords"],[85,32,88,35],[85,33,88,36,"length"],[85,39,88,42],[85,42,88,45,"keySize"],[85,49,88,52],[85,51,88,54],[86,12,89,17],[86,16,89,21,"block"],[86,21,89,26],[86,23,89,28],[87,14,90,21,"hasher"],[87,20,90,27],[87,21,90,28,"update"],[87,27,90,34],[87,28,90,35,"block"],[87,33,90,40],[87,34,90,41],[88,12,91,17],[89,12,92,17,"block"],[89,17,92,22],[89,20,92,25,"hasher"],[89,26,92,31],[89,27,92,32,"update"],[89,33,92,38],[89,34,92,39,"password"],[89,42,92,47],[89,43,92,48],[89,44,92,49,"finalize"],[89,52,92,57],[89,53,92,58,"salt"],[89,57,92,62],[89,58,92,63],[90,12,93,17,"hasher"],[90,18,93,23],[90,19,93,24,"reset"],[90,24,93,29],[90,25,93,30],[90,26,93,31],[92,12,95,17],[93,12,96,17],[93,17,96,22],[93,21,96,26,"i"],[93,22,96,27],[93,25,96,30],[93,26,96,31],[93,28,96,33,"i"],[93,29,96,34],[93,32,96,37,"iterations"],[93,42,96,47],[93,44,96,49,"i"],[93,45,96,50],[93,47,96,52],[93,49,96,54],[94,14,97,21,"block"],[94,19,97,26],[94,22,97,29,"hasher"],[94,28,97,35],[94,29,97,36,"finalize"],[94,37,97,44],[94,38,97,45,"block"],[94,43,97,50],[94,44,97,51],[95,14,98,21,"hasher"],[95,20,98,27],[95,21,98,28,"reset"],[95,26,98,33],[95,27,98,34],[95,28,98,35],[96,12,99,17],[97,12,101,17,"derivedKey"],[97,22,101,27],[97,23,101,28,"concat"],[97,29,101,34],[97,30,101,35,"block"],[97,35,101,40],[97,36,101,41],[98,10,102,13],[99,10,103,13,"derivedKey"],[99,20,103,23],[99,21,103,24,"sigBytes"],[99,29,103,32],[99,32,103,35,"keySize"],[99,39,103,42],[99,42,103,45],[99,43,103,46],[100,10,105,13],[100,17,105,20,"derivedKey"],[100,27,105,30],[101,8,106,9],[102,6,107,5],[102,7,107,6],[102,8,107,7],[104,6,109,5],[105,0,110,0],[106,0,111,0],[107,0,112,0],[108,0,113,0],[109,0,114,0],[110,0,115,0],[111,0,116,0],[112,0,117,0],[113,0,118,0],[114,0,119,0],[115,0,120,0],[116,0,121,0],[117,0,122,0],[118,0,123,0],[119,0,124,0],[120,0,125,0],[121,6,126,5,"C"],[121,7,126,6],[121,8,126,7,"EvpKDF"],[121,14,126,13],[121,17,126,16],[121,27,126,26,"password"],[121,35,126,34],[121,37,126,36,"salt"],[121,41,126,40],[121,43,126,42,"cfg"],[121,46,126,45],[121,48,126,47],[122,8,127,9],[122,15,127,16,"EvpKDF"],[122,21,127,22],[122,22,127,23,"create"],[122,28,127,29],[122,29,127,30,"cfg"],[122,32,127,33],[122,33,127,34],[122,34,127,35,"compute"],[122,41,127,42],[122,42,127,43,"password"],[122,50,127,51],[122,52,127,53,"salt"],[122,56,127,57],[122,57,127,58],[123,6,128,5],[123,7,128,6],[124,4,129,1],[124,5,129,2],[124,7,129,3],[124,8,129,4],[125,4,132,1],[125,11,132,8,"CryptoJS"],[125,19,132,16],[125,20,132,17,"EvpKDF"],[125,26,132,23],[126,2,134,0],[126,3,134,1],[126,4,134,2],[127,0,134,4],[127,3]],"functionMap":{"names":["<global>","<anonymous>","Base.extend$argument_0.init","Base.extend$argument_0.compute","C.EvpKDF"],"mappings":"AAA,EC;CDa,OC;eCwC;UDE;kBEc;UFoC;gBGoB;MHE;CDM"}},"type":"js/module"}]}